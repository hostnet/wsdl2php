<?php

/**
 * AbstractRequestType
 * Base type definition of the request payload, which can carry any type of payload content
 * plus optional versioning information and detail level requirements. All concrete request
 * types (e.g., AddItemRequestType) are derived from the abstract request type. The naming
 * convention we use for the concrete type names is the name of the service (the verb or call
 * name) followed by "RequestType": VerbNameRequestType
 */
class AbstractRequestType
{
	/**
	 * @var DetailLevelCodeType | Detail levels are instructions that define standard subsets of data to return for particular
	 * data components (e.g., each Item, Transaction, or User) within the response payload. For
	 * example, a particular detail level might cause the response to include buyer-related data
	 * in every result (e.g., for every Item), but no seller-related data. Specifying a detail
	 * level is like using a predefined attribute list in the SELECT clause of an SQL query. Use
	 * the DetailLevel element to specify the required detail level that the client application
	 * needs pertaining to the data components that are applicable to the request.<br> <br> The
	 * DetailLevelCodeType defines the global list of available detail levels for all request
	 * types. Most request types support certain detail levels or none at all. If you pass a detail
	 * level that exists in the schema but that isn't valid for a particular request, eBay ignores
	 * it processes the request without it. For each request type, see the detail level tables
	 * in the Input/Output Reference to determine which detail levels are applicable and which
	 * elements are returned for each applicable detail level. (Some detail level tables are still
	 * in the eBay Web Services guide. They will be moved to the Input/Output Reference in a future
	 * release.)<br> <br>Note that DetailLevel is required input for GetMyMessages. <br> <br> With
	 * GetSellerList and other calls that retrieve large data sets, please avoid using ReturnAll
	 * when possible. For example, if you use GetSellerList, use a GranularityLevel or use the GetSellerEvents
	 * call instead. If you do use ReturnAll with GetSellerList, use a small EntriesPerPage value
	 * and a short EndTimeFrom/EndTimeTo range for better performance.
	 */
	public $detaillevel;
	/**
	 * @var string | Use ErrorLanguage to return error strings for the call in a different language from the
	 * language commonly associated with the site that the requesting user is registered with.
	 * Specify the standard RFC 3066 language identification tag (e.g., en_US). <br> ID--- country<br> -----
	 * -----<br> de_AT Austria<br> de_CH Switzerland<br> de_DE Germany <br> en_AU Australia <br> en_CA
	 * Canada <br> en_GB United Kingdom<br> en_SG Singapore<br> en_US United States <br> es_ES
	 * Spain <br> fr_BE Belgium (French)<br> fr_CA Canada (French) <br> fr_FR France <br> it_IT
	 * Italy <br> nl_BE Belgium (Dutch)<br> nl_NL Netherlands <br> zh_TW Taiwan<br> zh_CN China<br> en_IN
	 * India<br> en_IE Ireland<br> zh_HK Hong Kong
	 */
	public $errorlanguage;
	/**
	 * @var string | An ID that uniquely identifies a message for a given user. <br /><br /> This value is not
	 * the same as the value used for the GetMemberMessages MessageID. Use the GetMemberMessages
	 * value for used as the GetMyMessages ExternalID instead.
	 */
	public $messageid;
	/**
	 * @var string | The version of the response payload schema. Indicates the version of the schema that eBay
	 * used to process the request. See "Standard Data for All Calls" in the eBay Web Services
	 * Guide for information on using the response version when troubleshooting "CustomCode" values
	 * that appear in the response.
	 */
	public $version;
	/**
	 * @var ErrorHandlingCodeType | Error tolerance level for the call. For calls that support Item Specifics, this is a preference
	 * that controls how eBay handles listing requests when invalid attribute data is passed in.
	 * See Attribute Error Handling in the eBay Web Services guide for details about this field
	 * in listing requests.
	 */
	public $errorhandling;
	/**
	 * @var UUIDType | A unique identifer for a particular call. If the same InvocationID is passed in after it
	 * has been passed in once on a call that succeeded for a particular application and user,
	 * then an error will be returned. The identifier can only contain digits from 0-9 and letters
	 * from A-F. The identifier must be 32 characters long.  For example, 1FB02B2-9D27-3acb-ABA2-9D539C374228.
	 */
	public $invocationid;
	/**
	 * @var WarningLevelCodeType | Controls whether or not to return warnings when the application passes unrecognized elements
	 * in a request (i.e., elements that are not defined in the schema). (This does not control
	 * warnings related to unrecognized values within elements.) Schema element names are case-sensitive,
	 * so this option can also help you remove any potential hidden bugs within your application
	 * due to incorrect case or spelling in tag names before you put your application into the
	 * Production environment. Note that this setting only validates elements; it does not validate
	 * XML attributes.<br> <br> We recommend that you only use this during development and debugging.
	 * Do not use this in requests in your production code.
	 */
	public $warninglevel;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param DetailLevelCodeType $val
	 * @throws Exception
	 */
	public function setDetailLevel($val)
	{
        $this->detaillevel = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setErrorLanguage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ErrorLanguage');
        }
        $this->errorlanguage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MessageID');
        }
        $this->messageid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Version');
        }
        $this->version = (int)$val;
	}

	/**
	 * @param ErrorHandlingCodeType $val
	 * @throws Exception
	 */
	public function setErrorHandling($val)
	{
        $this->errorhandling = (int)$val;
	}

	/**
	 * @param UUIDType $val
	 * @throws Exception
	 */
	public function setInvocationID($val)
	{
        $this->invocationid = (int)$val;
	}

	/**
	 * @param WarningLevelCodeType $val
	 * @throws Exception
	 */
	public function setWarningLevel($val)
	{
        $this->warninglevel = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AddDisputeRequestType
 * Enables a seller to create a new Unpaid Item dispute. (Item Not Received disputes can only
 * be created via the eBay web site.)
 */
class AddDisputeRequestType extends
 AbstractRequestType
{
	/**
	 * @var DisputeExplanationCodeType | The detailed explanation for the dispute. Valid values depend on the value of DisputeReason.
	 * See DisputeExplanationCodeList for details.
	 */
	public $disputeexplanation;
	/**
	 * @var DisputeReasonCodeType | The top-level reason for the dispute. The value of DisputeReason determines which values
	 * of DisputeExplanation are valid. See DisputeExplanationCodeList for details.
	 */
	public $disputereason;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @param DisputeExplanationCodeType $val
	 * @throws Exception
	 */
	public function setDisputeExplanation($val)
	{
        $this->disputeexplanation = (int)$val;
	}

	/**
	 * @param DisputeReasonCodeType $val
	 * @throws Exception
	 */
	public function setDisputeReason($val)
	{
        $this->disputereason = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}
}

/**
 * AbstractResponseType
 * Base type definition of a response payload that can carry any type of payload content with
 * following optional elements:<br> - timestamp of response message<br> - application-level
 * acknowledgement<br> - application-level (business-level) errors and warnings
 */
class AbstractResponseType
{
	/**
	 * @var dateTime | This value represents the date and time when eBay processed the request. The time zone
	 * of this value is GMT and the format is the ISO 8601 date and time format (YYYY-MM-DDTHH:MM:SS.SSSZ).
	 * See Time Values in the eBay Web Services guide for information about this time format and
	 * converting to and from the GMT time zone. Certain calls, such as GetCategories, can return
	 * very large responses that change once a day or less often. For better performance, such
	 * calls may return cached data. In these cases, this time value reflects the time the cached
	 * response was created. Thus, this value is not necessarily within a few seconds of the time
	 * you submitted the request. These are the meta-data calls that can return cached responses: GetCategories,
	 * GetAttributesCS, GetCategory2CS, GetAttributesXsl, GetProductFinder, GetProductFinderXsl,
	 * and GetProductSearchPage.
	 */
	public $timestamp;
	/**
	 * @var AckCodeType | Indicates the response status (e.g., success).
	 */
	public $ack;
	/**
	 * @var string | Unique key to distinguish between recommendations for each item.              Matches a
	 * correlation ID you defined in the request, if any.
	 */
	public $correlationid;
	/**
	 * @var ErrorType | A list of application-level errors (if any) that occurred when eBay processed the request.
	 */
	public $errors;
	/**
	 * @var string | Contains the data for one message.
	 */
	public $message;
	/**
	 * @var string | The version of the response payload schema. Indicates the version of the schema that eBay
	 * used to process the request. See "Standard Data for All Calls" in the eBay Web Services
	 * Guide for information on using the response version when troubleshooting "CustomCode" values
	 * that appear in the response.
	 */
	public $version;
	/**
	 * @var string | This refers to the specific software build that eBay used when processing the request and
	 * generating the response. This includes the version number plus additional information.
	 * eBay Developer Support may request the build information when helping you resolve technical
	 * issues.
	 */
	public $build;
	/**
	 * @var string | Event name of the notification. Only returned by Platform Notifications.
	 */
	public $notificationeventname;
	/**
	 * @var DuplicateInvocationDetailsType | Information that explains a failure due to a duplicate InvocationID being passed in.
	 */
	public $duplicateinvocationdetails;
	/**
	 * @var string | The displayable user ID of the recipient.
	 */
	public $recipientuserid;
	/**
	 * @var string | Unique identifier for the user that does not change when the eBay user name is changed.
	 * Use when an application needs to associate a new eBay user name with the corresponding
	 * eBay user. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous, this
	 * tag will be returned only for that bidder, and the seller of an item that the user is bidding
	 * on.
	 */
	public $eiastoken;
	/**
	 * @var string | A Base64-encoded MD5 hash that allows the recepient of a Platform Notification to verify
	 * this is a valid Platform Notification sent by eBay.
	 */
	public $notificationsignature;
	/**
	 * @var string | Expiration date of the user's authentication token. Only returned within the 7-day period
	 * prior to a token's expiration. To ensure that user authentication tokens are secure and
	 * to help avoid a user's token being compromised, tokens have a limited life span. A token
	 * is only valid for a period of time (set by eBay). After this amount of time has passed,
	 * the token expires and must be replaced with a new token.
	 */
	public $hardexpirationwarning;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setTimestamp($val)
	{
        $this->timestamp = (int)$val;
	}

	/**
	 * @param AckCodeType $val
	 * @throws Exception
	 */
	public function setAck($val)
	{
        $this->ack = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCorrelationID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CorrelationID');
        }
        $this->correlationid = (int)$val;
	}

	/**
	 * @param ErrorType $val
	 * @throws Exception
	 */
	public function setErrors($val)
	{
        $this->errors = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Message');
        }
        $this->message = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Version');
        }
        $this->version = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBuild($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Build');
        }
        $this->build = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setNotificationEventName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for NotificationEventName');
        }
        $this->notificationeventname = (int)$val;
	}

	/**
	 * @param DuplicateInvocationDetailsType $val
	 * @throws Exception
	 */
	public function setDuplicateInvocationDetails($val)
	{
        $this->duplicateinvocationdetails = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRecipientUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RecipientUserID');
        }
        $this->recipientuserid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEIASToken($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for EIASToken');
        }
        $this->eiastoken = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setNotificationSignature($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for NotificationSignature');
        }
        $this->notificationsignature = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setHardExpirationWarning($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for HardExpirationWarning');
        }
        $this->hardexpirationwarning = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AddDisputeResponseType
 * Returned after calling AddDisputeRequest. The response confirms that the Unpaid Item dispute
 * was successfully created.
 */
class AddDisputeResponseType extends
 AbstractResponseType
{
	/**
	 * @var DisputeIDType | The unique identifier of a dispute, returned by the eBay site when the dispute is created.
	 */
	public $disputeid;
	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setDisputeID($val)
	{
        $this->disputeid = (int)$val;
	}
}

/**
 * AddDisputeResponseRequestType
 * Allows a seller to respond to an Unpaid Item or Item Not Received dispute. The response
 * can add a comment or close the dispute.
 */
class AddDisputeResponseRequestType extends
 AbstractRequestType
{
	/**
	 * @var DisputeIDType | The unique identifier of a dispute, returned by the eBay site when the dispute is created.
	 */
	public $disputeid;
	/**
	 * @var string | The text of the message.
	 */
	public $messagetext;
	/**
	 * @var DisputeActivityCodeType | The type of activity the seller is taking on the dispute. The allowed value is determined
	 * by the current value of DisputeState, returned by GetDispute or GetUserDisputes. Some values
	 * are for Unpaid Item disputes and some are for Item Not Received disputes.
	 */
	public $disputeactivity;
	/**
	 * @var string | The shipping carrier used.
	 */
	public $shippingcarrierused;
	/**
	 * @var string | The shipper's tracking number for the item being shipped. Required if DisputeActivity is
	 * SellerShippedItem; otherwise, optional.
	 */
	public $shipmenttracknumber;
	/**
	 * @var dateTime | The date the item under dispute was shipped. Required if DisputeActivity is SellerShippedItem;
	 * otherwise, optional.
	 */
	public $shippingtime;
	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setDisputeID($val)
	{
        $this->disputeid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessageText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MessageText');
        }
        $this->messagetext = (int)$val;
	}

	/**
	 * @param DisputeActivityCodeType $val
	 * @throws Exception
	 */
	public function setDisputeActivity($val)
	{
        $this->disputeactivity = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShippingCarrierUsed($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShippingCarrierUsed');
        }
        $this->shippingcarrierused = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShipmentTrackNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShipmentTrackNumber');
        }
        $this->shipmenttracknumber = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setShippingTime($val)
	{
        $this->shippingtime = (int)$val;
	}
}

/**
 * AddDisputeResponseResponseType
 * Returned after taking an action on a dispute with AddDisputeResponseRequest. Includes the
 * status of the request.
 */
class AddDisputeResponseResponseType extends
 AbstractResponseType
{}

/**
 * AddItemRequestType
 * Defines a single new item and lists it on a specified eBay site. To list multiple new items,
 * execute AddItem once for each item, with a new item definition each time.
 */
class AddItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}
}

/**
 * AddItemResponseType
 * Returns the item ID and the estimated fees for the new listing, as well as          the
 * start and end times of the listing.
 */
class AddItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | ID of the secondary category in which the item would be listed. Only returned if you set
	 * Item.CategoryMappingAllowed to true in the request and the ID you passed in SecondaryCategory
	 * was mapped to a new ID by eBay. If the secondary category has not changed or it has expired
	 * with no replacement, Category2ID does not return a value.
	 */
	public $category2id;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}

	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategory2ID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Category2ID');
        }
        $this->category2id = (int)$val;
	}
}

/**
 * AddLiveAuctionItemRequestType
 * Lists a lot item on the eBay Live Auctions site. The lot item will also be visible to users
 * who search and browse the US eBay.com site. Only authorized eBay Live Auctions sellers can
 * list lot items.
 */
class AddLiveAuctionItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}
}

/**
 * AddLiveAuctionItemResponseType
 * Returns the item ID and the estimated fees for the new lot item listing, as well as the
 * state of the lot item (e.g., categories that changed).
 */
class AddLiveAuctionItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | ID of the secondary category in which the item would be listed. Only returned if you set
	 * Item.CategoryMappingAllowed to true in the request and the ID you passed in SecondaryCategory
	 * was mapped to a new ID by eBay. If the secondary category has not changed or it has expired
	 * with no replacement, Category2ID does not return a value.
	 */
	public $category2id;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategory2ID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Category2ID');
        }
        $this->category2id = (int)$val;
	}
}

/**
 * AddMemberMessageAAQToPartnerRequestType
 * Enables a buyer and seller in a transactional relationship to send messages to each other within
 * 90 days of the creation of the transaction.
 */
class AddMemberMessageAaQtoPartnerRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var MemberMessageType | Holds the content of the message.
	 */
	public $membermessage;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param MemberMessageType $val
	 * @throws Exception
	 */
	public function setMemberMessage($val)
	{
        $this->membermessage = (int)$val;
	}
}

/**
 * AddMemberMessageAAQToPartnerResponseType
 * Response to AddMemberMessageAAQToPartner request.
 */
class AddMemberMessageAaQtoPartnerResponseType extends
 AbstractResponseType
{}

/**
 * AddMemberMessageRTQRequestType
 * Enables a seller to reply to a question about an active item listing.
 */
class AddMemberMessageRtQrequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var MemberMessageType | Holds the content of the message.
	 */
	public $membermessage;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param MemberMessageType $val
	 * @throws Exception
	 */
	public function setMemberMessage($val)
	{
        $this->membermessage = (int)$val;
	}
}

/**
 * AddMemberMessageRTQResponseType
 * Response to AddMemberMessageRTQ request.
 */
class AddMemberMessageRtQresponseType extends
 AbstractResponseType
{}

/**
 * AddMemberMessagesAAQToBidderRequestType
 * Enables a seller to send up to 10 messages to bidders and users who have made offers (via
 * Best Offer) during an active listing.
 */
class AddMemberMessagesAaQtoBidderRequestType extends
 AbstractRequestType
{
	/**
	 * @var AddMemberMessagesAAQToBidderRequestContainerType | Allows a seller to send up to 10 messages to bidders and users who have made offers (via
	 * Best Offer) during an active listing.
	 */
	public $addmembermessagesaaqtobidderrequestcontainer;
	/**
	 * @param AddMemberMessagesAAQToBidderRequestContainerType $val
	 * @throws Exception
	 */
	public function setAddMemberMessagesAAQToBidderRequestContainer($val)
	{
        $this->addmembermessagesaaqtobidderrequestcontainer = (int)$val;
	}
}

/**
 * AddMemberMessagesAAQToBidderResponseType
 * Contains the response information.
 */
class AddMemberMessagesAaQtoBidderResponseType extends
 AbstractResponseType
{
	/**
	 * @var AddMemberMessagesAAQToBidderResponseContainerType | Contains the response information.
	 */
	public $addmembermessagesaaqtobidderresponsecontainer;
	/**
	 * @param AddMemberMessagesAAQToBidderResponseContainerType $val
	 * @throws Exception
	 */
	public function setAddMemberMessagesAAQToBidderResponseContainer($val)
	{
        $this->addmembermessagesaaqtobidderresponsecontainer = (int)$val;
	}
}

/**
 * AddOrderRequestType
 * Combines two or more transactions into a single order, enabling a buyer to pay for all of
 * those transactions with a single payment (and, if so arranged, ship all of the items together). <br><br> Strong
 * recommendation: avoid mixing digital and non-digital listings in the same order. (In the
 * future, AddOrder may enforce this recommendation.)
 */
class AddOrderRequestType extends
 AbstractRequestType
{
	/**
	 * @var OrderType | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @param OrderType $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        $this->order = (int)$val;
	}
}

/**
 * AddOrderResponseType
 * Returns a unique identifier for the order. A buyer may make a single payment to purchase
 * all of the item transactions that are included in the order.
 */
class AddOrderResponseType extends
 AbstractResponseType
{
	/**
	 * @var OrderIDType | ID of the Half.com order associated with the payment. Returns 0 for single-transaction
	 * orders.
	 */
	public $orderid;
	/**
	 * @var dateTime | Date and time the order was created. Also applicable to Half.com (for GetOrders).
	 */
	public $createdtime;
	/**
	 * @param OrderIDType $val
	 * @throws Exception
	 */
	public function setOrderID($val)
	{
        $this->orderid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreatedTime($val)
	{
        $this->createdtime = (int)$val;
	}
}

/**
 * AddSecondChanceItemRequestType
 * Creates a new Second Chance Offer (that is, an offer for an unsold item) for one of that
 * item's non-winning bidders.
 */
class AddSecondChanceItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var UserIDType | Specifies the bidder from the original, ended listing to whom the seller is extending the
	 * second chance offer. Specify only one RecipientBidderUserID per call. If multiple users
	 * are specified (each in a RecipientBidderUserID node), only the last one specified receives
	 * the offer.
	 */
	public $recipientbidderuserid;
	/**
	 * @var AmountType | For Chinese auction listings, Buy It Now allows a user to purchase the item at a fixed
	 * price and end the auction immediately. eBay China also supports Buy It Now for Dutch auction
	 * listings (see International Differences Overview in the eBay Web Services guide). Use this
	 * field to add Buy It Now and specify the amount a buyer would need to bid to take advantage
	 * of the Buy It Now feature. <br><br> On the main eBay site, not applicable to fixed-price
	 * items (ListingTypeCodeType type StoresFixedPrice or FixedPriceItem), AdFormat listings,
	 * or Half.com listings. For fixed-price and Half.com listings, see StartPrice instead. See
	 * the eBay Web Services Guide for validation rules when revising US eBay Motors listings,
	 * including rules for lowering the Buy It Now price of a Motors listing. <br><br> On most
	 * sites, once a Chinese auction has bids, the listing is no longer eligible for Buy It Now.
	 * However, calls like GetItem and GetSearchResults still return the BuyItNowPrice that the
	 * seller set for the listing. You can use Item.SellingStatus.BidCount to determine whether
	 * an auction with Buy It Now has bids or not. With GetSearchResults, you can examine the
	 * Item.SearchDetails.BuyItNowEnabled flag to determine whether an auction is still a Buy
	 * It Now listing. With GetItem, you can examine the Item.ListingDetails.BuyItNowAvailable
	 * flag to determine whether a Dutch auction is still a Buy It Now listing. <br><br> For a
	 * listing to be eligible for Express, the max Buy It Now Price is USD 10,000.00 for the US. (Additional
	 * price limits may be imposed by the seller's PayPal account or the payment method used.
	 * Such limits cannot be determined via the eBay API and are not covered in eBay's API documentation,
	 * as they may vary for each user.) <br><br> To remove this value when revising or relisting
	 * an item, use DeletedField.
	 */
	public $buyitnowprice;
	/**
	 * @var boolean | Regardless of the request version you specify, the seller always receives a copy of the
	 * notification email that goes to the recipient user.
	 */
	public $copyemailtoseller;
	/**
	 * @var SecondChanceOfferDurationCodeType | Specifies the length of time an auction can be open, in days. The allowed durations vary
	 * according to the type of listing. The value GTC means Good Til Canceled.
	 */
	public $duration;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var string | Text response to buyer from seller.
	 */
	public $sellermessage;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setRecipientBidderUserID($val)
	{
        $this->recipientbidderuserid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBuyItNowPrice($val)
	{
        $this->buyitnowprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCopyEmailToSeller($val)
	{
        $this->copyemailtoseller = (int)$val;
	}

	/**
	 * @param SecondChanceOfferDurationCodeType $val
	 * @throws Exception
	 */
	public function setDuration($val)
	{
        $this->duration = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerMessage');
        }
        $this->sellermessage = (int)$val;
	}
}

/**
 * AddSecondChanceItemResponseType
 * AddSecondChanceItem response for a new Second Chance Offer listing.
 */
class AddSecondChanceItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}
}

/**
 * AddToItemDescriptionRequestType
 * Adds text to the end of the description section of an item listing.
 */
class AddToItemDescriptionRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}
}

/**
 * AddToItemDescriptionResponseType
 * Indicates the success or failure of the attempt to add text to the end of the description
 * section of an item listing.
 */
class AddToItemDescriptionResponseType extends
 AbstractResponseType
{}

/**
 * AddToWatchListRequestType
 * Adds one or more items to the user's My eBay watch list.
 */
class AddToWatchListRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}
}

class AddToWatchListResponseType extends
 AbstractResponseType
{
	/**
	 * @var int | (out) The current number of items in the user's watch list (after those specified in the
	 * call request have been removed)
	 */
	public $watchlistcount;
	/**
	 * @var int | (out) The maximum number of items allowed in watch lists. Currently this value is the same for
	 * all sites and all users.
	 */
	public $watchlistmaximum;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWatchListCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->watchlistcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWatchListMaximum($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->watchlistmaximum = (int)$val;
	}
}

/**
 * AddTransactionConfirmationItemRequestType
 * Ends the listing specified by ItemID (if listed for at least 24 hours) and creates a new
 * Transaction Confirmation Request (TCR) for an item, enabling the TCR recipient to purchase
 * the item. A TCR can be sent by a seller to any one of the following: a bidder, a best offer
 * buyer, a member who has asked the seller a question, or any member with a postal code. This
 * call can also be used to verify whether a new TCR can be created. Applies to the US eBay
 * Motors site (except Parts and Accessories category), effective July 2006.
 */
class AddTransactionConfirmationItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var UserIDType | The displayable user ID of the recipient.
	 */
	public $recipientuserid;
	/**
	 * @var string | If true, specifies that the seller is verifying whether a new Transaction Confirmation
	 * Request (TCR) can be created. Thus, if this value is passed as true, then no Transaction
	 * Confirmation Request is actually made. If VerifyEligibilityOnly is not passed, or is false,
	 * a Transaction Confirmation Request is actually made.
	 */
	public $verifyeligibilityonly;
	/**
	 * @var string | Specifies the postal code of the user to whom the seller is offering the Transaction Confirmation
	 * Request. Required only if the user does not meet the other options listed in RecipientRelationCodeType.
	 * An error is returned if RecipientUserID and RecipientPostalCode do not match for more than
	 * 3 times for a seller per day.
	 */
	public $recipientpostalcode;
	/**
	 * @var RecipientRelationCodeType | Specifies the current relationship between the seller and the potential buyer. A seller
	 * can make a Transaction Confirmation Request (TCR) for an item to a potential buyer if the
	 * buyer meets one of several criteria. A TCR is sent by a seller to one of the following:
	 * a bidder, a best offer buyer, a member with an ASQ question, or any member with a postal
	 * code. See the values and annotations in RecipientRelationCodeType.
	 */
	public $recipientrelationtype;
	/**
	 * @var AmountType | The amount the offer recipient must pay to buy the item specified in the Transaction Confirmation
	 * Request (TCR). A negotiated amount between the buyer and the seller.
	 */
	public $negotiatedprice;
	/**
	 * @var SecondChanceOfferDurationCodeType | Specifies the ID of a set of default durations for a certain type of listing. The actual
	 * duration values are returned within the FeatureDefinitions node. The type of listing is
	 * named in the type attribute.
	 */
	public $listingduration;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Comments the seller wants to send to the recipient (bidder, best offer buyer, member with
	 * an ASQ question, or member with a postal code).
	 */
	public $comments;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setRecipientUserID($val)
	{
        $this->recipientuserid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setVerifyEligibilityOnly($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for VerifyEligibilityOnly');
        }
        $this->verifyeligibilityonly = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRecipientPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RecipientPostalCode');
        }
        $this->recipientpostalcode = (int)$val;
	}

	/**
	 * @param RecipientRelationCodeType $val
	 * @throws Exception
	 */
	public function setRecipientRelationType($val)
	{
        $this->recipientrelationtype = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setNegotiatedPrice($val)
	{
        $this->negotiatedprice = (int)$val;
	}

	/**
	 * @param SecondChanceOfferDurationCodeType $val
	 * @throws Exception
	 */
	public function setListingDuration($val)
	{
        $this->listingduration = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setComments($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Comments');
        }
        $this->comments = (int)$val;
	}
}

/**
 * AddTransactionConfirmationItemResponseType
 * Returns an item ID for a new Transaction Confirmation Request (TCR).
 */
class AddTransactionConfirmationItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}
}

/**
 * ApproveLiveAuctionBiddersRequestType
 * Provides Live Auction sellers with the ability to approve, decline, and set the bidding
 * limit of the bidders that have signed up for a catalog. Includes the list of bidders for
 * the requested item as part of the general item listing data.
 */
class ApproveLiveAuctionBiddersRequestType extends
 AbstractRequestType
{
	/**
	 * @var int | Number that identifies the seller's eBay Live Auctions catalog within which the lot item
	 * will be listed. Use GetLiveAuctionCatalogDetails to determine the seller's available catalog
	 * IDs.
	 */
	public $usercatalogid;
	/**
	 * @var BidApprovalArrayType | Approval details for a specific set of bidders.
	 */
	public $bidapproval;
	/**
	 * @var boolean | This will approve all bidders in the catalog in the pending status only. This is an optional
	 * field. If provided and set to true, do not send BidApproval.
	 */
	public $approveallpending;
	/**
	 * @var AmountType | This is the amount that bidders are beings approved for. This is required if user has set
	 * ApproveAllPending to true. It only applies to bidder requests that are in pending status.
	 */
	public $allapprovedbiddinglimit;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUserCatalogID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->usercatalogid = (int)$val;
	}

	/**
	 * @param BidApprovalArrayType $val
	 * @throws Exception
	 */
	public function setBidApproval($val)
	{
        $this->bidapproval = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setApproveAllPending($val)
	{
        $this->approveallpending = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAllApprovedBiddingLimit($val)
	{
        $this->allapprovedbiddinglimit = (int)$val;
	}
}

/**
 * ApproveLiveAuctionBiddersResponseType
 * Provides the Live Auction sellers with the ability to approve, decline, and set the bidding
 * limit of the bidders that have signed up for a catalog.
 */
class ApproveLiveAuctionBiddersResponseType extends
 AbstractResponseType
{
	/**
	 * @var LiveAuctionApprovalStatusArrayType | Contains the results of the request for each item. Mulitple bidders can be approved with
	 * one call.
	 */
	public $bidderupdatestatus;
	/**
	 * @param LiveAuctionApprovalStatusArrayType $val
	 * @throws Exception
	 */
	public function setBidderUpdateStatus($val)
	{
        $this->bidderupdatestatus = (int)$val;
	}
}

/**
 * CompleteSaleRequestType
 * Enables a seller to do various tasks after processing a transaction. A seller can leave
 * feedback for the buyer, change the paid status in My eBay, or change the shipped status
 * in My eBay (or any combination of these). Only the seller who listed the item can perform
 * these tasks. This call can be used anytime after a transaction has been created. However,
 * it is recommended that you wait until the sale is complete before you use this call.
 */
class CompleteSaleRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var FeedbackInfoType | Specifies feedback the seller is leaving for the buyer. For a given transaction, the seller
	 * can leave feedback once, and no further modifications can be made to that feedback entry. If
	 * feedback has already been left, FeedbackInfo is not allowed. Call GetFeedback to determine
	 * whether feedback has already been left.
	 */
	public $feedbackinfo;
	/**
	 * @var boolean | If true, the transaction is marked as shipped in My eBay (applicable for Selling Manager
	 * Pro users). If false, the transaction is marked as not shipped in My eBay. If not specified,
	 * the shipped status in My eBay is not modified.
	 */
	public $shipped;
	/**
	 * @var boolean | If true, the transaction is marked as paid in My eBay. If false, the transaction is marked
	 * as not paid in My eBay. If not specified, the paid status in My eBay is not modified.
	 */
	public $paid;
	/**
	 * @var ListingTypeCodeType | The listing format (fixed price, auction, etc) for the automatic item search criteria.
	 */
	public $listingtype;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param FeedbackInfoType $val
	 * @throws Exception
	 */
	public function setFeedbackInfo($val)
	{
        $this->feedbackinfo = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShipped($val)
	{
        $this->shipped = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPaid($val)
	{
        $this->paid = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setListingType($val)
	{
        $this->listingtype = (int)$val;
	}
}

/**
 * CompleteSaleResponseType
 * Indicates the success or failure of the attempt to leave feedback for the buyer,       change
 * the paid status in My eBay, and/or change the shipped status in My eBay.
 */
class CompleteSaleResponseType extends
 AbstractResponseType
{}

/**
 * DeleteMyMessagesRequestType
 * Removes selected alerts and messages for a given user. Alerts that require action and have
 * not been resolved by the user cannot be deleted.
 */
class DeleteMyMessagesRequestType extends
 AbstractRequestType
{
	/**
	 * @var MyMessagesAlertIDArrayType | Contains a list of up to 10 AlertID values. <br /><br /> Either AlertIDs, MessageIDs, or
	 * both must be included in the request. Alerts cannot be flagged. Alerts cannot be moved
	 * into a new folder until they have been resolved. <br /><br /> Resolve alerts by marking
	 * Read (if no action is required), or by using ActionURL (if action is required).
	 */
	public $alertids;
	/**
	 * @var MyMessagesMessageIDArrayType | Contains a list of up to 10 MessageID values. <br /><br /> Either AlertIDs, MessageIDs,
	 * or both must be included in the request. Messages in the Sent box cannot be moved, marked
	 * as Read, or Flagged.
	 */
	public $messageids;
	/**
	 * @param MyMessagesAlertIDArrayType $val
	 * @throws Exception
	 */
	public function setAlertIDs($val)
	{
        $this->alertids = (int)$val;
	}

	/**
	 * @param MyMessagesMessageIDArrayType $val
	 * @throws Exception
	 */
	public function setMessageIDs($val)
	{
        $this->messageids = (int)$val;
	}
}

/**
 * DeleteMyMessagesResponseType
 * The response to DeleteMyMessagesRequestType. If the request was successful, DeleteMyMessages
 * returns nothing.
 */
class DeleteMyMessagesResponseType extends
 AbstractResponseType
{}

/**
 * EndItemRequestType
 * Ends the specified item listing before the date and time at which it would normally end
 * (per the listing duration). For competitive-bidding listings that have bids on them, the
 * listing ends as a successful auction with winning bidder(s) unless the seller first cancels
 * the bids. Only the item's seller can use EndItem to end an item listing. Applicable to items
 * listed on eBay.com and Half.com. For eBay Live Auctions, you cannot delete items that have
 * been closed or that are part of a Live Auction event that has started.
 */
class EndItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var EndReasonCodeType | Indicates the seller's reason for ending the listing early. This field is required if the
	 * seller is ending the item early and the item did not successfully sell. Also applicable
	 * to Half.com.
	 */
	public $endingreason;
	/**
	 * @var string | An ID that the seller specified when they listed the Half.com item, if any. It can be used
	 * for the seller's SKU. Note that SellerInventoryID is not returned if no ID was specified.
	 * (Note: The SKU field used for eBay.com listings is not applicable to Half.com listings.)
	 */
	public $sellerinventoryid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param EndReasonCodeType $val
	 * @throws Exception
	 */
	public function setEndingReason($val)
	{
        $this->endingreason = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerInventoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerInventoryID');
        }
        $this->sellerinventoryid = (int)$val;
	}
}

/**
 * EndItemResponseType
 * Includes the acknowledgement of date and time the auction was ended due to the call to EndItem.
 */
class EndItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}
}

/**
 * FetchTokenRequestType
 * Retrieves an authentication token for the user. This can only be used to get the token only
 * after the user gives consent for the token to be generated via the eBay signin page. After
 * retrieval, the token can be used to authenticate other calls. This call must be authenticated
 * using the username you created for use by your applications (not an authentication token).
 */
class FetchTokenRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | A value that is associated with the token retrieval request. The secret ID is a value that
	 * is defined by the application, and is passed in redirect URL to the eBay signin page. eBay
	 * recommends using a UUID for the secret ID value. You must also set Username (part of the
	 * RequesterCredentials) for the particular user of interest.
	 */
	public $secretid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSecretID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SecretID');
        }
        $this->secretid = (int)$val;
	}
}

/**
 * FetchTokenResponseType
 * Includes the authentication token for the user and the date it expires.
 */
class FetchTokenResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Authentication token representing the user who is making the request. The user's token
	 * must be retrieved from eBay. To determine a user's authentication token, see the Authentication
	 * and Authorization information in the eBay Web Services guide. For calls that list or retrieve
	 * item or transaction data, the user usually needs to be the seller of the item in question
	 * or, in some cases, the buyer. Similarly, calls that retrieve user or account data may be restricted
	 * to the user whose data is being requested. The documentation for each call includes information
	 * about such restrictions.
	 */
	public $ebayauthtoken;
	/**
	 * @var dateTime | Date and time at which the token returned in eBayAuthToken expires and can no longer be
	 * used to authenticate the user for that application.
	 */
	public $hardexpirationtime;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEBayAuthToken($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for eBayAuthToken');
        }
        $this->ebayauthtoken = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setHardExpirationTime($val)
	{
        $this->hardexpirationtime = (int)$val;
	}
}

/**
 * GetAccountRequestType
 * Enables a seller to retreive his or her own account data. Returns account entries, including
 * credits and debits, in a report format the user selects. Also returns summary data for the
 * account.
 */
class GetAccountRequestType extends
 AbstractRequestType
{
	/**
	 * @var AccountHistorySelectionCodeType | Specifies the report format in which to return account entries.
	 */
	public $accounthistoryselection;
	/**
	 * @var dateTime | Date of last invoice sent by eBay to the user, in GMT. (Also see the Data Types appendix
	 * for more information on how GMT dates are handled in SOAP.) Empty string if this account
	 * has not been invoiced yet.
	 */
	public $invoicedate;
	/**
	 * @var dateTime | Specifies the beginning of a date range during which a credit or debit occurred. Used when
	 * AccountHistorySelection is BetweenSpecifiedDates. Value must be less than or equal to the
	 * value specified in EndDate. The allowed date formats are YYYY-MM-DD and YYYY-MM-DD HH:mm:ss.
	 */
	public $begindate;
	/**
	 * @var dateTime | Specifies the end of a date range during which a credit or debit occurred. Used when AccountHistorySelection
	 * is BetweenSpecifiedDates. Value must be greater than or equal to the value specified in
	 * BeginDate. The allowed date formats are YYYY-MM-DD and YYYY-MM-DD HH:mm:ss.
	 */
	public $enddate;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var boolean | Specifies whether to calculate balances. Default is  false, which calculates balances.
	 * The value true means  do not calculate balances. If true, AccountEntry.Balance and  AccountSummary.CurrentBalance
	 * are never returned in the response.
	 */
	public $excludebalance;
	/**
	 * @var boolean | Specifies whether to return account summary information in an AccountSummary node. Default
	 * is true, to return AccountSummary.
	 */
	public $excludesummary;
	/**
	 * @var AccountEntrySortTypeCodeType | Specifies how account entries should be sorted in the response, by an element and then
	 * in ascending or descending order.
	 */
	public $accountentrysorttype;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @param AccountHistorySelectionCodeType $val
	 * @throws Exception
	 */
	public function setAccountHistorySelection($val)
	{
        $this->accounthistoryselection = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setInvoiceDate($val)
	{
        $this->invoicedate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setBeginDate($val)
	{
        $this->begindate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndDate($val)
	{
        $this->enddate = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExcludeBalance($val)
	{
        $this->excludebalance = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExcludeSummary($val)
	{
        $this->excludesummary = (int)$val;
	}

	/**
	 * @param AccountEntrySortTypeCodeType $val
	 * @throws Exception
	 */
	public function setAccountEntrySortType($val)
	{
        $this->accountentrysorttype = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}
}

/**
 * GetAccountResponseType
 * Returns information about an eBay seller's own account.
 */
class GetAccountResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Specifies the seller's unique account number.
	 */
	public $accountid;
	/**
	 * @var AccountSummaryType | Contains summary data for the seller's account, such as the overall balance, bank account
	 * and credit card information, and amount and date of any past due balances. Can also contain
	 * data for one or more additional accounts, if the user has changed country of residence.
	 */
	public $accountsummary;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var AccountEntriesType | Contains individual account entries, according to the report's scope and date range. Each
	 * account entry represents one credit, debit, or administrative account action.
	 */
	public $accountentries;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | If true, there are additional item and/or product results (on higher- numbered pages) that
	 * match the query. To retrieve them, call GetSearchResultsExpress again and increment the
	 * page number or specify a higher value for EntriesPerPage in the request.
	 */
	public $hasmoreentries;
	/**
	 * @var int | Specifies the maximum number of entries to return in a single call. If the number of entries
	 * that can be returned is less than the value in EntriesPerPage, then the lower number is
	 * returned. For most calls, the max is 200 and the default is 25. For GetUserDisputes, the
	 * value is hard-coded at 200, and any input is ignored. See the documentation for other individual
	 * calls to determine the correct max and default values. For GetOrders, not applicable to
	 * eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $entriesperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAccountID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AccountID');
        }
        $this->accountid = (int)$val;
	}

	/**
	 * @param AccountSummaryType $val
	 * @throws Exception
	 */
	public function setAccountSummary($val)
	{
        $this->accountsummary = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param AccountEntriesType $val
	 * @throws Exception
	 */
	public function setAccountEntries($val)
	{
        $this->accountentries = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreEntries($val)
	{
        $this->hasmoreentries = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setEntriesPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->entriesperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}
}

/**
 * GetAdFormatLeadsRequestType
 * Retrieve sales lead information for a real estate advertisement listing. GetAdFormatLeadsRequest
 * returns the number of leads for an ad and any contact information that the prospective buyer
 * submitted.
 */
class GetAdFormatLeadsRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}
}

/**
 * GetAdFormatLeadsResponseType
 * Returns number of leads and contact and other information for each lead. One AdFormatLead
 * node is returned for each lead.
 */
class GetAdFormatLeadsResponseType extends
 AbstractResponseType
{
	/**
	 * @var AdFormatLeadType | Contains contact and other information for one lead. One node is returned for each lead.
	 * Only returned at a detail level of ReturnAll. At least one lead must be available for the
	 * specified item to return AdFormatLead.
	 */
	public $adformatlead;
	/**
	 * @var int | The total number of leads returned. Only returned if you do not specify a detail level.
	 */
	public $adformatleadcount;
	/**
	 * @param AdFormatLeadType $val
	 * @throws Exception
	 */
	public function setAdFormatLead($val)
	{
        $this->adformatlead = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAdFormatLeadCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->adformatleadcount = (int)$val;
	}
}

/**
 * GetAllBiddersRequestType
 * Provides three modes for retrieving a list of the users that bid on a listing. One of the
 * modes is of particular value in support of the Second Chance Offer feature. Includes the
 * list of bidders for the requested item as part of the general item listing data.
 */
class GetAllBiddersRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var GetAllBiddersModeCodeType | Specifies which bidder information to return.
	 */
	public $callmode;
	/**
	 * @var boolean | Specifies whether return BiddingSummary container for each offer.
	 */
	public $includebiddingsummary;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param GetAllBiddersModeCodeType $val
	 * @throws Exception
	 */
	public function setCallMode($val)
	{
        $this->callmode = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeBiddingSummary($val)
	{
        $this->includebiddingsummary = (int)$val;
	}
}

/**
 * GetAllBiddersResponseType
 * Includes the list of bidders for the requested item as part of the general item listing
 * data.
 */
class GetAllBiddersResponseType extends
 AbstractResponseType
{
	/**
	 * @var OfferArrayType | Contains a list of zero, one, or multiple OfferType objects. Each OfferType object represents
	 * the data for one high bidder. See the schema documentation for OfferType for details on
	 * its properties and their meanings.
	 */
	public $bidarray;
	/**
	 * @var UserIDType | For single-item (Quantity = 1) auction listings that have ended and have a winning bidder,
	 * indicates the user who is the current high bidder. For single-item basic fixed price (FixedPriceItem)
	 * or Store Inventory (StoresFixedPrice) listings that have ended, indicates the user who purchased
	 * the item. Not returned for auctions that have received no bids, fixed price and Store Inventory
	 * listings that are still active, or any multi-item (Quantity > 1) listings.
	 */
	public $highbidder;
	/**
	 * @var AmountType | Amount the highest bidder had bid on the item. Applicable only to competitive-bidding listings
	 * (Chinese and Dutch auctions) where there is progressive bidding and winning bidders are
	 * determined based on the highest bid.
	 */
	public $highestbid;
	/**
	 * @var ListingStatusCodeType | Specifies an active or ended listing's status in eBay's processing workflow. If a listing
	 * ends with a sale (or sales), eBay needs to update the sale details (e.g., total price and
	 * buyer/high bidder) and the final value fee. This processing can take several minutes. If
	 * you retrieve a sold item and no details about the buyer/high bidder are returned or no
	 * final value fee is available, use this listing status information to determine whether
	 * eBay has finished processing the listing.
	 */
	public $listingstatus;
	/**
	 * @param OfferArrayType $val
	 * @throws Exception
	 */
	public function setBidArray($val)
	{
        $this->bidarray = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setHighBidder($val)
	{
        $this->highbidder = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setHighestBid($val)
	{
        $this->highestbid = (int)$val;
	}

	/**
	 * @param ListingStatusCodeType $val
	 * @throws Exception
	 */
	public function setListingStatus($val)
	{
        $this->listingstatus = (int)$val;
	}
}

/**
 * GetApiAccessRulesRequestType
 *
 */
class GetApiAccessRulesRequestType extends
 AbstractRequestType
{}

/**
 * GetApiAccessRulesResponseType
 * Responds to a call to GetApiAccessRules.
 */
class GetApiAccessRulesResponseType extends
 AbstractResponseType
{
	/**
	 * @var ApiAccessRuleType | Contains the description of an API access rule, including the call name, the application's
	 * current daily and hourly usage, and other values.
	 */
	public $apiaccessrule;
	/**
	 * @param ApiAccessRuleType $val
	 * @throws Exception
	 */
	public function setApiAccessRule($val)
	{
        $this->apiaccessrule = (int)$val;
	}
}

/**
 * GetAttributesCSRequestType
 * Retrieves an XML string that describes how to present Item Specifics to a seller who is
 * creating a new listing. Use this information to present users with the equivalent of the
 * Item Specifics portion of the eBay Title and Description pages and to validate selected
 * eBay attributes on the client before including them in an AddItem call or related calls.
 * The XML string contains a list of all the attributes that are applicable for one or more
 * requested categories, along with related meta-data. The meta-data specifies all the possible values
 * of each attribute, the logic for presenting the attributes to a user, and rules for validating
 * the user's selections. <br> <br> See the eBay Web Services Guide for an overview of Item
 * Specifics and details about the eBay attribute model.<br> <br> Item Specifics are optional
 * when listing in most categories; however, some categories (such as Real Estate, US Tickets,
 * and US eBay Motors) require Item Specifics.
 */
class GetAttributesCsRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @var boolean | If true, includes a list of CategoryMapping nodes in the response. Each CategoryMapping
	 * node specifies category information as well as attributes and values that your application
	 * can auto-fill for items listed in that category. See the eBay Web Services Guide for more information
	 * about options for maintaining category data and auto-filling Item Specifics.
	 */
	public $includecategorymappingdetails;
	/**
	 * @var boolean | Indicates whether the order contains at least one transaction for a digital listing. Not
	 * applicable to Half.com.
	 */
	public $digitaldelivery;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeCategoryMappingDetails($val)
	{
        $this->includecategorymappingdetails = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDigitalDelivery($val)
	{
        $this->digitaldelivery = (int)$val;
	}
}

/**
 * GetAttributesCSResponseType
 * Returns XML that describes how to present Item Specifics to a seller and how to validate
 * selected eBay attributes on the client before including them in an AddItem call or related
 * calls. See the Developer's Guide for an overview of Item Specifics and details about the
 * eBay attribute model. Also returns the current version of the meta-data system.
 */
class GetAttributesCsResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var string | A string containing a list of all the attributes that are applicable to the site (or characteristic
	 * sets in the request), along with related meta-data. The meta-data specifies all the possible
	 * values of each attribute, the logic for presenting attributes to a user, and rules for validating
	 * the user's selections. Individual elements are not described in the eBay schema format. For
	 * information about each element in the AttributeData string, see the attribute model documentation
	 * in the eBay Web Services guide (see links below).<br> <br> Because this is returned as
	 * a string, the XML markup elements are escaped with character entity references (e.g., &amp;lt;eBay&amp;gt;&amp;lt;Attributes&amp;gt; ...). See
	 * the appendices in the eBay Web Services guide for general information about string data
	 * types.
	 */
	public $attributedata;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeData($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeData');
        }
        $this->attributedata = (int)$val;
	}
}

/**
 * GetAttributesXSLRequestType
 * Retrieves the Item Specifics SYI XSL stylesheet. Apply the stylesheet to the XML returned
 * from a call to GetAttributesCS or GetProductSellingPages to render a form like the Item
 * Specifics portion of eBay's Title and Description page. See the eBay Web Services Guide
 * for an overview of Item Specifics and information on working with the XSL.
 */
class GetAttributesXsLrequestType extends
 AbstractRequestType
{
	/**
	 * @var string | The name of the XSL file. Store this information to use it as input to the call in the
	 * future.
	 */
	public $filename;
	/**
	 * @var string | The version number of the XSL file. Store this information to use it            as input
	 * to the call in the future.
	 */
	public $fileversion;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileName');
        }
        $this->filename = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileVersion');
        }
        $this->fileversion = (int)$val;
	}
}

/**
 * GetAttributesXSLResponseType
 * Retrieves the Item Specifics SYI XSL stylesheet.Apply the stylesheet to the XML returned
 * from a call to GetAttributesCS or GetProductSellingPages to render a form like the Item
 * Specifics portion of eBay's Title and Description page. See the Developer's Guide for an
 * overview of Item Specifics and information on working with the XSL.
 */
class GetAttributesXsLresponseType extends
 AbstractResponseType
{
	/**
	 * @var XSLFileType | Child elements specify data related to one XSL file. See XSLFileType. Multiple XSLFile
	 * objects can be returned.
	 */
	public $xslfile;
	/**
	 * @param XSLFileType $val
	 * @throws Exception
	 */
	public function setXSLFile($val)
	{
        $this->xslfile = (int)$val;
	}
}

/**
 * GetBestOffersRequestType
 * Retrieves the best offers associated with an ItemID according to the BestOfferStatus filter,
 * where Active is the default value. Alternatively, specify a best offer ID to retrieve the
 * details for a specific best offer.
 */
class GetBestOffersRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var BestOfferIDType | An id to distinguish this best offer from other best offers made on the item.
	 */
	public $bestofferid;
	/**
	 * @var BestOfferStatusCodeType | (GetMyeBayBuying only) Indicates the status of the latest BestOffer the user has provided
	 * for the item .
	 */
	public $bestofferstatus;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param BestOfferIDType $val
	 * @throws Exception
	 */
	public function setBestOfferID($val)
	{
        $this->bestofferid = (int)$val;
	}

	/**
	 * @param BestOfferStatusCodeType $val
	 * @throws Exception
	 */
	public function setBestOfferStatus($val)
	{
        $this->bestofferstatus = (int)$val;
	}
}

/**
 * GetBestOffersResponseType
 * All best offers for the item according to the filter or best offer id (or both) used in
 * the input. For the notification client usage, this response includes a single Best Offer.
 */
class GetBestOffersResponseType extends
 AbstractResponseType
{
	/**
	 * @var BestOfferArrayType | All best offers for the item according to the filter or best offer id (or both) used in
	 * the input. The buyer and seller messages are returned only if the detail level is defined.
	 * Includes the buyer and seller message only if detail level ReturnAll is used. Only returned
	 * if best offers have been made.
	 */
	public $bestofferarray;
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @param BestOfferArrayType $val
	 * @throws Exception
	 */
	public function setBestOfferArray($val)
	{
        $this->bestofferarray = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}
}

/**
 * GetBidderListRequestType
 * Retrieves all items on which the user is currently bidding or which the buyer has won or
 * purchased. You can control the result set with elements such as ActiveItemsOnly, which limits the
 * result set to active items.
 */
class GetBidderListRequestType extends
 AbstractRequestType
{
	/**
	 * @var boolean | Indicates whether to limit the result set to active items. If true, only active items are
	 * returned and the EndTimeFrom and EndTimeTo filters are ignored. If false (or not sent), active
	 * and ended items are returned.
	 */
	public $activeitemsonly;
	/**
	 * @var dateTime | Specifies the earliest (oldest) date to use in a date range filter based on item end time. Specify
	 * either the end time range or start time range filter in every request.
	 */
	public $endtimefrom;
	/**
	 * @var dateTime | Specifies the latest (most recent) date to use in a date range filter based on item end
	 * time. Must be specified if EndTimeFrom is specified.
	 */
	public $endtimeto;
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var GranularityLevelCodeType | Specifies the subset of item and user fields to return. See GetSellerList in the eBay Web
	 * Services guide for a list of the fields that are returned for each granularity level. For
	 * GetSellerList, use DetailLevel or GranularityLevel in a request, but not both. For GetSellerList,
	 * if GranularityLevel is specified, DetailLevel is ignored.
	 */
	public $granularitylevel;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setActiveItemsOnly($val)
	{
        $this->activeitemsonly = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeFrom($val)
	{
        $this->endtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeTo($val)
	{
        $this->endtimeto = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param GranularityLevelCodeType $val
	 * @throws Exception
	 */
	public function setGranularityLevel($val)
	{
        $this->granularitylevel = (int)$val;
	}
}

/**
 * GetBidderListResponseType
 * Response to GetBidderListRequest.
 */
class GetBidderListResponseType extends
 AbstractResponseType
{
	/**
	 * @var UserType | Data for one eBay bidder.
	 */
	public $bidder;
	/**
	 * @var ItemArrayType | Array of items the bidder has bid on, has won or has lost.
	 */
	public $biditemarray;
	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setBidder($val)
	{
        $this->bidder = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setBidItemArray($val)
	{
        $this->biditemarray = (int)$val;
	}
}

/**
 * GetCategoriesRequestType
 * Retrieves the latest category hierarchy available on a given site. (By default, this is
 * the site to which you submit the request.) You can retrieve all categories on the site,
 * or you can use CategoryParent to retrieve one particular category and its subcategories.<br> <br> For
 * each category, the call returns the category name, its unique ID (within the site to which
 * you sent the request), and meta-data that helps you determine where the category fits in
 * the hierarchy. eBay requires sellers to specify a category ID for most new listings. You
 * can only list in leaf categories.<br> <br> The call also identifies a few eBay features
 * that are only supported in some categories. For example, some categories support immediate
 * payment (AutoPay), and some categories don't. For information about additional features
 * that vary by category, use GetCategoryFeatures, GetCategory2FinanceOffer, and/or GetCategory2CS.<br> <br> The
 * API provides other calls that supplement GetCategories. For example, consider using GetSuggestedCategories
 * to help the seller choose a category ID. In certain cases, it may be helpful to use GetCategoryMappings
 * to update locally stored item data (although most applications can use the simpler CategoryMappingAllowed
 * flag in AddItem for this purpose). <p>Applicable to the <a href="http://developer.ebay.com/developercenter/rest/"
 * target="_blank">REST API</a>.</p>
 */
class GetCategoriesRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Specifies the eBay site for which to retrieve the category hierarchy. Use the numeric site
	 * code (e.g., 77 for eBay Germany). Only necessary if you want to retrieve category data for
	 * a site other than the site to which you are submitting the request.
	 */
	public $categorysiteid;
	/**
	 * @var string | Specifies the ID of the highest-level category to return, along with its subcategories. If
	 * no parent category is specified, all categories are returned for the specified site. (Please
	 * do not pass a value of 0; zero (0) is an invalid value for CategoryParent.) To determine
	 * available category IDs, call GetCategories with no filters and use a DetailLevel value
	 * of ReturnAll. If you specify multiple parent categories, the hierarchy for each one is
	 * returned.
	 */
	public $categoryparent;
	/**
	 * @var int | Specifies the limit for the number of levels of the category hierarchy to return, where
	 * the given root category is level 1 and its children are level 2. Only categories at or
	 * above the level specified are returned. This tag is optional. If LevelLimit is not set,
	 * the complete category hierarchy is returned. Stores support category hierarchies up to
	 * 3 levels only.
	 */
	public $levellimit;
	/**
	 * @var boolean | Set this value to true to retrieve useful results. If true, retrieves all categories that
	 * override the site default settings. (If false or not specified, only retrieves data about leaf
	 * categories. If the details about overridden settings are only defined on a category's ancestor,
	 * the call does not return those settings if you only retrieve leaf categories.)
	 */
	public $viewallnodes;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategorySiteID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategorySiteID');
        }
        $this->categorysiteid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryParent($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryParent');
        }
        $this->categoryparent = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLevelLimit($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->levellimit = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setViewAllNodes($val)
	{
        $this->viewallnodes = (int)$val;
	}
}

/**
 * GetCategoriesResponseType
 * Contains the category data for the eBay site specified as input. The category data is contained
 * in a CategoryArrayType object, within which are zero, one, or multiple CategoryType objects.
 * Each CategoryType object contains the detail data for one category. Other fields tell how
 * many categories are returned in a call, when the category hierarchy was last updated, and
 * the version of the category hierarchy (all three of which can differ from one eBay site
 * to the next).
 */
class GetCategoriesResponseType extends
 AbstractResponseType
{
	/**
	 * @var CategoryArrayType | Statistical information about categories that contain items that match the query, if any.
	 * Returns empty if no matches are found or when the Categories filter was not passed in the
	 * request. (For categories associated with specific items, see items returned in each search result.)
	 * Shows the distribution of items across each category.
	 */
	public $categoryarray;
	/**
	 * @var int | Indicates the number of categories in the array.
	 */
	public $categorycount;
	/**
	 * @var dateTime | Gives the time in GMT that the feature flags for the category hierarchy were last updated.
	 */
	public $updatetime;
	/**
	 * @var string | Version value assigned to the current category mapping data for the site.
	 *     Compare this value to the version value the application stored with the mappings
	 *                the last time the application executed the call. If the versions are the
	 * same,                  the data has not changed since the last time the data was retrieved
	 * and stored.
	 */
	public $categoryversion;
	/**
	 * @var boolean | This field was marked as deprecated (no longer recommended) with release 435 (November
	 * 2005). With client request version 485 and higher (November 2006), this field is no longer
	 * returned. Please note that the names of ReservePriceInclusive and ReduceReserveInclusive
	 * are REVERSED relative to their logic.
	 */
	public $reservepriceinclusive;
	/**
	 * @var boolean | If true, ReservePriceAllowed indicates that all categories on the site allow the seller
	 * to specify a reserve price for an item. If false, all categories on the site do not normally
	 * allow sellers to specify reserve prices. The Category.ORPA (override reserve price allowed)
	 * field can override (or toggle) the reserve price allowed setting for a given category. For
	 * example, if ReservePriceAllowed is false and Category.ORPA is true, the category overrides
	 * the site setting and supports reserve prices. If ReservePriceAllowed is true and Category.ORPA
	 * is true, the category overrides the site setting and does does not support reserve prices.
	 */
	public $reservepriceallowed;
	/**
	 * @var double | Specifies the default site setting for whether the Minimum Reserve Price feature is supported
	 * for this category.
	 */
	public $minimumreserveprice;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var boolean | This field was marked as deprecated (no longer recommended) with release 435 (November
	 * 2005). With client request version 485 and higher (November 2006), this field is no longer
	 * returned. Please note that the names of ReservePriceInclusive and ReduceReserveInclusive
	 * are REVERSED relative to their logic.
	 */
	public $reducereserveinclusive;
	/**
	 * @var boolean | If true, ReduceReserveAllowed indicates that all categories on the site allow the seller
	 * to reduce an item's reserve price. If false, all categories on the site do not normally
	 * allow sellers to reduce an item's reserve price. The Category.ORRA (override reduce reserve
	 * price) field can override (or toggle) the reserve price reduction setting for a given category. For
	 * example, if ReduceReserveAllowed is false and Category.ORRA is true, the category overrides
	 * the site setting and supports reducing reserve prices. If ReduceReserveAllowed is true
	 * and Category.ORRA is true, the category overrides the site setting and does does not support
	 * reducing reserve prices.
	 */
	public $reducereserveallowed;
	/**
	 * @param CategoryArrayType $val
	 * @throws Exception
	 */
	public function setCategoryArray($val)
	{
        $this->categoryarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCategoryCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->categorycount = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setUpdateTime($val)
	{
        $this->updatetime = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryVersion');
        }
        $this->categoryversion = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReservePriceInclusive($val)
	{
        $this->reservepriceinclusive = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReservePriceAllowed($val)
	{
        $this->reservepriceallowed = (int)$val;
	}

	/**
	 * @param double $val
	 * @throws Exception
	 */
	public function setMinimumReservePrice($val)
	{
        $this->minimumreserveprice = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReduceReserveInclusive($val)
	{
        $this->reducereserveinclusive = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReduceReserveAllowed($val)
	{
        $this->reducereserveallowed = (int)$val;
	}
}

/**
 * GetCategory2CSRequestType
 * Retrieves mappings between categories and characteristics sets that are available for an
 * eBay site. Retrieves all mappings or just those that match category IDs passed in the call.
 */
class GetCategory2CsRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}
}

/**
 * GetCategory2CSResponseType
 * Returns data that indicates the categories that are mapped to characteristics sets, for
 * the eBay site to which the call was routed. Retrieves all mappings or just the one that
 * matches the category ID passed as input. The data is returned in a CategoryArrayType object,
 * which can contain multiple mappings. The response also contains information about categories
 * for which the mappings have changed.<br> <br> <span class="tablenote"><b>Note:</b> The Pre-filled
 * Item Information feature depends on the Item Specifics feature. This means the set of catalog-enabled
 * categories is a subset of the categories that are mapped to characteristic sets. That is,
 * there are no catalog-enabled categories that are not mapped to characteristic sets.</span>
 */
class GetCategory2CsResponseType extends
 AbstractResponseType
{
	/**
	 * @var CategoryArrayType | Contains data about categories that are mapped to characteristics sets. Use this data to
	 * determine:<br> - The names and IDs of the characteristics sets<br> - The availability of
	 * the Pre-filled Item Information feature for listings in that category (i.e., whether the
	 * category is catalog-enabled)<br> - For catalog-enabled categories, the available product
	 * search methods<br> - The current version information for the complete mapping<br> - The
	 * version information for each characteristics set
	 */
	public $mappedcategoryarray;
	/**
	 * @var CategoryArrayType | Contains data about categories (if any) whose characteristics set mappings have changed since
	 * the version specified in the request. When a characteristics set mapping changes, the data
	 * appears in both the UnmappedCategoryArray object (to indicate that the change occurred)
	 * and the MappedCategoryArray object.
	 */
	public $unmappedcategoryarray;
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var SiteWideCharacteristicsType | A list of one or more characteristics sets mapped to the category, if any. Use this information
	 * when working with Item Specifics (Attributes) and Pre-filled Item Information (Catalogs)
	 * functionality.
	 */
	public $sitewidecharacteristicsets;
	/**
	 * @param CategoryArrayType $val
	 * @throws Exception
	 */
	public function setMappedCategoryArray($val)
	{
        $this->mappedcategoryarray = (int)$val;
	}

	/**
	 * @param CategoryArrayType $val
	 * @throws Exception
	 */
	public function setUnmappedCategoryArray($val)
	{
        $this->unmappedcategoryarray = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param SiteWideCharacteristicsType $val
	 * @throws Exception
	 */
	public function setSiteWideCharacteristicSets($val)
	{
        $this->sitewidecharacteristicsets = (int)$val;
	}
}

/**
 * GetCategory2FinanceOfferRequestType
 * Retrieves the promotional financing offers available in a specified category. You can specify
 * the date from which to retrieve financing offers.
 */
class GetCategory2FinanceOfferRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var dateTime | Date the message was last modified. Returned if the parent container is returned.
	 */
	public $lastmodifieddate;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastModifiedDate($val)
	{
        $this->lastmodifieddate = (int)$val;
	}
}

class GetCategory2FinanceOfferResponseType extends
 AbstractResponseType
{
	/**
	 * @var int | Count of the feedbacks received by the user for the time period prior to the call indicated
	 * in PeriodInDays. Returned if no detail level is specified.
	 */
	public $count;
	/**
	 * @var CategoryFinanceOfferArrayType | Set of finance offers that apply to the specified category.
	 */
	public $categoryfinanceofferarray;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->count = (int)$val;
	}

	/**
	 * @param CategoryFinanceOfferArrayType $val
	 * @throws Exception
	 */
	public function setCategoryFinanceOfferArray($val)
	{
        $this->categoryfinanceofferarray = (int)$val;
	}
}

/**
 * GetCategoryFeaturesRequestType
 * Returns the categories on the site that have the features you requested in FeatureDefinitions.
 * The return set might have fewer categories than the site has defined, because only some categories
 * implement those features.
 */
class GetCategoryFeaturesRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var int | Specifies the limit for the number of levels of the category hierarchy to return, where
	 * the given root category is level 1 and its children are level 2. Only categories at or
	 * above the level specified are returned. This tag is optional. If LevelLimit is not set,
	 * the complete category hierarchy is returned. Stores support category hierarchies up to
	 * 3 levels only.
	 */
	public $levellimit;
	/**
	 * @var boolean | Set this value to true to retrieve useful results. If true, retrieves all categories that
	 * override the site default settings. (If false or not specified, only retrieves data about leaf
	 * categories. If the details about overridden settings are only defined on a category's ancestor,
	 * the call does not return those settings if you only retrieve leaf categories.)
	 */
	public $viewallnodes;
	/**
	 * @var FeatureIDCodeType | Retrieves the specified feature setting for the site and for the category you specified
	 * in CategoryID, if any. If no feature IDs are specified, the call retrieves all feature
	 * settings.
	 */
	public $featureid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLevelLimit($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->levellimit = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setViewAllNodes($val)
	{
        $this->viewallnodes = (int)$val;
	}

	/**
	 * @param FeatureIDCodeType $val
	 * @throws Exception
	 */
	public function setFeatureID($val)
	{
        $this->featureid = (int)$val;
	}
}

class GetCategoryFeaturesResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Version value assigned to the current category mapping data for the site.
	 *     Compare this value to the version value the application stored with the mappings
	 *                the last time the application executed the call. If the versions are the
	 * same,                  the data has not changed since the last time the data was retrieved
	 * and stored.
	 */
	public $categoryversion;
	/**
	 * @var dateTime | Gives the time in GMT that the feature flags for the category hierarchy were last updated.
	 */
	public $updatetime;
	/**
	 * @var CategoryFeatureType | Describes a category that contains items that match the query.
	 */
	public $category;
	/**
	 * @var SiteDefaultsType | Returns the feature settings defined for the entire site. All categories share these settings.
	 * However, some categories can override some settings, as indicated in the Category nodes (if
	 * any).
	 */
	public $sitedefaults;
	/**
	 * @var FeatureDefinitionsType | Returns definitions of the various features on the site, or the features you requested
	 * in FeatureID (if any). Each feature has a node within FeatureDefinitions.
	 */
	public $featuredefinitions;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryVersion');
        }
        $this->categoryversion = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setUpdateTime($val)
	{
        $this->updatetime = (int)$val;
	}

	/**
	 * @param CategoryFeatureType $val
	 * @throws Exception
	 */
	public function setCategory($val)
	{
        $this->category = (int)$val;
	}

	/**
	 * @param SiteDefaultsType $val
	 * @throws Exception
	 */
	public function setSiteDefaults($val)
	{
        $this->sitedefaults = (int)$val;
	}

	/**
	 * @param FeatureDefinitionsType $val
	 * @throws Exception
	 */
	public function setFeatureDefinitions($val)
	{
        $this->featuredefinitions = (int)$val;
	}
}

/**
 * GetCategoryListingsRequestType
 * Returns items in a specified category. A number of inputs are provided for filtering the
 * item listings returned using such criteria as location, whether the item is listed in an
 * ebay Store, the listing type, and including or excluding specified sellers. <p>Applicable
 * to the <a href="http://developer.ebay.com/developercenter/rest/" target="_blank">REST API</a>.</p>
 */
class GetCategoryListingsRequestType extends
 AbstractRequestType
{
	/**
	 * @var boolean | Listing upgrade that features the item in eBay search results on the mobile.de partner
	 * site. Applicable to eBay Germany. If true in listing requests and responses, the seller
	 * is purchasing or has purchased cross-promotional placement on the mobile.de site. See the
	 * eBay Web Services Guide for applicable categories, revise and relist rules, and additional
	 * information on featuring vehicles on the Mobile.de Site. Not applicable to Half.com.
	 */
	public $motorsgermanysearchable;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var boolean | Restricts listings to return only items that have the Ad Format feature. If true, the values
	 * of ItemTypeFilter, StoresFixedPrice, and StoreSearchFilter are ignored (if they are specified).
	 * That is, "AND" logic is not applied.
	 */
	public $adformat;
	/**
	 * @var boolean | If true, only items with free shipping for the user's location are returned. The user's
	 * location is determined from the site ID specified in the request. If false, no filtering
	 * is done via this attribute. A listing is not considered a free shipping listing if it requires insurance
	 * or requires pick up or requires a shipping surcharge.
	 */
	public $freeshipping;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var ItemTypeFilterCodeType | Filters items based on the ListingType set for the items. If you search for Store Inventory
	 * items, you must use values in ItemTypeFilter instead of StoresFixedPrice, which soon will
	 * be obsolete. If ItemTypeFilter is not specified (or if the AllItemTypes value of ItemTypeFilter
	 * is specified), all listing types can be returned unless another relevant filter is specified.
	 * You cannot use GetSearchResults to search eBay Express.
	 */
	public $itemtypefilter;
	/**
	 * @var boolean | Applications currently using StoresFixedPrice must begin using values in ItemTypeFilter
	 * instead of StoresFixedPrice. Otherwise, you may get unexpected results. This field is ignored
	 * if Store-related values in ItemTypeFilter are used as input filters.<br> <br> <b>Earlier
	 * behavior:</b> StoresFixedPrice controls whether or not to use the Store Inventory format
	 * as a filtering criterion.<br> <br> For US, Canada, and Motors:<br> The StoresFixedPrice
	 * input field does not currently work for these sites.<br> For all other sites:<br> If true,
	 * the results only include Store Inventory listings (with no listings in other formats).<br> If
	 * false, the results only include listings in other formats (with no Store Inventory listings).<br> If
	 * omitted (the default), this filter is not applied at all, so all formats can be returned
	 * (depending on other criteria you pass in the request). In this case, Store Inventory listings appear
	 * after all other matching auction and basic fixed price listings. <br> <br> You can use
	 * this filter regardless of whether you are searching in eBay Stores. If you pass StoresFixedPrice
	 * in the same request with StoreSearchFilter or certain values in ItemTypeFilter, "AND" logic
	 * may be applied, and you might not get the desired results. For example, if you specify StoresFixedPrice=true
	 * and ItemTypeFilter=AuctionItemsOnly, the call may succeed but no listings will be returned (because
	 * no listings can use both auction and Store Inventory formats).
	 */
	public $storesfixedprice;
	/**
	 * @var CategoryListingsSearchCodeType | Indicates whether one attribute or multiple attributes can be used as the search keyword
	 *          when calling GetProductSearchResults. Applications can ignore this data because
	 *          GetProductSearchPage only supports single-attribute searches.          Use GetProductFinder
	 * to determine valid multi-attribute searches.
	 */
	public $searchtype;
	/**
	 * @var CategoryListingsOrderCodeType | Specifies the order in which the item listings returned will be sorted. Store Inventory
	 * listings are usually returned after other listing types, regardless of the sort order.
	 */
	public $orderby;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var SearchLocationType | Specifies filtering based on site ID.
	 */
	public $searchlocation;
	/**
	 * @var ProximitySearchType | Limits the result set to just those items whose location is within a specified distance
	 * of a postal code. The ProximitySearchType includes a maximum distance and a postal code.
	 */
	public $proximitysearch;
	/**
	 * @var boolean | When passed with a value of true, limits the results to Get It Fast listings.
	 */
	public $includegetitfastitems;
	/**
	 * @var PaymentMethodSearchCodeType | 	 */
	public $paymentmethod;
	/**
	 * @var boolean | If true, each item in the result set can also include the item condition attribute (e.g.,
	 * New or Used) in the ItemSpecific property of the response. An item only includes a condition attribute
	 * in the response if the seller filled in the Item Condition in the Item Specifics section
	 * of the listing. (That is, the condition attribute is not returned if the seller only put
	 * the word "New" in the listing's title but did not specify the condition in the listing's
	 * Item Specifics.) Controls the details to return for each listing (not the set of listings
	 * that match the query). Note: This field does not control whether to retrieve only new or
	 * used items. In some categories, you can use a product finder search (SearchRequest) to
	 * only retrieve new or used items.
	 */
	public $includecondition;
	/**
	 * @var boolean | If true, each item in the result set also includes information about the seller's feedback.
	 * Controls the details to return for each listing (not the set of listings that match the
	 * query).
	 */
	public $includefeedback;
	/**
	 * @var string | Include local items in returning results near this postal code. This postal code is the
	 * basis for local search.
	 */
	public $localsearchpostalcode;
	/**
	 * @var int | The maximum number of related keywords to be retrieved. Use this field if you want the
	 * search results to include recommended keywords (that is, keywords matching one or more
	 * of the original keywords) in a RelatedSearchKeywordArray container. A value of 0 (the default)
	 * means no related search information is processed.
	 */
	public $maxrelatedsearchkeywords;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMotorsGermanySearchable($val)
	{
        $this->motorsgermanysearchable = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAdFormat($val)
	{
        $this->adformat = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFreeShipping($val)
	{
        $this->freeshipping = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param ItemTypeFilterCodeType $val
	 * @throws Exception
	 */
	public function setItemTypeFilter($val)
	{
        $this->itemtypefilter = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setStoresFixedPrice($val)
	{
        $this->storesfixedprice = (int)$val;
	}

	/**
	 * @param CategoryListingsSearchCodeType $val
	 * @throws Exception
	 */
	public function setSearchType($val)
	{
        $this->searchtype = (int)$val;
	}

	/**
	 * @param CategoryListingsOrderCodeType $val
	 * @throws Exception
	 */
	public function setOrderBy($val)
	{
        $this->orderby = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param SearchLocationType $val
	 * @throws Exception
	 */
	public function setSearchLocation($val)
	{
        $this->searchlocation = (int)$val;
	}

	/**
	 * @param ProximitySearchType $val
	 * @throws Exception
	 */
	public function setProximitySearch($val)
	{
        $this->proximitysearch = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeGetItFastItems($val)
	{
        $this->includegetitfastitems = (int)$val;
	}

	/**
	 * @param PaymentMethodSearchCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethod($val)
	{
        $this->paymentmethod = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeCondition($val)
	{
        $this->includecondition = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeFeedback($val)
	{
        $this->includefeedback = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocalSearchPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LocalSearchPostalCode');
        }
        $this->localsearchpostalcode = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxRelatedSearchKeywords($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxrelatedsearchkeywords = (int)$val;
	}
}

class GetCategoryListingsResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemArrayType | Contains a list of Item types.
	 */
	public $itemarray;
	/**
	 * @var CategoryType | Describes a category that contains items that match the query.
	 */
	public $category;
	/**
	 * @var CategoryArrayType | Collection of the sub-categories that are child to the category indicated in Category.
	 * Data for each sub-category is conveyed in a CategoryType object.
	 */
	public $subcategories;
	/**
	 * @var int | Indicates the maximum number of Want It Now posts that can be returned in a WantItNowPostArray
	 * for a request. This value can be specified in the request by  EntriesPerPage in Pagination
	 * in the request.
	 */
	public $itemsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var boolean | Indicates whether there are additional Want It Now posts that meet the search criteria.
	 */
	public $hasmoreitems;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var BuyingGuideDetailsType | Contains URLs and other information about relevant buying guides (if any), as well as the
	 * site's buying guide hub. Unavailable in the Sandbox environment. Buying guides are useful
	 * to buyers who do not have a specific product in mind. For example, a digital camera buying
	 * guide could help a buyer determine what kind of digital camera is right for them. Only
	 * returned for product finder searches (using SearchRequest.SearchAttributes) and for searches
	 * that retrieve matching categories along with item data (using Categories.CategoriesOnly=false).
	 */
	public $buyingguidedetails;
	/**
	 * @var RelatedSearchKeywordArrayType | Container for keywords related to the original keywords in the request. Can be returned
	 * if the request specified more than zero in the MaxRelatedSearchKeywords field.
	 */
	public $relatedsearchkeywordarray;
	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setItemArray($val)
	{
        $this->itemarray = (int)$val;
	}

	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setCategory($val)
	{
        $this->category = (int)$val;
	}

	/**
	 * @param CategoryArrayType $val
	 * @throws Exception
	 */
	public function setSubCategories($val)
	{
        $this->subcategories = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreItems($val)
	{
        $this->hasmoreitems = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param BuyingGuideDetailsType $val
	 * @throws Exception
	 */
	public function setBuyingGuideDetails($val)
	{
        $this->buyingguidedetails = (int)$val;
	}

	/**
	 * @param RelatedSearchKeywordArrayType $val
	 * @throws Exception
	 */
	public function setRelatedSearchKeywordArray($val)
	{
        $this->relatedsearchkeywordarray = (int)$val;
	}
}

/**
 * GetCategoryMappingsRequestType
 * Retrieves a map of old category IDs and corresponding active category IDs defined for the
 * site to which the request is sent. Typically used to update an older item definition with
 * a new category ID prior to listing the item.
 */
class GetCategoryMappingsRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Version value assigned to the current category mapping data for the site.
	 *     Compare this value to the version value the application stored with the mappings
	 *                the last time the application executed the call. If the versions are the
	 * same,                  the data has not changed since the last time the data was retrieved
	 * and stored.
	 */
	public $categoryversion;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryVersion');
        }
        $this->categoryversion = (int)$val;
	}
}

/**
 * GetCategoryMappingsResponseType
 * Returns a map of old category IDs and corresponding active category IDs defined for the
 * site to which the request was sent. Typically used to update an older item definition with
 * a new category ID prior to listing the item.
 */
class GetCategoryMappingsResponseType extends
 AbstractResponseType
{
	/**
	 * @var CategoryMappingType | Mapping between an old category ID and an active category ID.               Returned when
	 * category mappings exist and the value of CategoryVersion is               different from
	 * the current version on the site.
	 */
	public $categorymapping;
	/**
	 * @var string | Version value assigned to the current category mapping data for the site.
	 *     Compare this value to the version value the application stored with the mappings
	 *                the last time the application executed the call. If the versions are the
	 * same,                  the data has not changed since the last time the data was retrieved
	 * and stored.
	 */
	public $categoryversion;
	/**
	 * @param CategoryMappingType $val
	 * @throws Exception
	 */
	public function setCategoryMapping($val)
	{
        $this->categorymapping = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryVersion');
        }
        $this->categoryversion = (int)$val;
	}
}

/**
 * GetChallengeTokenRequestType
 * Retrieves a botblock token and URLs for an image or audio clip that the user is to match.
 * Use this in any process of yours for which you would find a botblock challenge to be of
 * value. Process: (1) Call GetChallengeToken to get a token, an image URL and an audio clip
 * URL. (2) Call ValidateChallengeInput with the token, the user's response, and whether the
 * retrieved token should remain valid for a short period of time. The response from ValidateChallengeInput
 * indicates whether the token is valid. <br><br> This is available for use by authorized third
 * parties who are authorized to use <a href="io_PlaceOffer.html">PlaceOffer</a>.
 */
class GetChallengeTokenRequestType extends
 AbstractRequestType
{}

/**
 * GetChallengeTokenResponseType
 * Response to GetChallengeToken request.
 */
class GetChallengeTokenResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Botblock token that was returned by GetChallengeToken.
	 */
	public $challengetoken;
	/**
	 * @var string | The URL of the image your application should display to the user for a botblock challenge.
	 */
	public $imagechallengeurl;
	/**
	 * @var string | The URL of the audio clip your application should provide for sight-impaired users. The
	 * audio clip corresponds to the image.
	 */
	public $audiochallengeurl;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setChallengeToken($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ChallengeToken');
        }
        $this->challengetoken = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setImageChallengeURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ImageChallengeURL');
        }
        $this->imagechallengeurl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAudioChallengeURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AudioChallengeURL');
        }
        $this->audiochallengeurl = (int)$val;
	}
}

/**
 * GetCharitiesRequestType
 * Searches for nonprofit charity organizations that meet the criteria specified in the request.
 */
class GetCharitiesRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | A unique identification number assigned by eBay to registered nonprofit charity organizations.
	 * Required input when listing Giving Works items.
	 */
	public $charityid;
	/**
	 * @var string | The name of the benefiting nonprofit charity organization selected by the charity seller.
	 */
	public $charityname;
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @var int | Region that the nonprofit charity organization is associated with. A specific nonprofit
	 * charity organization may be associated with only one region. Meaning of input values differs
	 * depending on the site. See GetCharities in the API Developer's Guide for the meaning of
	 * each input/output value. CharityRegion input value must be valid for that SiteID.
	 */
	public $charityregion;
	/**
	 * @var int | Domain (mission area) that a nonprofit charity organization belongs to. Nonprofit charity
	 * organizations may belong to multiple mission areas. Meaning of input values differs depending
	 * on the site. See GetCharities in the API Developer's Guide for the meaning of each input/output
	 * value. CharityDomain input value must be valid for that SiteID.
	 */
	public $charitydomain;
	/**
	 * @var boolean | Used with Query to search for charity nonprofit organizations. A value of true will search
	 * the Mission field as well as the CharityName field for a string specified in Query.
	 */
	public $includedescription;
	/**
	 * @var StringMatchCodeType | Indicates the type of string matching to use when a value is submitted in CharityName.
	 * If no value is specified, default behavior is "StartsWith." Does not apply to Query.
	 */
	public $matchtype;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCharityID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CharityID');
        }
        $this->charityid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCharityName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CharityName');
        }
        $this->charityname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCharityRegion($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->charityregion = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCharityDomain($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->charitydomain = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeDescription($val)
	{
        $this->includedescription = (int)$val;
	}

	/**
	 * @param StringMatchCodeType $val
	 * @throws Exception
	 */
	public function setMatchType($val)
	{
        $this->matchtype = (int)$val;
	}
}

/**
 * GetCharitiesResponseType
 * Contains information about charity nonprofit organizations that meet the criteria specified
 * in the request.
 */
class GetCharitiesResponseType extends
 AbstractResponseType
{
	/**
	 * @var CharityInfoType | Identifies a Giving Works listing and the benefiting nonprofit charity organization selected
	 * by the charity seller, if any. If specified, the seller must also accept PayPal as a payment
	 * method for the item (see Item.PaymentMethods). <br> <br>Giving Works listings are not eligible
	 * for some eBay Express sites. (If ExpressListing is false in GetItem or VerifyAddItem and
	 * you specified Charity, check whether ExpressItemRequirements returns NoCharity as a cause.) <br><br> When
	 * you revise a item, you can add or change the charity information, but you cannot remove
	 * it. When you relist an item, use DeletedField to remove a charity information. <br><br> Not
	 * applicable to Half.com.
	 */
	public $charity;
	/**
	 * @param CharityInfoType $val
	 * @throws Exception
	 */
	public function setCharity($val)
	{
        $this->charity = (int)$val;
	}
}

/**
 * GetContextualKeywordsRequestType
 * Retrieves top-ranked contextual eBay keywords and categories for a specified web page. Results
 * are ranked according to score. This enables developers to create applications that are different
 * from traditional contextual ad serving. For instance, instead of building a standard ad
 * banner or skyscraper ad like those from eBay AdContext, a developer could create an application
 * that does inline hyperlinking of keywords on any page or create widgets for blog platforms. Not
 * available for CN, TW, SG and HK sites.
 */
class GetContextualKeywordsRequestType extends
 AbstractRequestType
{
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var string | Web page encoding by which the URL is to be handled, such as ISO-8859-1.
	 */
	public $encoding;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEncoding($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Encoding');
        }
        $this->encoding = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}
}

/**
 * GetContextualKeywordsResponseType
 * Response to a GetContextualKeywords request.
 */
class GetContextualKeywordsResponseType extends
 AbstractResponseType
{
	/**
	 * @var ContextSearchAssetType | An array of either keyword/category pairs or categories, with ranking and score.
	 */
	public $contextsearchasset;
	/**
	 * @param ContextSearchAssetType $val
	 * @throws Exception
	 */
	public function setContextSearchAsset($val)
	{
        $this->contextsearchasset = (int)$val;
	}
}

/**
 * GetCrossPromotionsRequestType
 * Retrieves a list of upsell or cross-sell items associated with the specifeid item ID. The
 * seller must be the owner of an eBay Stores storefront to cross-promote items.
 */
class GetCrossPromotionsRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var PromotionMethodCodeType | The type of cross promotion, CrossSell or UpSell.
	 */
	public $promotionmethod;
	/**
	 * @var TradingRoleCodeType | The role of the person requesting to view the cross-promoted items, either seller or buyer.
	 * Default is buyer.
	 */
	public $promotionviewmode;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param PromotionMethodCodeType $val
	 * @throws Exception
	 */
	public function setPromotionMethod($val)
	{
        $this->promotionmethod = (int)$val;
	}

	/**
	 * @param TradingRoleCodeType $val
	 * @throws Exception
	 */
	public function setPromotionViewMode($val)
	{
        $this->promotionviewmode = (int)$val;
	}
}

/**
 * GetCrossPromotionsResponseType
 * Returns a list of either upsell or cross-sell items for a given item ID. The list can be
 * filtered by the viewer's role, either buyer or seller.
 */
class GetCrossPromotionsResponseType extends
 AbstractResponseType
{
	/**
	 * @var CrossPromotionsType | Container for cross-promoted items related to a specific item ID. The items are either
	 * upsell or cross-sell, according to the promotion method passed in the request. Not applicable
	 * to Half.com.
	 */
	public $crosspromotion;
	/**
	 * @param CrossPromotionsType $val
	 * @throws Exception
	 */
	public function setCrossPromotion($val)
	{
        $this->crosspromotion = (int)$val;
	}
}

/**
 * GetDescriptionTemplatesRequestType
 * Request for DescriptionTemplates.
 */
class GetDescriptionTemplatesRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var dateTime | The time the status was last modified. Also applicable to Half.com (for GetOrders).
	 */
	public $lastmodifiedtime;
	/**
	 * @var boolean | Indicates whether to retrieve templates for motor vehicle categories for eBay Motors (site
	 * 100). If true, templates are returned for motor vehicle categories. If false, templates
	 * are returned for non-motor vehicle categories such as Parts and Accessories. If included
	 * as an input field (whether true or false), this overrides any value provided for CategoryID.
	 */
	public $motorvehicles;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastModifiedTime($val)
	{
        $this->lastmodifiedtime = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMotorVehicles($val)
	{
        $this->motorvehicles = (int)$val;
	}
}

/**
 * GetDescriptionTemplatesResponseType
 * Returned after calling GetDescriptionTemplatesRequest.
 */
class GetDescriptionTemplatesResponseType extends
 AbstractResponseType
{
	/**
	 * @var DescriptionTemplateType | The information for one Theme or one Layout. There can be multiple DescriptionTemplates.
	 */
	public $descriptiontemplate;
	/**
	 * @var int | The number of Layout templates returned (that is, the number of DescriptionTemplates for
	 * which Type is "Layout").
	 */
	public $layouttotal;
	/**
	 * @var int | The ID of a returned layout that is obsolete. There can be zero or more IDs.
	 */
	public $obsoletelayoutid;
	/**
	 * @var int | The ID of a returned theme that is obsolete. There can be zero or more IDs.
	 */
	public $obsoletethemeid;
	/**
	 * @var ThemeGroupType | Data for one theme group. There can be multiple ThemeGroups in the response.
	 */
	public $themegroup;
	/**
	 * @var int | The number of ThemeID elements in this group.
	 */
	public $themetotal;
	/**
	 * @param DescriptionTemplateType $val
	 * @throws Exception
	 */
	public function setDescriptionTemplate($val)
	{
        $this->descriptiontemplate = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLayoutTotal($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->layouttotal = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setObsoleteLayoutID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->obsoletelayoutid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setObsoleteThemeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->obsoletethemeid = (int)$val;
	}

	/**
	 * @param ThemeGroupType $val
	 * @throws Exception
	 */
	public function setThemeGroup($val)
	{
        $this->themegroup = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setThemeTotal($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->themetotal = (int)$val;
	}
}

/**
 * GetDisputeRequestType
 * Requests the details of a dispute corresponding to the given dispute ID, any time after
 * the dispute was opened and up to five years after it was closed. Can be used with Unpaid
 * Item or Item Not Received disputes.
 */
class GetDisputeRequestType extends
 AbstractRequestType
{
	/**
	 * @var DisputeIDType | The unique identifier of a dispute, returned by the eBay site when the dispute is created.
	 */
	public $disputeid;
	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setDisputeID($val)
	{
        $this->disputeid = (int)$val;
	}
}

/**
 * GetDisputeResponseType
 * Returned after calling GetDisputeRequest. Returns the record of      a dispute, including
 * the dispute state and other information.
 */
class GetDisputeResponseType extends
 AbstractResponseType
{
	/**
	 * @var DisputeType | The information that describes a dispute, including the buyer's name, the transaction ID,
	 * the dispute state and status, whether the dispute is resolved, and any messages posted
	 * to the dispute.
	 */
	public $dispute;
	/**
	 * @param DisputeType $val
	 * @throws Exception
	 */
	public function setDispute($val)
	{
        $this->dispute = (int)$val;
	}
}

/**
 * GetFeedbackRequestType
 * Retrieves the accumulation of feedback left for the specified user by other users. Returns
 * summary feedback data and (in a detail level value of ReturnAll is specified) individual
 * feedbacks.
 */
class GetFeedbackRequestType extends
 AbstractRequestType
{
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var string | Unique identifier for the feedback entry. Returned for a detail level of ReturnAll (if
	 * the parent is returned).
	 */
	public $feedbackid;
	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFeedbackID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FeedbackID');
        }
        $this->feedbackid = (int)$val;
	}
}

/**
 * GetFeedbackResponseType
 * The GetFeedback response contains the specified user's total feedback score, feedback summary
 * data, and (if the applicable detail level is specified) an array of individual feedbacks.
 */
class GetFeedbackResponseType extends
 AbstractResponseType
{
	/**
	 * @var FeedbackDetailArrayType | Contains the individual feedbacks for the user, one FeedbackDetailType object for each
	 * feedback. Only populated with data when a detail level of ReturnAll is specified in the
	 * request. Not returned if you specify FeedbackID in the request.
	 */
	public $feedbackdetailarray;
	/**
	 * @var int | Indicates the number of FeedbackDetailType objects returned in the FeedbackDetailArray
	 * property. Only applicable if feedback details are returned.
	 */
	public $feedbackdetailitemtotal;
	/**
	 * @var FeedbackSummaryType | Summary feedback data for the user. Contains counts of positive, neutral, and negative
	 * feedback for predefined time periods. Only applicable if feedback details are returned.
	 */
	public $feedbacksummary;
	/**
	 * @var int | The aggregate feedback score for a user. A user's feedback score is the net positive feedback
	 * minus the net negative feedback left for the user. Feedback scores are a quantitative expression
	 * of the desirability of dealing with a user as a buyer or a seller in transactions. Each
	 * transaction can result in one feedback entry for a given user (the buyer can leave feedback
	 * for the seller, and the seller can leave feedback for the buyer.). That one feedback can
	 * be positive, negative, or neutral. The aggregated feedback counts for a particular user
	 * represent that user's overall feedback score (referred to as a "feedback rating" on the
	 * eBay site). If the user has chosen to make their feedback private and that user is not
	 * the user identified in the request's authentication token, FeedbackScore is not returned
	 * and FeedbackPrivate is returned with a value of true.<br> <br> To be eligible to list on
	 * Express, a seller's feedback score needs to be 100 or higher. See "eBay Express" in the
	 * eBay Web Services guide. In GetSearchResultsExpress, only returned when ItemDetails is
	 * set to Fine.<br> <br> In GetSearchResults and GetCategoryListings, feedback information
	 * is only returned if IncludeFeedback = true in the request. <br><br> Starting Jan 2007,
	 * when a bidder's user info is made anonymous, the real feedback score will be returned only
	 * for that bidder, and the seller of an item that the user is bidding on. For all other users,
	 * the value -99 is returned.
	 */
	public $feedbackscore;
	/**
	 * @param FeedbackDetailArrayType $val
	 * @throws Exception
	 */
	public function setFeedbackDetailArray($val)
	{
        $this->feedbackdetailarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackDetailItemTotal($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbackdetailitemtotal = (int)$val;
	}

	/**
	 * @param FeedbackSummaryType $val
	 * @throws Exception
	 */
	public function setFeedbackSummary($val)
	{
        $this->feedbacksummary = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbackscore = (int)$val;
	}
}

/**
 * GetFinanceOffersRequestType
 * Retrieves either the current set of finance offers or a specific finance offer. Only supported
 * on US and Canada sites. Payment method must be PayPal.
 */
class GetFinanceOffersRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Specifies a promotional offer that allow the buyer to purchase items on credit.
	 */
	public $financeofferid;
	/**
	 * @var dateTime | Date the message was last modified. Returned if the parent container is returned.
	 */
	public $lastmodifieddate;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFinanceOfferID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FinanceOfferID');
        }
        $this->financeofferid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastModifiedDate($val)
	{
        $this->lastmodifieddate = (int)$val;
	}
}

/**
 * GetFinanceOffersResponseType
 * Contains the number of finance offers and the current set of finance offers.
 */
class GetFinanceOffersResponseType extends
 AbstractResponseType
{
	/**
	 * @var int | Count of the feedbacks received by the user for the time period prior to the call indicated
	 * in PeriodInDays. Returned if no detail level is specified.
	 */
	public $count;
	/**
	 * @var FinanceOfferArrayType | Set of currently available finance offers or a set that contains a specific finance offer
	 * (if a particular finance offer ID was specified in the call input). Only returned if finance
	 * offers meeting the request criteria exist.
	 */
	public $financeofferarray;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->count = (int)$val;
	}

	/**
	 * @param FinanceOfferArrayType $val
	 * @throws Exception
	 */
	public function setFinanceOfferArray($val)
	{
        $this->financeofferarray = (int)$val;
	}
}

/**
 * GetHighBiddersRequestType
 * Retrieves a list of high bidders for the Dutch auction specified in the ItemId property
 * of the request. A seller specifies a unique item ID in this call to determine which buyers are
 * winning bidders and how many items each buyer can purchase.
 */
class GetHighBiddersRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}
}

/**
 * GetHighBiddersResponseType
 * Returns a list of high bidders for the Dutch auction specified in the ItemId property of
 * the request.
 */
class GetHighBiddersResponseType extends
 AbstractResponseType
{
	/**
	 * @var OfferArrayType | Contains a list of zero, one, or multiple OfferType objects. Each OfferType object represents
	 * the data for one high bidder. See the schema documentation for OfferType for details on
	 * its properties and their meanings.
	 */
	public $bidarray;
	/**
	 * @var ListingStatusCodeType | Specifies an active or ended listing's status in eBay's processing workflow. If a listing
	 * ends with a sale (or sales), eBay needs to update the sale details (e.g., total price and
	 * buyer/high bidder) and the final value fee. This processing can take several minutes. If
	 * you retrieve a sold item and no details about the buyer/high bidder are returned or no
	 * final value fee is available, use this listing status information to determine whether
	 * eBay has finished processing the listing.
	 */
	public $listingstatus;
	/**
	 * @param OfferArrayType $val
	 * @throws Exception
	 */
	public function setBidArray($val)
	{
        $this->bidarray = (int)$val;
	}

	/**
	 * @param ListingStatusCodeType $val
	 * @throws Exception
	 */
	public function setListingStatus($val)
	{
        $this->listingstatus = (int)$val;
	}
}

/**
 * GetItemRequestType
 * Requests data for a specific item identified by item ID. Use no DetailLevel to return all
 * item fields without Item.Description. Use a DetailLevel of ReturnAll to return all item
 * fields. See GetItem in the eBay Web Services Guide for more information. <p>Applicable to
 * the <a href="http://developer.ebay.com/developercenter/rest/" target="_blank">REST API</a>.</p>
 */
class GetItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var boolean | Indicates if the response should include detailed data relating to whether an item would
	 * qualify as an Express listing. For information about the Express-related data that can
	 * be returned when IncludeExpressRequirements is set to true, see the annotations for the
	 * output of VerifyAddItem and see the eBay Web Services Guide.
	 */
	public $includeexpressrequirements;
	/**
	 * @var boolean | Specifies whether to include WatchCount in Item nodes returned. WatchCount is only returned
	 * with DetailLevel ReturnAll.
	 */
	public $includewatchcount;
	/**
	 * @var boolean | Specifies whether or not to to include cross-promotion information for the item in the
	 * call response. <br><br> With a request version of 485 or higher, the default is false (do
	 * not include cross-promotion details). Set to true to retrieve cross-promotion information
	 * for the item. Cross-promotion information is returned in Item.CrossPromotion.PromotedItem.PromotionDetails.
	 * A promoted item will now contain multiple PromotionDetails containers. <br><br> With a
	 * request version lower than 485, the default is true (include cross-promotions). Set the
	 * value to false if you do not want to retrieve cross-promotion information. Cross-promotion
	 * information, PromotedPrice and PromotedPriceType, are returned in Item.CrossPromotion.PromotedItem.
	 * If a promoted item has multiple PromotedPriceType and PromotedPrice value pairs, only the
	 * last pair is returned.
	 */
	public $includecrosspromotion;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeExpressRequirements($val)
	{
        $this->includeexpressrequirements = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeWatchCount($val)
	{
        $this->includewatchcount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeCrossPromotion($val)
	{
        $this->includecrosspromotion = (int)$val;
	}
}

/**
 * GetItemResponseType
 * Contains the item data returned by the call. The data for the specified item listing is
 * returned in an ItemType object.
 */
class GetItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}
}

/**
 * GetItemRecommendationsRequestType
 * Examines potential item data that a seller has specified and returns recommended changes
 * or opportunities for improvement. The types of recommendations returned for a given item
 * can be configured by choosing one or more recommendation engines in the request. This call
 * supports batch requests. That is, you can retrieve recommendations for multiple items at
 * once.
 */
class GetItemRecommendationsRequestType extends
 AbstractRequestType
{
	/**
	 * @var GetRecommendationsRequestContainerType | Specifies the data for a single item and configures the recommendation engines to use when
	 * processing the item. To retrieve recommendations for multiple items, pass a separate GetRecommendationsRequestContainer
	 * for each item. In this case, pass a user-defined correlation ID for each item to identify
	 * the matching response.
	 */
	public $getrecommendationsrequestcontainer;
	/**
	 * @param GetRecommendationsRequestContainerType $val
	 * @throws Exception
	 */
	public function setGetRecommendationsRequestContainer($val)
	{
        $this->getrecommendationsrequestcontainer = (int)$val;
	}
}

/**
 * GetItemRecommendationsResponseType
 * GetItemRecommendations returns recommended changes or opportunities for improvement related
 * to listing data that was passed in the request. This call supports batch requests. That
 * is, it can retrieve recommendations for multiple items at once.
 */
class GetItemRecommendationsResponseType extends
 AbstractResponseType
{
	/**
	 * @var GetRecommendationsResponseContainerType | Specifies recommended changes or opportunities for improving the data of a single item.
	 *                  If multiple items were processed, a separate GetRecommendationsResponseContainer
	 *                  is returned for each item. Each container includes a user-defined correlation
	 * ID                   to help you match items in the request to recommendations in the response.
	 */
	public $getrecommendationsresponsecontainer;
	/**
	 * @param GetRecommendationsResponseContainerType $val
	 * @throws Exception
	 */
	public function setGetRecommendationsResponseContainer($val)
	{
        $this->getrecommendationsresponsecontainer = (int)$val;
	}
}

/**
 * GetItemShippingRequestType
 * Returns shipping cost estimates for an item, for a particular shipping service shipping
 * to a specified postal code, for calculated shipping. This is analogous to the Shipping Calculator
 * seen in both the buyer and seller web pages. It is another way for a buyer or seller to
 * obtain shipping cost information for an existing item (for which the caller is either the
 * buyer or seller) at any point in the life of of the listing, before or after a buyer has
 * committed to purchasing the item(s). (Note that shipping insurance cost can only be determined
 * once the final item price is known.) <p>Applicable to the <a href="http://developer.ebay.com/developercenter/rest/"
 * target="_blank">REST API</a>.</p>
 */
class GetItemShippingRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var int | Number of items purchased so far. (Subtract from the value returned in the Item.Quantity
	 * field to calculate the number of items remaining.)
	 */
	public $quantitysold;
	/**
	 * @var string | Destination country postal code (or zipcode, for US). Ignored if no country code is provided.
	 * Optional tag for some countries. More likely to be required for large countries.
	 */
	public $destinationpostalcode;
	/**
	 * @var CountryCodeType | Destination country code. If DestinationCountryCode is US, postal code is required and
	 * represents US zip code.
	 */
	public $destinationcountrycode;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantitySold($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantitysold = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDestinationPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DestinationPostalCode');
        }
        $this->destinationpostalcode = (int)$val;
	}

	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setDestinationCountryCode($val)
	{
        $this->destinationcountrycode = (int)$val;
	}
}

/**
 * GetItemShippingResponseType
 * Contains the data returned by the call. The shipping details for the specified item are
 * returned in a ShippingDetails object.
 */
class GetItemShippingResponseType extends
 AbstractResponseType
{
	/**
	 * @var ShippingDetailsType | The shipping-related details for an item or transaction, including flat and calculated
	 * shipping costs and shipping insurance costs. For GetOrders, also applicable to Half.com.
	 * For GetOrders, minimal ShippingDetails information is returned under the Transaction container.
	 */
	public $shippingdetails;
	/**
	 * @param ShippingDetailsType $val
	 * @throws Exception
	 */
	public function setShippingDetails($val)
	{
        $this->shippingdetails = (int)$val;
	}
}

/**
 * GetItemTransactionsRequestType
 *
 */
class GetItemTransactionsRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is later than or equal to this
	 * value. Specify the time value in GMT. See the eBay Web Services documentation for information
	 * about specifying time values. For more precise control of the date range filter, it is
	 * a good practice to also specify ModTimeTo. Otherwise, the end of the date range is the
	 * present time. Filtering by date range is optional. You can use date range filters in combination with
	 * other filters like DisputeFilterType to control the amount of data returned.
	 */
	public $modtimefrom;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is earlier than or equal to
	 * this value. Specify the time value in GMT. See the eBay Web Services documentation for
	 * information about specifying time values. For more precise control of the date range filter,
	 * it is a good practice to also specify ModTimeFrom. Otherwise, all available disputes modified
	 * prior to the ModTimeTo value are returned. Filtering by date range is optional. You can
	 * use date range filters in combination with other filters like DisputeFilterType to control
	 * the amount of data returned.
	 */
	public $modtimeto;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var boolean | Indicates whether to include final value fees in the response. For most listing types,
	 * the fee is returned in Transaction.FinalValueFee. For Dutch auctions that end with bids
	 * (not Buy It Now purchases), the fee is returned in Item.SellingStatus.FinalValueFee. The
	 * Final Value Fee for FixedPriceItem, StoresFixedPrice, and Buy It Now Dutch listing types
	 * is returned on a transaction by transaction basis. For all other listing types, including
	 * Chinese and Dutch (no Buy It Now purchases), the Final Value Fee is returned when the listing
	 * status is Completed.
	 */
	public $includefinalvaluefee;
	/**
	 * @var boolean | Whether to retrieve the order information. Default is false.
	 */
	public $includecontainingorder;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeFrom($val)
	{
        $this->modtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeTo($val)
	{
        $this->modtimeto = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeFinalValueFee($val)
	{
        $this->includefinalvaluefee = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeContainingOrder($val)
	{
        $this->includecontainingorder = (int)$val;
	}
}

/**
 * GetItemTransactionsResponseType
 * Returns an array of transaction data for the item specified in the request. The results
 * can be used to create a report of data that is commonly necessary for end-of-auction processing. Zero,
 * one, or many Transaction objects can be returned in the array. The set of transactions returned
 * is limited to those that were modified between the times specified in the request's ModTimeFrom
 * and ModTime filters. Also returns the item object that spawned the transactions. If pagination
 * filters were specified in the request, returns meta-data describing the effects of those
 * filters on the current response and the estimated effects if the same filters are used in
 * subsequent calls.
 */
class GetItemTransactionsResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | Indicates whether there are additional transactions to retrieve. That is, indicates whether
	 * more pages of data are available to be returned, given the filters that were specified
	 * in the request. Returns false for the last page of data.
	 */
	public $hasmoretransactions;
	/**
	 * @var int | Number of transactions returned per page (per call). May be a higher value than ReturnedTransactionCountActual
	 * if the page returned is the last page and more than one page of data exists.
	 */
	public $transactionsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var int | Number of transactions retrieved in the current page of results just returned. May be a
	 * lower value than TransactionsPerPage if the page returned is the last page and more than
	 * one page of data exists.
	 */
	public $returnedtransactioncountactual;
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var TransactionArrayType | Contains a list of transactions. Returned as an empty tag if no applicable transactions
	 * exist.
	 */
	public $transactionarray;
	/**
	 * @var boolean | Specifies whether a seller wants to let buyers know that PayPal payments are preferred.
	 */
	public $paypalpreferred;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreTransactions($val)
	{
        $this->hasmoretransactions = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTransactionsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->transactionsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setReturnedTransactionCountActual($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->returnedtransactioncountactual = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param TransactionArrayType $val
	 * @throws Exception
	 */
	public function setTransactionArray($val)
	{
        $this->transactionarray = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPayPalPreferred($val)
	{
        $this->paypalpreferred = (int)$val;
	}
}

/**
 * GetItemsAwaitingFeedbackRequestType
 * Returns transactions in which the user was involved and for which feedback is still needed
 * from either the buyer or seller.
 */
class GetItemsAwaitingFeedbackRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemSortTypeCodeType | Specifies the result sort order. Default is Ascending.
	 */
	public $sort;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param ItemSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setSort($val)
	{
        $this->sort = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetItemsAwaitingFeedbackResponseType
 * Response to GetItemsAwaitingFeedback.
 */
class GetItemsAwaitingFeedbackResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginatedTransactionArrayType | Contains the items awaiting feedback. Returned only if there are items that do not yet have
	 * feedback.
	 */
	public $itemsawaitingfeedback;
	/**
	 * @param PaginatedTransactionArrayType $val
	 * @throws Exception
	 */
	public function setItemsAwaitingFeedback($val)
	{
        $this->itemsawaitingfeedback = (int)$val;
	}
}

/**
 * GetLiveAuctionBiddersRequestType
 * Includes the list of bidders for the requested catalog.
 */
class GetLiveAuctionBiddersRequestType extends
 AbstractRequestType
{
	/**
	 * @var int | Number that identifies the seller's eBay Live Auctions catalog within which the lot item
	 * will be listed. Use GetLiveAuctionCatalogDetails to determine the seller's available catalog
	 * IDs.
	 */
	public $usercatalogid;
	/**
	 * @var BidderStatusCodeType | Indicates whether the user is "approved","denied", or "pending" or a combination of these.
	 */
	public $bidderstatus;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUserCatalogID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->usercatalogid = (int)$val;
	}

	/**
	 * @param BidderStatusCodeType $val
	 * @throws Exception
	 */
	public function setBidderStatus($val)
	{
        $this->bidderstatus = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetLiveAuctionBiddersResponseType
 * Includes the list of bidders for the requested catalog.
 */
class GetLiveAuctionBiddersResponseType extends
 AbstractResponseType
{
	/**
	 * @var BidderDetailArrayType | Contains the bidder details that match the bidder query passed in the request. Returned
	 * when bidder search results are found.
	 */
	public $bidderdetails;
	/**
	 * @var int | Total number of bidders in Pending state.
	 */
	public $totalpending;
	/**
	 * @var int | Total number of bidders in Approved state.
	 */
	public $totalapproved;
	/**
	 * @var int | Total number of bidders in Denied state.
	 */
	public $totaldenied;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @param BidderDetailArrayType $val
	 * @throws Exception
	 */
	public function setBidderDetails($val)
	{
        $this->bidderdetails = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalPending($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalpending = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalApproved($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalapproved = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalDenied($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totaldenied = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}
}

/**
 * GetLiveAuctionCatalogDetailsRequestType
 * Retrieves all the eBay Live Auctions catalogs and upcoming sale schedules that the user
 * has created. Only returns data if the requestor is an authorized eBay Live Auctions seller
 * with at least one catalog. If the seller's auction house has no upcoming sales, no schedules
 * are returned.
 */
class GetLiveAuctionCatalogDetailsRequestType extends
 AbstractRequestType
{}

/**
 * GetLiveAuctionCatalogDetailsResponseType
 * Returns all the upcoming eBay Live Auctions catalogs and sale schedules that the user has
 * created.
 */
class GetLiveAuctionCatalogDetailsResponseType extends
 AbstractResponseType
{
	/**
	 * @var LiveAuctionCatalogType | Each eBay Live Auctions catalog describes one live auction catalog created by the user, along
	 * with one or more sale schedules. Use this information to determine an appropriate combination
	 * of catalog and schedule IDs in which to list lot items with AddLiveAuctionItem. Only returns
	 * details about catalogs that contain pending sales. That is, if a catalog has no sales or
	 * all its sales have ended, the catalog details are not returned.
	 */
	public $liveauctioncatalog;
	/**
	 * @param LiveAuctionCatalogType $val
	 * @throws Exception
	 */
	public function setLiveAuctionCatalog($val)
	{
        $this->liveauctioncatalog = (int)$val;
	}
}

/**
 * GetMemberMessagesRequestType
 * Retrieves a list of the messages buyers have posted about your active item listings.
 */
class GetMemberMessagesRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var MessageTypeCodeType | The type of message.
	 */
	public $mailmessagetype;
	/**
	 * @var MessageStatusTypeCodeType | The status of the message. Returned if the parent container is returned.
	 */
	public $messagestatus;
	/**
	 * @var boolean | Specifies if the body should be displayed to the public.
	 */
	public $displaytopublic;
	/**
	 * @var dateTime | Used as beginning of date range filter.
	 */
	public $startcreationtime;
	/**
	 * @var dateTime | Used as end of date range filter.
	 */
	public $endcreationtime;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var string | An ID that uniquely identifies the message for a given user to be retrieved. Used for the
	 * AskSellerQuestion notification only.
	 */
	public $membermessageid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param MessageTypeCodeType $val
	 * @throws Exception
	 */
	public function setMailMessageType($val)
	{
        $this->mailmessagetype = (int)$val;
	}

	/**
	 * @param MessageStatusTypeCodeType $val
	 * @throws Exception
	 */
	public function setMessageStatus($val)
	{
        $this->messagestatus = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDisplayToPublic($val)
	{
        $this->displaytopublic = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartCreationTime($val)
	{
        $this->startcreationtime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndCreationTime($val)
	{
        $this->endcreationtime = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMemberMessageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MemberMessageID');
        }
        $this->membermessageid = (int)$val;
	}
}

class GetMemberMessagesResponseType extends
 AbstractResponseType
{
	/**
	 * @var MemberMessageExchangeArrayType | Holds the content of the message.
	 */
	public $membermessage;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | Indicates whether there are additional Want It Now posts that meet the search criteria.
	 */
	public $hasmoreitems;
	/**
	 * @param MemberMessageExchangeArrayType $val
	 * @throws Exception
	 */
	public function setMemberMessage($val)
	{
        $this->membermessage = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreItems($val)
	{
        $this->hasmoreitems = (int)$val;
	}
}

/**
 * GetMyMessagesRequestType
 * Used to retrieve information about the messages and alerts sent to a given user. Depending
 * on the detail level, this information can include message and alert counts, resolution and
 * flagged status, message and/or alert headers, and message and/or alert body text. <br /><br
 * /> Note that this call requires a DetailLevel in the request. Omitting the Detail Level
 * returns an error. <br /><br /> ItemID is not returned with this call. Use GetMemberMessages
 * instead.
 */
class GetMyMessagesRequestType extends
 AbstractRequestType
{
	/**
	 * @var MyMessagesAlertIDArrayType | Contains a list of up to 10 AlertID values. <br /><br /> Either AlertIDs, MessageIDs, or
	 * both must be included in the request. Alerts cannot be flagged. Alerts cannot be moved
	 * into a new folder until they have been resolved. <br /><br /> Resolve alerts by marking
	 * Read (if no action is required), or by using ActionURL (if action is required).
	 */
	public $alertids;
	/**
	 * @var MyMessagesMessageIDArrayType | Contains a list of up to 10 MessageID values. <br /><br /> Either AlertIDs, MessageIDs,
	 * or both must be included in the request. Messages in the Sent box cannot be moved, marked
	 * as Read, or Flagged.
	 */
	public $messageids;
	/**
	 * @var long | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @param MyMessagesAlertIDArrayType $val
	 * @throws Exception
	 */
	public function setAlertIDs($val)
	{
        $this->alertids = (int)$val;
	}

	/**
	 * @param MyMessagesMessageIDArrayType $val
	 * @throws Exception
	 */
	public function setMessageIDs($val)
	{
        $this->messageids = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        $this->folderid = (int)$val;
	}
}

/**
 * GetMyMessagesResponseType
 * Conains information about the messages and alerts sent to a given user. Depending on the
 * detail level, this information can include message and alert counts, resolution and flagged
 * status, message and/or alert headers, and message and/or alert body text.
 */
class GetMyMessagesResponseType extends
 AbstractResponseType
{
	/**
	 * @var MyMessagesSummaryType | Summary data for a given user's alerts and messages. This includes the numbers of new alerts
	 * and messages, unresolved alerts, flagged messages, and total alerts and messages. The amount
	 * and type of data returned is the same whether or not the request included specific AlertID
	 * or MessageID values. Always/Conditionally returned logic assumes a detail level of ReturnMessages.
	 */
	public $summary;
	/**
	 * @var MyMessagesAlertArrayType | Contains the alert information for each alert specified in AlertIDs. The amount and type
	 * of information returned varies based on the requested detail level. Contains one MyMessagesAlertType
	 * object per alert. Returned as an empty node if user has no alerts.
	 */
	public $alerts;
	/**
	 * @var MyMessagesMessageArrayType | Contains the message information for each message specified in MessageIDs. The amount and type
	 * of information returned varies based on the requested detail level. Contains one MyMessagesMessageType
	 * object per message. Returned as an empty node if user has no messages.
	 */
	public $messages;
	/**
	 * @param MyMessagesSummaryType $val
	 * @throws Exception
	 */
	public function setSummary($val)
	{
        $this->summary = (int)$val;
	}

	/**
	 * @param MyMessagesAlertArrayType $val
	 * @throws Exception
	 */
	public function setAlerts($val)
	{
        $this->alerts = (int)$val;
	}

	/**
	 * @param MyMessagesMessageArrayType $val
	 * @throws Exception
	 */
	public function setMessages($val)
	{
        $this->messages = (int)$val;
	}
}

/**
 * GetMyeBayRequestType
 * Retrieves data for the requesting user's My eBay page. This data includes a list of items
 * the user is watching and a list of items the user has bid on. You must specify at least
 * one field in the request to receive data in the response. In addition, you must include
 * at least one sort field - BiddingSort, LostSort, WatchSort, or WonSort.
 */
class GetMyeBayRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemSortTypeCodeType | Specifies how the items in the active list (the items the user has bid on) are sorted in
	 * the result set. The items may be sorted by item ID, price, title, bid count, and listing
	 * end time. See the code list ItemSortTypeCodeType for valid input values.
	 */
	public $biddingsort;
	/**
	 * @var ItemSortTypeCodeType | Specifies how the items in the lost list (items the user has bid on but has not won) are
	 * sorted in the result set. The items may be sorted by item ID, price, title, bid count,
	 * and listing end time. See the code list ItemSortTypeCodeType for valid input values.
	 */
	public $lostsort;
	/**
	 * @var int | Specifies maximum number of items to display in each of the lists. Recommended value is
	 * 5. If not specified, all possible items for each list are returned. One maximum is specified
	 * and applies to all of the lists in the result set.
	 */
	public $maxitemsperlist;
	/**
	 * @var int | Specifies the number of days prior to the current time (based on item end time) to retrieve
	 * items. Applies only to the items won and items lost lists. Default value is 2. Maximum
	 * value is 30.
	 */
	public $maxitemageindays;
	/**
	 * @var ItemSortTypeCodeType | Specifies how the items in the watch list (the items the user is watching) are sorted in
	 * the result set. The valid values of ItemSortTypeCodeType are ItemID, ItemIDDescending,
	 * Price, PriceDescending, BidCount, BidCountDescending, SellerUserID, SellerUserIDDescending, TimeLeft,
	 * and TimeLeftDescending.
	 */
	public $watchsort;
	/**
	 * @var ItemSortTypeCodeType | Specifies how the items in the won list (the items the user has won) are sorted in the
	 * result set. The items may be sorted by item ID, price, title, bid count, and listing end
	 * time. See the code list ItemSortTypeCodeType for valid input values.
	 */
	public $wonsort;
	/**
	 * @var MyeBaySelectionType | Contains a list of the user's favorite searches. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesearches;
	/**
	 * @var MyeBaySelectionType | Contains a list of the user's favorite sellers. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesellers;
	/**
	 * @var MyeBaySelectionType | Contains a list of the user's My eBay Second Chance Offers.
	 */
	public $secondchanceoffers;
	/**
	 * @param ItemSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setBiddingSort($val)
	{
        $this->biddingsort = (int)$val;
	}

	/**
	 * @param ItemSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setLostSort($val)
	{
        $this->lostsort = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxItemsPerList($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxitemsperlist = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxItemAgeInDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxitemageindays = (int)$val;
	}

	/**
	 * @param ItemSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setWatchSort($val)
	{
        $this->watchsort = (int)$val;
	}

	/**
	 * @param ItemSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setWonSort($val)
	{
        $this->wonsort = (int)$val;
	}

	/**
	 * @param MyeBaySelectionType $val
	 * @throws Exception
	 */
	public function setFavoriteSearches($val)
	{
        $this->favoritesearches = (int)$val;
	}

	/**
	 * @param MyeBaySelectionType $val
	 * @throws Exception
	 */
	public function setFavoriteSellers($val)
	{
        $this->favoritesellers = (int)$val;
	}

	/**
	 * @param MyeBaySelectionType $val
	 * @throws Exception
	 */
	public function setSecondChanceOffers($val)
	{
        $this->secondchanceoffers = (int)$val;
	}
}

/**
 * GetMyeBayResponseType
 * Contains the lists of items from the requesting user's My eBay page. This includes a list
 * of the items the user has bid on and a list of the items the user is watching. The number
 * of items returned in any list can be controlled using the MaxItemsPerList property of the
 * request object.
 */
class GetMyeBayResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemArrayType | Contains the list of items the requesting user has bid on. BiddingItemArray is
	 *          an array of ItemType objects, each of which represents one item.
	 */
	public $biddingitemarray;
	/**
	 * @var ItemArrayType | Contains the list of items the requesting user has bid on but not has won. LostItemArray
	 * is an array of ItemType objects, each of which represents one item.
	 */
	public $lostitemarray;
	/**
	 * @var ItemArrayType | Contains the list of items the requesting user is watching. WatchItemArray is an array
	 * of ItemType objects, each of which represents one item.
	 */
	public $watchitemarray;
	/**
	 * @var ItemArrayType | Contains the list of items the requesting user has won. WonItemArray is an array of ItemType
	 * objects, each of which represents one item.
	 */
	public $wonitemarray;
	/**
	 * @var MyeBayFavoriteSearchListType | Contains a list of the user's favorite searches. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesearches;
	/**
	 * @var MyeBayFavoriteSellerListType | Contains a list of the user's favorite sellers. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesellers;
	/**
	 * @var MyeBaySecondChanceOfferListType | Contains a list of the user's My eBay Second Chance Offers.
	 */
	public $secondchanceoffers;
	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setBiddingItemArray($val)
	{
        $this->biddingitemarray = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setLostItemArray($val)
	{
        $this->lostitemarray = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setWatchItemArray($val)
	{
        $this->watchitemarray = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setWonItemArray($val)
	{
        $this->wonitemarray = (int)$val;
	}

	/**
	 * @param MyeBayFavoriteSearchListType $val
	 * @throws Exception
	 */
	public function setFavoriteSearches($val)
	{
        $this->favoritesearches = (int)$val;
	}

	/**
	 * @param MyeBayFavoriteSellerListType $val
	 * @throws Exception
	 */
	public function setFavoriteSellers($val)
	{
        $this->favoritesellers = (int)$val;
	}

	/**
	 * @param MyeBaySecondChanceOfferListType $val
	 * @throws Exception
	 */
	public function setSecondChanceOffers($val)
	{
        $this->secondchanceoffers = (int)$val;
	}
}

/**
 * GetMyeBayBuyingRequestType
 * Returns items from the All Buying section of the user's My eBay account, including items
 * the user is watching, bidding on, has won, has not won, or has made best offers on. <br
 * /> A DetailLevel of ReturnSummary returns only the BuyingSummary and the specific container
 * requested. <br /> A DetailLevel of ReturnAll returns the BuyingSummary and all other containers.
 * Any containers that were not specified in the request are returned with default settings.
 */
class GetMyeBayBuyingRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemListCustomizationType | Contains the items the user is watching. Only returned if items exist that meet the request
	 * criteria.
	 */
	public $watchlist;
	/**
	 * @var ItemListCustomizationType | Contains all the items the user has bid on. Only returned if items exist that meet the
	 * request criteria.
	 */
	public $bidlist;
	/**
	 * @var ItemListCustomizationType | Contains the items the user has placed best offers on. Only returned if items exist that
	 * meet the request criteria.
	 */
	public $bestofferlist;
	/**
	 * @var ItemListCustomizationType | Contains the items the user has bid on and won. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $wonlist;
	/**
	 * @var ItemListCustomizationType | Contains the items the user has bid on and lost. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $lostlist;
	/**
	 * @var MyeBaySelectionType | Contains a list of the user's favorite searches. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesearches;
	/**
	 * @var MyeBaySelectionType | Contains a list of the user's favorite sellers. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesellers;
	/**
	 * @var MyeBaySelectionType | A Second Chance Offer item.
	 */
	public $secondchanceoffer;
	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setWatchList($val)
	{
        $this->watchlist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setBidList($val)
	{
        $this->bidlist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setBestOfferList($val)
	{
        $this->bestofferlist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setWonList($val)
	{
        $this->wonlist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setLostList($val)
	{
        $this->lostlist = (int)$val;
	}

	/**
	 * @param MyeBaySelectionType $val
	 * @throws Exception
	 */
	public function setFavoriteSearches($val)
	{
        $this->favoritesearches = (int)$val;
	}

	/**
	 * @param MyeBaySelectionType $val
	 * @throws Exception
	 */
	public function setFavoriteSellers($val)
	{
        $this->favoritesellers = (int)$val;
	}

	/**
	 * @param MyeBaySelectionType $val
	 * @throws Exception
	 */
	public function setSecondChanceOffer($val)
	{
        $this->secondchanceoffer = (int)$val;
	}
}

/**
 * GetMyeBayBuyingResponseType
 * Returns items from All Buying or All Favorites in the user's My eBay account.
 */
class GetMyeBayBuyingResponseType extends
 AbstractResponseType
{
	/**
	 * @var BuyingSummaryType | Contains a summary of the items the user has bid on. Returned at all detail levels.
	 */
	public $buyingsummary;
	/**
	 * @var PaginatedItemArrayType | Contains the items the user is watching. Only returned if items exist that meet the request
	 * criteria.
	 */
	public $watchlist;
	/**
	 * @var PaginatedItemArrayType | Contains all the items the user has bid on. Only returned if items exist that meet the
	 * request criteria.
	 */
	public $bidlist;
	/**
	 * @var PaginatedItemArrayType | Contains the items the user has placed best offers on. Only returned if items exist that
	 * meet the request criteria.
	 */
	public $bestofferlist;
	/**
	 * @var PaginatedOrderTransactionArrayType | Contains the items the user has bid on and won. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $wonlist;
	/**
	 * @var PaginatedItemArrayType | Contains the items the user has bid on and lost. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $lostlist;
	/**
	 * @var MyeBayFavoriteSearchListType | Contains a list of the user's favorite searches. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesearches;
	/**
	 * @var MyeBayFavoriteSellerListType | Contains a list of the user's favorite sellers. Only returned if items exist that meet
	 * the request criteria.
	 */
	public $favoritesellers;
	/**
	 * @var ItemType | A Second Chance Offer item.
	 */
	public $secondchanceoffer;
	/**
	 * @param BuyingSummaryType $val
	 * @throws Exception
	 */
	public function setBuyingSummary($val)
	{
        $this->buyingsummary = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setWatchList($val)
	{
        $this->watchlist = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setBidList($val)
	{
        $this->bidlist = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setBestOfferList($val)
	{
        $this->bestofferlist = (int)$val;
	}

	/**
	 * @param PaginatedOrderTransactionArrayType $val
	 * @throws Exception
	 */
	public function setWonList($val)
	{
        $this->wonlist = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setLostList($val)
	{
        $this->lostlist = (int)$val;
	}

	/**
	 * @param MyeBayFavoriteSearchListType $val
	 * @throws Exception
	 */
	public function setFavoriteSearches($val)
	{
        $this->favoritesearches = (int)$val;
	}

	/**
	 * @param MyeBayFavoriteSellerListType $val
	 * @throws Exception
	 */
	public function setFavoriteSellers($val)
	{
        $this->favoritesellers = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setSecondChanceOffer($val)
	{
        $this->secondchanceoffer = (int)$val;
	}
}

/**
 * GetMyeBayRemindersRequestType
 * Requests reminder type totals from the user's MyeBay account.
 */
class GetMyeBayRemindersRequestType extends
 AbstractRequestType
{
	/**
	 * @var ReminderCustomizationType | Contains the buying reminders in the user's My eBay account that match the request criteria.
	 */
	public $buyingreminders;
	/**
	 * @var ReminderCustomizationType | Contains the selling reminders in the user's My eBay account that match the request criteria.
	 */
	public $sellingreminders;
	/**
	 * @param ReminderCustomizationType $val
	 * @throws Exception
	 */
	public function setBuyingReminders($val)
	{
        $this->buyingreminders = (int)$val;
	}

	/**
	 * @param ReminderCustomizationType $val
	 * @throws Exception
	 */
	public function setSellingReminders($val)
	{
        $this->sellingreminders = (int)$val;
	}
}

/**
 * GetMyeBayRemindersResponseType
 * Returns totals of various reminder types from the user's My eBay account.
 */
class GetMyeBayRemindersResponseType extends
 AbstractResponseType
{
	/**
	 * @var RemindersType | Contains the buying reminders in the user's My eBay account that match the request criteria.
	 */
	public $buyingreminders;
	/**
	 * @var RemindersType | Contains the selling reminders in the user's My eBay account that match the request criteria.
	 */
	public $sellingreminders;
	/**
	 * @param RemindersType $val
	 * @throws Exception
	 */
	public function setBuyingReminders($val)
	{
        $this->buyingreminders = (int)$val;
	}

	/**
	 * @param RemindersType $val
	 * @throws Exception
	 */
	public function setSellingReminders($val)
	{
        $this->sellingreminders = (int)$val;
	}
}

/**
 * GetMyeBaySellingRequestType
 * Returns a summary and details of items a user is selling from the user's My eBay account. <br
 * /> If you do not specify a detail level or a specific container, the response contains just
 * the SellingSummary container. <br /> If you specify a container but not a detail level,
 * the response contains SellingSummary and any container you specified in the request. <br
 * /> If you specify a DetailLevel of ReturnAll, the response contains the SellingSummary and
 * all other containers. Any containers that were not specified in the request are returned
 * with default settings. <br /> While specifying pagination can help manage the amount of
 * data that is returned (especially at ReturnAll), high-volume sellers may receive a warning
 * message that the amount of data returned is over the system limit and therefore truncated.
 */
class GetMyeBaySellingRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemListCustomizationType | Contains the items the user has scheduled for sale, but whose listings have not yet started.
	 */
	public $scheduledlist;
	/**
	 * @var ItemListCustomizationType | Contains the items the user is selling that have active listings.
	 */
	public $activelist;
	/**
	 * @var ItemListCustomizationType | Contains the items the user has sold.
	 */
	public $soldlist;
	/**
	 * @var ItemListCustomizationType | Contains the items whose listings have ended but that have not sold.
	 */
	public $unsoldlist;
	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setScheduledList($val)
	{
        $this->scheduledlist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setActiveList($val)
	{
        $this->activelist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setSoldList($val)
	{
        $this->soldlist = (int)$val;
	}

	/**
	 * @param ItemListCustomizationType $val
	 * @throws Exception
	 */
	public function setUnsoldList($val)
	{
        $this->unsoldlist = (int)$val;
	}
}

/**
 * GetMyeBaySellingResponseType
 * Returns summary and detail information about items the user is selling, items scheduled
 * to sell, currently listed, sold, and closed but not sold.
 */
class GetMyeBaySellingResponseType extends
 AbstractResponseType
{
	/**
	 * @var SellingSummaryType | Contains summary information about the items the user is selling.
	 */
	public $sellingsummary;
	/**
	 * @var PaginatedItemArrayType | Contains the items the user has scheduled for sale, but whose listings have not yet started.
	 */
	public $scheduledlist;
	/**
	 * @var PaginatedItemArrayType | Contains the items the user is selling that have active listings.
	 */
	public $activelist;
	/**
	 * @var PaginatedOrderTransactionArrayType | Contains the items the user has sold.
	 */
	public $soldlist;
	/**
	 * @var PaginatedItemArrayType | Contains the items whose listings have ended but that have not sold.
	 */
	public $unsoldlist;
	/**
	 * @param SellingSummaryType $val
	 * @throws Exception
	 */
	public function setSellingSummary($val)
	{
        $this->sellingsummary = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setScheduledList($val)
	{
        $this->scheduledlist = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setActiveList($val)
	{
        $this->activelist = (int)$val;
	}

	/**
	 * @param PaginatedOrderTransactionArrayType $val
	 * @throws Exception
	 */
	public function setSoldList($val)
	{
        $this->soldlist = (int)$val;
	}

	/**
	 * @param PaginatedItemArrayType $val
	 * @throws Exception
	 */
	public function setUnsoldList($val)
	{
        $this->unsoldlist = (int)$val;
	}
}

/**
 * GetNotificationPreferencesRequestType
 * Retrieves the requesting application's notification preferences. Details are only returned
 * for events for which a preference was set at one point. For example, if you enabled notification
 * for the EndOfAuction event and later disabled it, the GetNotificationPreferences response
 * would cite the EndOfAuction event preference as Disabled. Otherwise, no details would be
 * returned regarding EndOfAuction.
 */
class GetNotificationPreferencesRequestType extends
 AbstractRequestType
{
	/**
	 * @var NotificationRoleCodeType | Specifies what type of Preference to retrieve.
	 */
	public $preferencelevel;
	/**
	 * @param NotificationRoleCodeType $val
	 * @throws Exception
	 */
	public function setPreferenceLevel($val)
	{
        $this->preferencelevel = (int)$val;
	}
}

/**
 * GetNotificationPreferencesResponseType
 * Contains the requesting application's notification preferences. GetNotificationPreferences
 * retrieves preferences that you have deliberately set. For example, if you enable the EndOfAuction
 * event and then later disable it, the response shows the EndOfAuction event preference as
 * Disabled. But if you have never set a preference for the EndOfAuction event, no EndOfAuction
 * preference is returned at all.
 */
class GetNotificationPreferencesResponseType extends
 AbstractResponseType
{
	/**
	 * @var ApplicationDeliveryPreferencesType | Specifies application-based event preferences that have been enabled.
	 */
	public $applicationdeliverypreferences;
	/**
	 * @var NotificationEnableArrayType | Array of NotificationEventEnableTypes. Each NotificationEventEnableType contains an EventSetting
	 * and an EventType.
	 */
	public $userdeliverypreferencearray;
	/**
	 * @var NotificationUserDataType | Specifies user data for notification settings such as mobile phone number.
	 */
	public $userdata;
	/**
	 * @var NotificationEventPropertyType | Characteristics or details of an event such as type, name and value. Currently can only
	 * be set for wireless applications.
	 */
	public $eventproperty;
	/**
	 * @param ApplicationDeliveryPreferencesType $val
	 * @throws Exception
	 */
	public function setApplicationDeliveryPreferences($val)
	{
        $this->applicationdeliverypreferences = (int)$val;
	}

	/**
	 * @param NotificationEnableArrayType $val
	 * @throws Exception
	 */
	public function setUserDeliveryPreferenceArray($val)
	{
        $this->userdeliverypreferencearray = (int)$val;
	}

	/**
	 * @param NotificationUserDataType $val
	 * @throws Exception
	 */
	public function setUserData($val)
	{
        $this->userdata = (int)$val;
	}

	/**
	 * @param NotificationEventPropertyType $val
	 * @throws Exception
	 */
	public function setEventProperty($val)
	{
        $this->eventproperty = (int)$val;
	}
}

/**
 * GetNotificationsUsageRequestType
 * Retrieves usage information about platform notifications for a given application. You can
 * use this notification information to troubleshoot issues with platform notifications. You
 * can call this up to 50 times per hour for a given application.
 */
class GetNotificationsUsageRequestType extends
 AbstractRequestType
{
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}
}

/**
 * GetNotificationsUsageResponseType
 * Returns an array of notifications sent to a given application identified by the appID (comes
 * in the credentials). The result can be used by third-party developers troubleshoot issues
 * with notifications. Zero, one or many notifications can be returned in the array. The set
 * of notifications returned is limited to those that were sent between the StartTime and EndTime
 * specified in the request. If StartTime or EndTime filters were not found in the request,
 * then the response will contain the data for only one day (Now-1day). By default, maximum duration
 * is limited to 3 days (Now-3days). These min (1day) and max(3days) applies to Notifications,MarkDownMarkUpHistory
 * and NotificationStatistics.  Notifications are sent only if the ItemID is included in the
 * request. If there is no ItemID, then only Statistics and MarkDownMarkUpHistory information
 * is included.
 */
class GetNotificationsUsageResponseType extends
 AbstractResponseType
{
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @var NotificationDetailsArrayType | List of notification objects representing the notifications sent to an application for
	 * the given time period. It will only be returned if ItemID was specified in the input request.
	 */
	public $notificationdetailsarray;
	/**
	 * @var MarkUpMarkDownHistoryType | List of objects representing MarkUp or MarkDown history for a given appID and for given
	 * StartTime and EndTime. This node will always be returned.
	 */
	public $markupmarkdownhistory;
	/**
	 * @var NotificationStatisticsType | Summary information about number of notifications that were successfully delivered, queued,
	 * failed, connection attempts made, connection timeouts, http errors for the given appID
	 * and given time period. By default, statistics for only one day (Now-1day) is included.
	 * Maximum time duration allowed is 3 days (Now-3days).
	 */
	public $notificationstatistics;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}

	/**
	 * @param NotificationDetailsArrayType $val
	 * @throws Exception
	 */
	public function setNotificationDetailsArray($val)
	{
        $this->notificationdetailsarray = (int)$val;
	}

	/**
	 * @param MarkUpMarkDownHistoryType $val
	 * @throws Exception
	 */
	public function setMarkUpMarkDownHistory($val)
	{
        $this->markupmarkdownhistory = (int)$val;
	}

	/**
	 * @param NotificationStatisticsType $val
	 * @throws Exception
	 */
	public function setNotificationStatistics($val)
	{
        $this->notificationstatistics = (int)$val;
	}
}

/**
 * GetOrderTransactionsRequestType
 * Retrieves information about one or more orders or one or more transactions (or both). If
 * you have both orderIDs and itemIDs/transactionIDs, you may find this "combined call" more
 * convenient than calling GetOrders and GetItemTransactions separately. Note that every transaction
 * is nested within an Order node, even if the transaction does not belong to an order. <b>Please
 * note that documentation for this call is currently incomplete.</b>
 */
class GetOrderTransactionsRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemTransactionIDArrayType | An array of ItemTransactionIDs.
	 */
	public $itemtransactionidarray;
	/**
	 * @var OrderIDArrayType | A set of orders to retrieve. Not applicable to Half.com.
	 */
	public $orderidarray;
	/**
	 * @param ItemTransactionIDArrayType $val
	 * @throws Exception
	 */
	public function setItemTransactionIDArray($val)
	{
        $this->itemtransactionidarray = (int)$val;
	}

	/**
	 * @param OrderIDArrayType $val
	 * @throws Exception
	 */
	public function setOrderIDArray($val)
	{
        $this->orderidarray = (int)$val;
	}
}

/**
 * GetOrderTransactionsResponseType
 * Response to GetOrderTransactions request.
 */
class GetOrderTransactionsResponseType extends
 AbstractResponseType
{
	/**
	 * @var OrderArrayType | The set of orders that match the order IDs or filter criteria specified. Also applicable
	 * to Half.com (only returns orders that have not been marked as shipped).
	 */
	public $orderarray;
	/**
	 * @param OrderArrayType $val
	 * @throws Exception
	 */
	public function setOrderArray($val)
	{
        $this->orderarray = (int)$val;
	}
}

/**
 * GetOrdersRequestType
 * Retrieves all of the orders for which the user is a participant (as either buyer or seller)
 * that meet the criteria specified in the request. There are two mutually exclusive sets of
 * filtering input arguments that can be used to query for orders. The first set is based on
 * specific order IDs (one or more order IDs are passed in the call). The second set is a combination
 * of date range, order role, and order status. If one set of filtering arguments is used,
 * the arguments for the other set should not be specified in the same call. If a given call
 * to GetOrders includes both criteria sets, the query based on order IDs is used, and the
 * criteria for date range/order status/order role is ignored. This call can also be used to
 * retrieve unshipped Half.com orders (i.e., orders that the seller has received but has not
 * yet processed).
 */
class GetOrdersRequestType extends
 AbstractRequestType
{
	/**
	 * @var OrderIDArrayType | A set of orders to retrieve. Not applicable to Half.com.
	 */
	public $orderidarray;
	/**
	 * @var dateTime | The starting date of the date range for the orders to retrieve. Also applicable to Half.com.
	 */
	public $createtimefrom;
	/**
	 * @var dateTime | The ending date of the date range for the orders to retrieve. Also applicable to Half.com.
	 */
	public $createtimeto;
	/**
	 * @var TradingRoleCodeType | Filters the returned orders to only those where the user for whom the call is being made
	 * is a participant in the order in the specified role. Not applicable to Half.com.
	 */
	public $orderrole;
	/**
	 * @var OrderStatusCodeType | The current status of the order.<br> <br> For transaction calls (like GetItemTransactions),
	 * please use the TransactionPlatform element to determine whether an item was purchased on
	 * Express on eBay.<br> <br> Also applicable to Half.com (for GetOrders).
	 */
	public $orderstatus;
	/**
	 * @var ListingTypeCodeType | The listing format (fixed price, auction, etc) for the automatic item search criteria.
	 */
	public $listingtype;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param OrderIDArrayType $val
	 * @throws Exception
	 */
	public function setOrderIDArray($val)
	{
        $this->orderidarray = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreateTimeFrom($val)
	{
        $this->createtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreateTimeTo($val)
	{
        $this->createtimeto = (int)$val;
	}

	/**
	 * @param TradingRoleCodeType $val
	 * @throws Exception
	 */
	public function setOrderRole($val)
	{
        $this->orderrole = (int)$val;
	}

	/**
	 * @param OrderStatusCodeType $val
	 * @throws Exception
	 */
	public function setOrderStatus($val)
	{
        $this->orderstatus = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setListingType($val)
	{
        $this->listingtype = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetOrdersResponseType
 * Returns the set of orders that match the order IDs or filter criteria specified.
 */
class GetOrdersResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | Applies only to Half.com. If true, there are more orders yet to be retrieved. Additional
	 * GetOrders calls with higher page numbers or more entries per page must be made to retrieve
	 * these orders. If false, no more orders are available or no orders match the request (based
	 * on the input filters).
	 */
	public $hasmoreorders;
	/**
	 * @var OrderArrayType | The set of orders that match the order IDs or filter criteria specified. Also applicable
	 * to Half.com (only returns orders that have not been marked as shipped).
	 */
	public $orderarray;
	/**
	 * @var int | Applies only to Half.com. Indicates the number of orders that can be returned per page
	 * of data (i.e., per call). This is the same as the value specified in the Pagination.EntriesPerPage
	 * input (or the default value, if EntriesPerPage was not specified). This is not necessarily
	 * the actual number of orders returned per page (see ReturnedOrderCountActual).
	 */
	public $ordersperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var int | Applies only to Half.com. Indicates the total number of orders returned.
	 */
	public $returnedordercountactual;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreOrders($val)
	{
        $this->hasmoreorders = (int)$val;
	}

	/**
	 * @param OrderArrayType $val
	 * @throws Exception
	 */
	public function setOrderArray($val)
	{
        $this->orderarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setOrdersPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->ordersperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setReturnedOrderCountActual($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->returnedordercountactual = (int)$val;
	}
}

/**
 * GetPictureManagerDetailsRequestType
 * Requests information about folders or pictures in a Picture Manager account or the account
 * settings.
 */
class GetPictureManagerDetailsRequestType extends
 AbstractRequestType
{
	/**
	 * @var int | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @var string | Deprecated with compatibility level 383 and higher. Contains the URL for an image hosted
	 * on a location of the seller's choice (other than eBay) and associated with an item. If
	 * specified, this cannot have an empty/null value. You cannot specify multiple PictureURL
	 * fields. In most cases, the picture URL is also used for the picture at the top of the View
	 * Item page on the Web site.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL argument.<br> With compatibility 383 and higher,
	 * see SelfHostedURL instead.<br> With the future deprecation of VendorHostedPicture as input, applications
	 * should use Item.PictureDetails.PictureURL instead. See Item.PictureDetails.PictureURL for
	 * information about how to remove pictures from a listing.<br> For retrieval calls (e.g.,
	 * GetItem):<br> With compatibility levels lower than 383, PictureURL is returned.<br> With
	 * compatibility levels between 383 and 439, SelfHostedURL is returned instead.<br> With compatibility
	 * 439 and higher,  Item.PictureDetails.PictureURL is returned instead. <br><br> Note that
	 * the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
	 * with that feature.
	 */
	public $pictureurl;
	/**
	 * @var PictureManagerDetailLevelCodeType | The type of information you want returned, about pictures and folders, the account subscription,
	 * or both. Use this element rather than the generic DetailLevel element defined in AbstractRequestType.
	 * You can use the following values: ReturnAll, ReturnSubscription, or ReturnPicture.
	 */
	public $picturemanagerdetaillevel;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->folderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPictureURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PictureURL');
        }
        $this->pictureurl = (int)$val;
	}

	/**
	 * @param PictureManagerDetailLevelCodeType $val
	 * @throws Exception
	 */
	public function setPictureManagerDetailLevel($val)
	{
        $this->picturemanagerdetaillevel = (int)$val;
	}
}

/**
 * GetPictureManagerDetailsResponseType
 * Responds with information about content in a Picture Manager album or the account settings.
 */
class GetPictureManagerDetailsResponseType extends
 AbstractResponseType
{
	/**
	 * @var PictureManagerDetailsType | Specifies the setting or folder to create, update, or delete, or the picture to update.
	 * You cannot upload or delete pictures using SetPictureManagerDetails; you must use the eBay
	 * site.
	 */
	public $picturemanagerdetails;
	/**
	 * @param PictureManagerDetailsType $val
	 * @throws Exception
	 */
	public function setPictureManagerDetails($val)
	{
        $this->picturemanagerdetails = (int)$val;
	}
}

/**
 * GetPictureManagerOptionsRequestType
 * Requests a list of Picture Manager options and allowed values, such as subscription type
 * and picture display.
 */
class GetPictureManagerOptionsRequestType extends
 AbstractRequestType
{}

/**
 * GetPictureManagerOptionsResponseType
 * Returns a list of Picture Manager options and allowed values.
 */
class GetPictureManagerOptionsResponseType extends
 AbstractResponseType
{
	/**
	 * @var PictureManagerSubscriptionType | A Store subscription level.
	 */
	public $subscription;
	/**
	 * @var PictureManagerPictureDisplayType | A global definition for displaying pictures, with a maximum size.
	 */
	public $picturetype;
	/**
	 * @param PictureManagerSubscriptionType $val
	 * @throws Exception
	 */
	public function setSubscription($val)
	{
        $this->subscription = (int)$val;
	}

	/**
	 * @param PictureManagerPictureDisplayType $val
	 * @throws Exception
	 */
	public function setPictureType($val)
	{
        $this->picturetype = (int)$val;
	}
}

/**
 * GetPopularKeywordsRequestType
 * Retrieves the words more frequently used by eBay users when searching for listings. These
 * keywords are generated weekly by eBay. Thus, calls retrieve static data. GetPopularKeywords
 * is not available for the following sites:  FR, HK, MY, PH, PL, SG, SE. Applicable to the
 * <a href="http://developer.ebay.com/developercenter/rest/" target="_blank">REST API</a>.
 */
class GetPopularKeywordsRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var boolean | If true, only one CategoryID can be specified, and keywords are returned for that category
	 * and its subcategories. If false, keywords are returned only for the categories identified
	 * by CategoryID. Default is false.
	 */
	public $includechildcategories;
	/**
	 * @var int | The maximum number of keywords to be retrieved per category for this call.
	 */
	public $maxkeywordsretrieved;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeChildCategories($val)
	{
        $this->includechildcategories = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxKeywordsRetrieved($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxkeywordsretrieved = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetPopularKeywordsResponseType
 * Contains the keyword data for the requested categories. A category's data are contained
 * in a CategoryArrayType object if there is no error (one or more CategoryType objects). Each
 * CategoryType contains its ID, parent ID and keyword list.
 */
class GetPopularKeywordsResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var CategoryArrayType | Statistical information about categories that contain items that match the query, if any.
	 * Returns empty if no matches are found or when the Categories filter was not passed in the
	 * request. (For categories associated with specific items, see items returned in each search result.)
	 * Shows the distribution of items across each category.
	 */
	public $categoryarray;
	/**
	 * @var boolean | If true, the query results contain additional pages (higher than the current page number). You
	 * can retrieve more results by incrementing the PageNumber value that was passed in the request.
	 *               For GetProductSearchResults, only returned with compatibility level 387 and
	 * higher.               For GetProductFamilyMembers, only returned with compatibility level
	 * 415 and higher.               With lower compatibility levels, ProductSearchResult.HasMore
	 * is returned instead.
	 */
	public $hasmore;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param CategoryArrayType $val
	 * @throws Exception
	 */
	public function setCategoryArray($val)
	{
        $this->categoryarray = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMore($val)
	{
        $this->hasmore = (int)$val;
	}
}

/**
 * GetProductFamilyMembersRequestType
 * GetProductFamilyMembers is intended to be used combination with GetProductSearchResults. If
 * a search result returned from GetProductSearchResults does not return all product versions
 * in a family, and if the user wants to see more versions (editions) of the product, you can
 * use GetProductFamilyMembers to retrieve all versions of the product. That is, if GetProductSearchResultsonly
 * returns the product family header (ParentProduct), use this call to zoom in on a particular
 * family of product versions. (This situation usually occurs when you call GetProductSearchResults
 * and more more matches are found than the MaxChildrenPerFamily value you specified.)<br> <br> The
 * structure of tGetProductFamilyMembers is similar to that of GetProductSearchResults. Instead
 * of passing in a query, you pass in a product ID. This product ID is used to find all the
 * members of the product family that the specified product is a member of. The results are
 * compatible with the results from GetProductSearchResults, so similar application logic can
 * be used to handle both requests and responses. This call supports batch requests. This means
 * you can retrieve products in multiple families by using a single request. To perform a batch
 * request, pass an array of ProductSearch objects in the call.<br> <br> For each ProductSearch
 * object, GetProductFamilyMembers returns a list of all the products in the specified product
 * family. Each product is represented as a list of attributes (Item Specifics) plus other
 * identifying information, such as a product ID and a stock photo.<br> <br> Once the user
 * selects a product from the results, pass its ID in a GetProductSellingPages request to retrieve
 * more detailed information about the product, including a set of optional Item Specifics
 * that the seller can use in addition to the pre-filled Item Specifics (see GetProductSellingPages).
 * <br> <br> To use this data in a listing, pass the product ID and the optional Item Specifics in
 * the seller's listing request (AddItem).
 */
class GetProductFamilyMembersRequestType extends
 AbstractRequestType
{
	/**
	 * @var ProductSearchType | Specifies the keywords or attributes that make up the product query,                  with
	 * pagination instructions. ProductSearch is a required input. To search for multiple different
	 * products at the same time (i.e., to perform a batch search), pass in multiple ProductSearch
	 * properties.
	 */
	public $productsearch;
	/**
	 * @param ProductSearchType $val
	 * @throws Exception
	 */
	public function setProductSearch($val)
	{
        $this->productsearch = (int)$val;
	}
}

/**
 * GetProductFamilyMembersResponseType
 * GetProductFamilyMembers performs a product search and returns results comprising all the
 * children in the product family identified by a product ID that was specified in the request.
 * Use this call when more matches are found than the max amount specified per family in a
 * call to GetProductSearchResults. This call supports batch requests. This means you can retrieve
 * products in multiple families by using a single request. The results are compatible with
 * the results from GetProductSearchResults, so similar application logic can be used to handle
 * both requests and responses.
 */
class GetProductFamilyMembersResponseType extends
 AbstractResponseType
{
	/**
	 * @var DataElementSetType | Container for one or more DataElement fields containing supplemental helpful data.
	 *              A DataElement field is an HTML snippet that specifies hints for the user,
	 * help links, help graphics, and other supplemental information that varies per characteristic
	 * set. Usage of this information is optional and may require you to inspect the information
	 *                  to determine how it can be applied in an application.
	 *  Also returned with warnings when no matches are found.
	 */
	public $dataelementsets;
	/**
	 * @var ProductSearchResultType | Contains the attributes and product details that match the attributes or query keywords
	 *                  passed in the request. Always returned when product search results are
	 * found.
	 */
	public $productsearchresult;
	/**
	 * @param DataElementSetType $val
	 * @throws Exception
	 */
	public function setDataElementSets($val)
	{
        $this->dataelementsets = (int)$val;
	}

	/**
	 * @param ProductSearchResultType $val
	 * @throws Exception
	 */
	public function setProductSearchResult($val)
	{
        $this->productsearchresult = (int)$val;
	}
}

/**
 * GetProductFinderRequestType
 * Retrieves data that you use to construct valid "product finder" queries (queries against
 * multiple attributes) against catalog products or listed items. The attributes describe search
 * criteria (e.g., Manufacturer), as appropriate for the category. Use the results in combination
 * with GetProductFinderXSL to render the Product Finder in a graphical user interface. GetProductFinder
 * does not conduct the actual product or listing search. It only returns data about what you
 * can search on. Use the data as input to GetProductSearchResults to conduct the actual search
 * for product information or as input to GetSearchResults to conduct the search for listed
 * items. To retrieve single-attribute search criteria (querying against a single attribute,
 * like UPC), use GetProductSearchPage instead (only applicable for catalog searches). See
 * the eBay Web Services Guide for an overview of Pre-filled Item Information and details about searching
 * for catalog products and for information about searching for listed items.
 */
class GetProductFinderRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var int | Numeric identifier for a buy-side product finder. A product finder defines how to
	 *        search for Item Specifics in listings (e.g., how to search against a particular
	 * shoe size).            See the eBay Web Services guide for details about product finders.
	 *            You need to specify a product finder ID when you are searching against a listing's
	 *             Item Specifics (i.e., when you use SearchAttributes). A few categories, such
	 * as US Event Tickets and US eBay Motors, can also return a subset of Item Specifics (e.g.,
	 * the event venue, section, and row for a ticket listing) in the search results. To retrieve
	 * this data, you must specify the product finder ID, and also specify a detail level of ItemReturnAttributes
	 * or ReturnAll. Use GetProductFinder to determine valid product finder IDs.
	 */
	public $productfinderid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductFinderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productfinderid = (int)$val;
	}
}

/**
 * GetProductFinderResponseType
 * For a category that supports product finders, GetProductFinder returns an XML string
 *   that decribes the attributes a seller can use to form a query when searching for
 * Pre-filled Item Information, or attributes that can be used to search for listed items.
 *      Specifically, it retrieves data that you use to construct valid "product finder" queries
 *      (queries against multiple attributes).      Use the results in combination with GetProductFinderXSL
 * to render the Product Finder      in a graphical user interface.      See the Developer's
 * Guide for an overview of Pre-filled Item Information and details about      searching for
 * catalog products and for information about searching for listed items.
 */
class GetProductFinderResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var string | A string containing a list of search attributes that can be used in a "Product Finder"
	 * style query, along with related meta-data. The meta-data specifies possible values of each
	 * attribute, the logic for presenting attributes to a user, and rules for validating the user's
	 * selections. For backward compatibility, this data is in the same XML format that was used
	 * in the Legacy XML API so that you can apply the same Product Finder XSL stylesheet to it.
	 * That is, individual elements are not described using the new eBay XML schema format. For
	 * information about each element in the ProductFinderData string, see the product finder
	 * model documentation in the eBay Web Services guide (see links below).<br> <br> Because
	 * this is returned as a string, the XML markup is escaped with character entity references
	 * (e.g., &amp;lt;eBay&amp;gt;&amp;lt;ProductFinders&amp;gt;...). See the appendices in the
	 * eBay Web Services guide for general information about string data types.
	 */
	public $productfinderdata;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductFinderData($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductFinderData');
        }
        $this->productfinderdata = (int)$val;
	}
}

/**
 * GetProductFinderXSLRequestType
 * Retrieves the Product Finder XSL stylesheet. Apply the stylesheet to the XML returned from
 * a call to GetProductFinder to render a form that lets a user form a multi-attribute query
 * against eBay catalog data. See the Developer's Guide for an overview of Pre- filled Item
 * Information and information on searching for catalog products.
 */
class GetProductFinderXsLrequestType extends
 AbstractRequestType
{
	/**
	 * @var string | The name of the XSL file. Store this information to use it as input to the call in the
	 * future.
	 */
	public $filename;
	/**
	 * @var string | The version number of the XSL file. Store this information to use it            as input
	 * to the call in the future.
	 */
	public $fileversion;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileName');
        }
        $this->filename = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileVersion');
        }
        $this->fileversion = (int)$val;
	}
}

/**
 * GetProductFinderXSLResponseType
 * Retrieves the Product Finder XSL stylesheet. Apply the stylesheet to the XML returned from
 * a call to GetProductFinder to render a form that lets a user form a multi-attribute query
 * against eBay catalog data. See the Developer's Guide for an overview of Pre-filled Item
 * Information and information on searching for catalog products.
 */
class GetProductFinderXsLresponseType extends
 AbstractResponseType
{
	/**
	 * @var XSLFileType | Child elements specify data related to one XSL file. See XSLFileType. Multiple XSLFile
	 * objects can be returned.
	 */
	public $xslfile;
	/**
	 * @param XSLFileType $val
	 * @throws Exception
	 */
	public function setXSLFile($val)
	{
        $this->xslfile = (int)$val;
	}
}

/**
 * GetProductSearchPageRequestType
 * Retrieves the attributes a seller can use to form a query when searching for Pre-filled
 * Item Information to use in a listing for a category that is catalog-enabled. This call is
 * applicable for use cases related to listing items with Pre-filled Item Information. Specifically,
 * it retrieves data that you use to construct valid "single-attribute" queries. The attributes
 * describe search criteria (e.g., Author) and sorting criteria (e.g., Publication Year), as
 * appropriate for the category. GetProductSearchPage does not conduct the actual product search.
 * It only returns data about what you can search on. Use the data as input to GetProductSearchResults
 * to conduct the actual search for product information. To retrieve Product Finder search
 * criteria (querying against multiple attributes), use GetProductFinder instead. See the eBay
 * Web Services guide for an overview of Pre-filled Item Information and details about searching
 * for catalog products.
 */
class GetProductSearchPageRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}
}

/**
 * GetProductSearchPageResponseType
 * For a category that is catalog-enabled, GetProductSearchPage retrieves the attributes
 *    a seller can use to form a query when searching for Pre-filled Item Information.
 *  See the Developer's Guide for an overview of Pre-filled Item Information and details about
 *      searching for catalog products.
 */
class GetProductSearchPageResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Current version of the product search page data for the site. This value changes each time
	 * changes are made to the search page data. The current version value is not necessarily
	 * greater than the previous value. Therefore, when comparing versions, only compare whether
	 * the value has changed.
	 */
	public $attributesystemversion;
	/**
	 * @var ProductSearchPageType | A list of catalog search criteria and sort keys associated with a catalog-enabled category, plus
	 * supplemental information to help the seller understand how to make selections.
	 */
	public $productsearchpage;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSystemVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSystemVersion');
        }
        $this->attributesystemversion = (int)$val;
	}

	/**
	 * @param ProductSearchPageType $val
	 * @throws Exception
	 */
	public function setProductSearchPage($val)
	{
        $this->productsearchpage = (int)$val;
	}
}

/**
 * GetProductSearchResultsRequestType
 * Searches for Pre-filled Item Information within one or more characteristic sets. This kind
 * of search is only applicable in the context of the Sell Your Item use case. Use the response
 * to present the seller with a list of products found in a catalog. (For buy-side searches,
 * use GetSearchResults.)<br> <br> See the Attributes and Catalogs section of the eBay Web
 * Services guide for background information and terminology definitions, as well as information
 * about how to use this call in the Sell Your Item flow.<br> <br> You can use this call to
 * search for different products at the same time. That is, this call can perform batch searches.<br> <br> Given
 * an array of ProductSearch properties that are configured with a list of search attributes
 * or keywords (and other information), GetProductSearchResults searches an eBay catalog for
 * products that match each query. Some queries can be configured to also specify a sort order
 * for the results.<br> <br> To configure a ProductSearch object to search by attributes, you
 * need a valid combination of search attributes. If you want to use a sort order other than
 * the default order, you also need a valid sort attribute. We offer two calls that return
 * product search and sort attributes. Use GetCategory2CS to determine which one of these calls
 * you can use for a given category. At least one approach is offered for each catalog-enabled
 * category, and some cases, both are offered.<br> <br> <b>GetProductSearchPage</b>: Use this
 * call when you want to configure a simple query that consists of a single search attribute
 * (with a value). This retrieves a single product or a very short list of search results to
 * choose from. Some products are fairly easy to find based on a single attribute. For example,
 * in Consumer Electronics categories (Digital Cameras, Cell Phones, and PDAs), you can specify
 * a unique (or nearly unique) identifier, like a part number. In Media categories (Books,
 * DVDs & Movies, Music, and Video Games), you can specify a descriptive name, like a title.
 * <br> <br> <b>GetProductFinder</b>: Use this call when you want to configure a complex query.
 * In the Sell Your Item flow, this is a complex query against the eBay product catalog. Currently,
 * this type of search is available in Consumer Electronics categories only. In this type of
 * search, you specify values for multiple attributes, like Brand and Resolution (i.e., number
 * of megapixels). This retrieves a list of matching products. This approach is useful when
 * the user does not know the part number, or a product does not have a single, distinguishing
 * feature that is easy to search on. For example, searching for a digital camera based solely
 * on the brand would likely yield far too many results to be useful. Searching on the brand,
 * product line, and resolution will retrieve a much shorter list of results. <br> <br> Alternatively,
 * you can search on a particular keyword that appears in a product's title or Item Specifics. For
 * this, you use GetProductSearchResults and and pass in one or more text strings (with optional
 * wildcards) in ProductSearch.QueryKeywords. <br> <br> When you use a keyword query, the search
 * criteria are not restricted to the results of a product search page or product finder, so
 * the criteria are not tied to a particular characteristic set. This means you can search
 * across multiple characteristic sets using the same query. This is useful when the user wants
 * to broaden their search across multiple categories. For example, a seller who sells Jazz
 * books, Jazz CDs, and Jazz movies may want to search for "Bird" across multiple categories.
 * Specify the characteristic set IDs of interest by using CharacteristicSetIDs. <br> <br> GetProductSearchResults
 * returns a list of matching products, if any. Each product is represented as a list of attributes
 * (Item Specifics) plus other identifying information, such as a product ID and a stock photo.
 * <br> <br> Once the user selects a product from the list (this may require a call to GetProductFamilyMembers
 * to retrieve additional products to choose from), pass its ID in a GetProductSellingPages
 * request to retrieve more detailed information about each product, including a set of optional
 * Item Specifics that the seller can use in addition to the pre-filled Item Specifics (see
 * GetProductSellingPages). <br> <br> To use this data in a listing, pass the product ID and
 * the optional Item Specifics in the seller's listing request (AddItem).
 */
class GetProductSearchResultsRequestType extends
 AbstractRequestType
{
	/**
	 * @var ProductSearchType | Specifies the keywords or attributes that make up the product query,                  with
	 * pagination instructions. ProductSearch is a required input. To search for multiple different
	 * products at the same time (i.e., to perform a batch search), pass in multiple ProductSearch
	 * properties.
	 */
	public $productsearch;
	/**
	 * @param ProductSearchType $val
	 * @throws Exception
	 */
	public function setProductSearch($val)
	{
        $this->productsearch = (int)$val;
	}
}

/**
 * GetProductSearchResultsResponseType
 * GetProductSearchResults performs a product search and collects the results.      Result
 * attributes for each product/product family are grouped and identified      with a product
 * ID. If more matches are found than the max amount specified per family,      only the product
 * family information is returned. In this case, call GetProductFamilyMembers      to retrieve
 * more products within the same family.
 */
class GetProductSearchResultsResponseType extends
 AbstractResponseType
{
	/**
	 * @var DataElementSetType | Container for one or more DataElement fields containing supplemental helpful data.
	 *              A DataElement field is an HTML snippet that specifies hints for the user,
	 * help links, help graphics, and other supplemental information that varies per characteristic
	 * set. Usage of this information is optional and may require you to inspect the information
	 *                  to determine how it can be applied in an application.
	 *  Also returned with warnings when no matches are found.
	 */
	public $dataelementsets;
	/**
	 * @var ProductSearchResultType | Contains the attributes and product details that match the attributes or query keywords
	 *                  passed in the request. Always returned when product search results are
	 * found.
	 */
	public $productsearchresult;
	/**
	 * @param DataElementSetType $val
	 * @throws Exception
	 */
	public function setDataElementSets($val)
	{
        $this->dataelementsets = (int)$val;
	}

	/**
	 * @param ProductSearchResultType $val
	 * @throws Exception
	 */
	public function setProductSearchResult($val)
	{
        $this->productsearchresult = (int)$val;
	}
}

/**
 * GetProductSellingPagesRequestType
 * Retrieves information that describes how to present catalog product information to a seller.
 * Use this information to present users with the equivalent of the Item Specifics portion
 * of the eBay Title and Description pages and to validate user-specified values for eBay attributes
 * on the client before including them in an AddItem call or related calls. The data contains
 * a list of all the attributes that are applicable for one or more requested products, along
 * with related meta-data. The meta-data specifies the pre-filled values of each attribute,
 * the possible values of attributes that are not pre-filled, the logic for presenting the attributes
 * to a user, and rules for validating the user's selections. Use the results in combination
 * with GetAttributesXSL to render the Item Specifics in a graphical user interface. See the
 * eBay Web Services Guide for an overview of Pre-filled Item Information, details about searching
 * for catalog products, and information about the ProductSellingPages content model.
 */
class GetProductSellingPagesRequestType extends
 AbstractRequestType
{
	/**
	 * @var ProductUseCaseCodeType | Specifies the context in which the call is being executed, which will imply certain validation
	 * rules. Use this property to make sure you retrieve the appropriate version of product information
	 * and attribute meta-data when you are listing, revising, or relisting an item with Pre-filled
	 * Item Information. Valid values:<br> <b>SYI</b> = Sell Your Item. Use before adding an item.
	 * Causes the response to include the latest product ID in the system (given an ID specified
	 * in the Products element) and the corresponding characteristic meta-data.<br> <b>RYI</b>
	 * = Revise Your Item. Use this before revising an item. Causes the response to return the
	 * product ID, attribute data, and other data associated with the version of the product that
	 * you pass in the Products element. This is useful in case the product ID or associated data has
	 * changed in the system since the item was originally listed. When revising an item, this
	 * helps you make changes that are consistent with the original listing.<br> <b>RELIST</b>
	 * = Use this before relisting an item. Causes the response to include the latest product
	 * ID in the system (given an ID specified in the Products element) and the corresponding
	 * characteristic meta-data. (Same as SYI).
	 */
	public $usecase;
	/**
	 * @var ProductType | A suggested product to use to list an item with Pre-filled Item Information.
	 *  Returned from GetItemRecommendations when the Suggested Attributes engine is used
	 *         See the Developer's Guide for additional details.
	 */
	public $product;
	/**
	 * @param ProductUseCaseCodeType $val
	 * @throws Exception
	 */
	public function setUseCase($val)
	{
        $this->usecase = (int)$val;
	}

	/**
	 * @param ProductType $val
	 * @throws Exception
	 */
	public function setProduct($val)
	{
        $this->product = (int)$val;
	}
}

/**
 * GetProductSellingPagesResponseType
 * Retrieves an XML string that describes how to present catalog product information to a seller.
 *      Use this information to present users with the equivalent of the Item Specifics portion
 *      of the eBay Title and Description pages and to validate user-specified values for
 *     eBay attributes on the client before including them in an AddItem call or related calls.
 *      Use the results in combination with GetAttributesXSL to render the Item Specifics
 *     in a graphical user interface.      See the Developer's Guide for an overview of Pre-filled
 * Item Information and details about      searching for catalog products.
 */
class GetProductSellingPagesResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | A string containing a list of all the attributes that are applicable to the products specified
	 * in the request, along with related meta-data. The meta-data specifies the pre-filled values
	 * of each attribute, the possible values of attributes that are not pre-filled, the logic
	 * for presenting the attributes to a user, and rules for validating the user's selections. <br><br> For
	 * backward compatibility, this data is in the same XML format that was used in the Legacy
	 * XML API so that you can apply the same Item Specifics XSL stylesheet to it. That is, individual elements
	 * are not described using the unified schema format. <br><br> The data is based on the GetAttributesCS
	 * response (AttributeData), with additional information that is specific to catalog products. Product
	 * and attribute information is nested within a set of Product tags. The product-specific
	 * data is merged into the attribute data so that the same XSL stylesheet used to render the
	 * results of GetAttributeCS can be used to render catalog product data. See GetAttributesXSL. <br><br> See
	 * the Attribute Meta-Data Model section of the eBay Web Services guide for information about
	 * each element in the ProductSellingPagesData string. <br><br> Because the content is returned
	 * as a string, the XML markup elements are escaped with character entity references (e.g.,&amp;lt;eBay&amp;gt;&amp;lt;Attributes&amp;gt;...). See
	 * the appendices in the eBay Web Services guide for general information about string data
	 * types.
	 */
	public $productsellingpagesdata;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductSellingPagesData($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductSellingPagesData');
        }
        $this->productsellingpagesdata = (int)$val;
	}
}

/**
 * GetPromotionRulesRequestType
 * Requests a list of the cross-promotion rules associated with a specific referring item or
 * store category.
 */
class GetPromotionRulesRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var int | Numeric ID for a custom category that the seller created in their eBay Store, if any. eBay
	 * Stores sellers can create up to three levels of custom categories for their stores. Items
	 * can only be listed in store categories that have no child categories (subcategories). If
	 * you attempt to list an item in a category that has subcategories, the call response contains
	 * a warning, and the item is listed in the Other store category. In GetSearchResults, this
	 * field currently returns 0. As a workaround, use GetItem or related calls to get the ID.
	 */
	public $storecategoryid;
	/**
	 * @var PromotionMethodCodeType | The type of cross promotion, CrossSell or UpSell.
	 */
	public $promotionmethod;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setStoreCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->storecategoryid = (int)$val;
	}

	/**
	 * @param PromotionMethodCodeType $val
	 * @throws Exception
	 */
	public function setPromotionMethod($val)
	{
        $this->promotionmethod = (int)$val;
	}
}

/**
 * GetPromotionRulesResponseType
 * Returns a list of promotion rules associated with a specific item or store category.
 */
class GetPromotionRulesResponseType extends
 AbstractResponseType
{
	/**
	 * @var PromotionRuleArrayType | Specifies a list of cross-promotion rules to set. Each rule defines a referring item or
	 * store category and the cross-promoted items or store categories.
	 */
	public $promotionrulearray;
	/**
	 * @param PromotionRuleArrayType $val
	 * @throws Exception
	 */
	public function setPromotionRuleArray($val)
	{
        $this->promotionrulearray = (int)$val;
	}
}

/**
 * GetRecommendationsRequestType
 * Invokes one or more specified recommendation engines. These engines can examine potential
 * item data that a seller has specified and return recommended changes or opportunities for
 * improvement.
 */
class GetRecommendationsRequestType extends
 AbstractRequestType
{
	/**
	 * @var ListingFlowCodeType | The listing flow for which the seller is seeking Listing Analyzer recommendations. Not
	 * applicable to results from other recommendation engines (i.e., the Suggested Attributes
	 * engine or the Product Pricing engine). The default flow is AddItem.
	 */
	public $listingflow;
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @var ModifiedFieldType | Applicable when the ListingFlow is ReviseItem or RelistItem. Array of item properties that
	 * are being changed. In release 439 and later, ModifiedFields is no longer required to revise field
	 * values, but it is still supported for backward compatibility. See the Developer's Guide
	 * for rules on adding, modifying, and removing values when revising or relisting items.
	 */
	public $modifiedfields;
	/**
	 * @var RecommendationEngineCodeType | A recommendation engine to run. If no engines are specified, all available recommendation
	 * engines will run. Some engines require additional fields, such as Item.PrimaryCategory.CategoryID,
	 * to be specified. If the ProductPricing engine is specified but Item.ProductListingDetails
	 * is not specified, no Product Pricing engine results are returned.
	 */
	public $recommendationengine;
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @param ListingFlowCodeType $val
	 * @throws Exception
	 */
	public function setListingFlow($val)
	{
        $this->listingflow = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}

	/**
	 * @param ModifiedFieldType $val
	 * @throws Exception
	 */
	public function setModifiedFields($val)
	{
        $this->modifiedfields = (int)$val;
	}

	/**
	 * @param RecommendationEngineCodeType $val
	 * @throws Exception
	 */
	public function setRecommendationEngine($val)
	{
        $this->recommendationengine = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}
}

/**
 * GetRecommendationsResponseType
 * GetRecommendations returns recommended changes or opportunities for improvement related
 * to listing data that was passed in the request.
 */
class GetRecommendationsResponseType extends
 AbstractResponseType
{
	/**
	 * @var ListingAnalyzerRecommendationsType | Contains tips returned from the Listing Analyzer recommendation engine,             if
	 * this engine was specified in the request (or if no engine was specified).
	 */
	public $listinganalyzerrecommendations;
	/**
	 * @var SIFFTASRecommendationsType | Reserved for future use.
	 */
	public $sifftasrecommendations;
	/**
	 * @var PricingRecommendationsType | Contains pricing data returned from the Product Pricing engine,             if this engine
	 * was specified in the request (or if no engine was specified).
	 */
	public $pricingrecommendations;
	/**
	 * @var AttributeRecommendationsType | Contains attribute suggestions returned from the Suggested Attributes engine, if this engine
	 * was specified in the request. The results include suggested attributes and values based
	 * on the primary category and a string you specify in the Query field. Suggestions may only
	 * be returned when the Suggested Attributes engine is specified alone. If you request recommendations
	 * by using multiple engines, suggested attribute data might not be returned. If attributes
	 * are returned with multiple values, the values are returned in order of rank (i.e., the
	 * value that best meets eBay's recommendation criteria is returned first).
	 */
	public $attributerecommendations;
	/**
	 * @var ProductRecommendationsType | Contains zero or more product titles and IDs returned from the Suggested Attributes engine,
	 * if this engine was specified in the request (or if no engine was specified). If applicable,
	 * use one of the suggested product IDs to list the item with Pre-filled Item Information.
	 */
	public $productrecommendations;
	/**
	 * @param ListingAnalyzerRecommendationsType $val
	 * @throws Exception
	 */
	public function setListingAnalyzerRecommendations($val)
	{
        $this->listinganalyzerrecommendations = (int)$val;
	}

	/**
	 * @param SIFFTASRecommendationsType $val
	 * @throws Exception
	 */
	public function setSIFFTASRecommendations($val)
	{
        $this->sifftasrecommendations = (int)$val;
	}

	/**
	 * @param PricingRecommendationsType $val
	 * @throws Exception
	 */
	public function setPricingRecommendations($val)
	{
        $this->pricingrecommendations = (int)$val;
	}

	/**
	 * @param AttributeRecommendationsType $val
	 * @throws Exception
	 */
	public function setAttributeRecommendations($val)
	{
        $this->attributerecommendations = (int)$val;
	}

	/**
	 * @param ProductRecommendationsType $val
	 * @throws Exception
	 */
	public function setProductRecommendations($val)
	{
        $this->productrecommendations = (int)$val;
	}
}

/**
 * GetReturnURLRequestType
 * Returns an application's authentication and authorization preferences and related data,
 * such as the URLs that eBay should redirect users to after they complete the authentication
 * and authorization process. This call needs the ebay userid/password you created for use
 * by your applications (not an authentication token).
 */
class GetReturnUrLrequestType extends
 AbstractRequestType
{}

/**
 * GetReturnURLResponseType
 * Returns all the authentication and authorization preferences and related data for the application.
 */
class GetReturnUrLresponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Sets an application display name for the eBay sign-in page. Need not be set with every
	 * call. Optional.
	 */
	public $applicationdisplayname;
	/**
	 * @var AuthenticationEntryArrayType | One or more sets of authentication preferences and other data that you have configured
	 * for your application (if any). Call SetReturnURL to configure this data.
	 */
	public $authenticationentryarray;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setApplicationDisplayName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ApplicationDisplayName');
        }
        $this->applicationdisplayname = (int)$val;
	}

	/**
	 * @param AuthenticationEntryArrayType $val
	 * @throws Exception
	 */
	public function setAuthenticationEntryArray($val)
	{
        $this->authenticationentryarray = (int)$val;
	}
}

/**
 * GetRuNameRequestType
 * Returns a globally unique runame (unique identifier for an authentication data entry). This
 * call needs the ebay userid/password you created for use by your applications (not an authentication
 * token).
 */
class GetRuNameRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Optional value that is appended to the generated runame.
	 */
	public $clientusecase;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setClientUseCase($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ClientUseCase');
        }
        $this->clientusecase = (int)$val;
	}
}

/**
 * GetRuNameResponseType
 * Contains the generated runame (unique identifier for an authentication data entry).
 */
class GetRuNameResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | A unique identifier associated with application and the combination            of URLs
	 * within this authentication entry.            Unique across all applications that execute
	 * eBay Web Services calls.            For convenience, you can call GetRuName to generate
	 * a unique value.
	 */
	public $runame;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRuName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RuName');
        }
        $this->runame = (int)$val;
	}
}

/**
 * GetSearchResultsRequestType
 * Retrieves item listings based on keywords you specify. The keywords can include wildcards. <br> <br> The
 * response is in the form of an array whose size and contents you specify, using a variety
 * of input fields. You can filter the item listings returned using such criteria as the listing
 * category, location, whether the item is listed in an ebay Store, and listing type. You can
 * include or exclude specified sellers. <br> <br> The call returns those item listings where
 * the keywords appear in the title, subtitle, and (optionally) the description. Some input
 * fields (e.g., Query) are primary search criteria that let you specify data to match in listings.
 * For example, you can search for all listings that include the word "Toy" in the title. <br> <br> Some
 * fields (e.g., ItemTypeFilter) are secondary search criteria that let you further refine
 * data to match in listings. For example, you can search for all toys that are listed as auctions.
 * In general, the effect of secondary search fields is cumulative (using "AND" logic) unless
 * otherwise specified. Some fields (e.g., TotalOnly) control what is actually returned in
 * the result set. For example, you can search for all toys that are listed as Chinese auctions,
 * but just retrieve the total count (not the listings themselves). <br> <br> Some fields (e.g.,
 * IncludeCondition) affect the data to retrieve for each listing in the result set. For example,
 * for each toy returned in the result, you can also choose to see the toy's new or used condition. <br> <br> Some
 * fields (e.g., Order) control the way the listings are organized in the response. For example,
 * you can retrieve all the toy listings in chronological order, with the newest one first.
 * Use the DetailLevel ItemReturnCategories to return the primary category and, if applicable,
 * the secondary category. <br> <br> Use a DetailLevel value of ItemReturnAttributes (or ReturnAll)
 * to return summary Item Specifics (only returned for categories that support summary Item
 * Specifics in search results). <br><br>Not applicable to eBay Express or Half.com. Applicable
 * to the <a href="http://developer.ebay.com/developercenter/rest/" target="_blank">REST API</a>.
 */
class GetSearchResultsRequestType extends
 AbstractRequestType
{
	/**
	 * @var boolean | Listing upgrade that features the item in eBay search results on the mobile.de partner
	 * site. Applicable to eBay Germany. If true in listing requests and responses, the seller
	 * is purchasing or has purchased cross-promotional placement on the mobile.de site. See the
	 * eBay Web Services Guide for applicable categories, revise and relist rules, and additional
	 * information on featuring vehicles on the Mobile.de Site. Not applicable to Half.com.
	 */
	public $motorsgermanysearchable;
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var SearchFlagsCodeType | Secondary search criterion that checks item descriptions for keywords that match the query,
	 * limits the search results to only charity items, limits the result set to those items with
	 * PayPal as a payment method, and/or provides other criteria to refine the search. Not allowed
	 * with UserIdFilter (IncludeSellers or ExcludeSellers).
	 */
	public $searchflags;
	/**
	 * @var PriceRangeFilterType | Limits the result set to just those items where the price is within the specified range.
	 * The PriceRangeFilterType includes a minimum and a maximum price.
	 */
	public $pricerangefilter;
	/**
	 * @var ProximitySearchType | Limits the result set to just those items whose location is within a specified distance
	 * of a postal code. The ProximitySearchType includes a maximum distance and a postal code.
	 */
	public $proximitysearch;
	/**
	 * @var ItemTypeFilterCodeType | Filters items based on the ListingType set for the items. If you search for Store Inventory
	 * items, you must use values in ItemTypeFilter instead of StoresFixedPrice, which soon will
	 * be obsolete. If ItemTypeFilter is not specified (or if the AllItemTypes value of ItemTypeFilter
	 * is specified), all listing types can be returned unless another relevant filter is specified.
	 * You cannot use GetSearchResults to search eBay Express.
	 */
	public $itemtypefilter;
	/**
	 * @var SearchTypeCodeType | Indicates whether one attribute or multiple attributes can be used as the search keyword
	 *          when calling GetProductSearchResults. Applications can ignore this data because
	 *          GetProductSearchPage only supports single-attribute searches.          Use GetProductFinder
	 * to determine valid multi-attribute searches.
	 */
	public $searchtype;
	/**
	 * @var UserIdFilterType | Limits the the result set to just those items listed by one or more specified sellers or
	 * those items not listed by the one or more specified sellers.
	 */
	public $useridfilter;
	/**
	 * @var SearchLocationFilterType | Limits the result set to just those items that meet location criteria: listed in a specified
	 * eBay site, location where the seller has the item, location from which the user is searching,
	 * and/or items listed with a specified currency. You cannot use GetSearchResults to search
	 * eBay Express.
	 */
	public $searchlocationfilter;
	/**
	 * @var SearchStoreFilterType | Limits the result set to just those items that meet criteria related to eBay Stores sellers
	 * and eBay Stores. Use this to retrieve items listed in a particular seller's eBay Store
	 * or in all store sellers' eBay Stores.
	 */
	public $storesearchfilter;
	/**
	 * @var SearchSortOrderCodeType | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var SearchRequestType | A query consisting of a set of attributes (Item Specifics). Use this kind of query to search
	 * against the Item Specifics in listings (e.g., to search for a particular shoe size). If
	 * the query includes multiple attributes, the search engine will apply "AND" logic to the
	 * query and narrow the results. Use GetProductFinder to determine the list of valid attributes and
	 * how many are permitted for the specified characteristic set. Retrieves items along with
	 * any buying guide details that are associated with the specified product finder. Applicable
	 * in combination with the Query argument. Cannot be used in combination with ProductID or ExternalProductID.
	 * CategoryID is ignored when SearchRequest is specified.
	 */
	public $searchrequest;
	/**
	 * @var string | Identifier for a representative stock product in a product family.            Used as input
	 * in GetProductFamilyMembers requests to identify a product family.            Use GetProductSearchResults
	 * to determine the available IDs.
	 */
	public $productid;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @var RequestCategoriesType | Retrieves statistical information about categories that contain items that match the query.
	 * Can also cause the result to include information about buying guides that are associated
	 * with the matching categories. Does not control the set of listings to return or the details
	 * to return for each listing.
	 */
	public $categories;
	/**
	 * @var boolean | Retrieves the total quantity of matching items, without returning the item data. See PaginationResult.TotalNumberOfEntries
	 * in the response. If TotalOnly and Categories.CategoriesOnly are both specified in the request and
	 * their values are inconsistent with each other, TotalOnly overrides Categories.CategoriesOnly.
	 * That is, if TotalOnly is true and Categories.CategoriesOnly is false, the results include
	 * matching categories but no item data or buying guides. If TotalOnly is false and Categories.CategoriesOnly
	 * is true, the results include matching categories, item data, and buying guides. If TotalOnly
	 * is not specified, it has no logical effect.
	 */
	public $totalonly;
	/**
	 * @var dateTime | Specifies the earliest (oldest) date to use in a date range filter based on item end time. Specify
	 * either the end time range or start time range filter in every request.
	 */
	public $endtimefrom;
	/**
	 * @var dateTime | Specifies the latest (most recent) date to use in a date range filter based on item end
	 * time. Must be specified if EndTimeFrom is specified.
	 */
	public $endtimeto;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is later than or equal to this
	 * value. Specify the time value in GMT. See the eBay Web Services documentation for information
	 * about specifying time values. For more precise control of the date range filter, it is
	 * a good practice to also specify ModTimeTo. Otherwise, the end of the date range is the
	 * present time. Filtering by date range is optional. You can use date range filters in combination with
	 * other filters like DisputeFilterType to control the amount of data returned.
	 */
	public $modtimefrom;
	/**
	 * @var boolean | When passed with a value of true, limits the results to Get It Fast listings.
	 */
	public $includegetitfastitems;
	/**
	 * @var boolean | Applications currently using StoresFixedPrice must begin using values in ItemTypeFilter
	 * instead of StoresFixedPrice. Otherwise, you may get unexpected results. This field is ignored
	 * if Store-related values in ItemTypeFilter are used as input filters.<br> <br> <b>Earlier
	 * behavior:</b> StoresFixedPrice controls whether or not to use the Store Inventory format
	 * as a filtering criterion.<br> <br> For US, Canada, and Motors:<br> The StoresFixedPrice
	 * input field does not currently work for these sites.<br> For all other sites:<br> If true,
	 * the results only include Store Inventory listings (with no listings in other formats).<br> If
	 * false, the results only include listings in other formats (with no Store Inventory listings).<br> If
	 * omitted (the default), this filter is not applied at all, so all formats can be returned
	 * (depending on other criteria you pass in the request). In this case, Store Inventory listings appear
	 * after all other matching auction and basic fixed price listings. <br> <br> You can use
	 * this filter regardless of whether you are searching in eBay Stores. If you pass StoresFixedPrice
	 * in the same request with StoreSearchFilter or certain values in ItemTypeFilter, "AND" logic
	 * may be applied, and you might not get the desired results. For example, if you specify StoresFixedPrice=true
	 * and ItemTypeFilter=AuctionItemsOnly, the call may succeed but no listings will be returned (because
	 * no listings can use both auction and Store Inventory formats).
	 */
	public $storesfixedprice;
	/**
	 * @var PaymentMethodSearchCodeType | 	 */
	public $paymentmethod;
	/**
	 * @var GranularityLevelCodeType | Specifies the subset of item and user fields to return. See GetSellerList in the eBay Web
	 * Services guide for a list of the fields that are returned for each granularity level. For
	 * GetSellerList, use DetailLevel or GranularityLevel in a request, but not both. For GetSellerList,
	 * if GranularityLevel is specified, DetailLevel is ignored.
	 */
	public $granularitylevel;
	/**
	 * @var boolean | Expands search results when a small result set is returned. For example, on the US site
	 * (site ID 0), if a search would normally result in fewer than 10 items, then if you specify
	 * true for this tag, the search results are expanded. Specifically, the search returns items
	 * (if there are matches) in one or more of the following containers: InternationalExpansionArray
	 * (for items available from international sellers), FilterRemovedExpansionArray (items that
	 * would be returned if filters such as PriceRangeFilter are removed), StoreExpansionArray
	 * (for items listed in the Store Inventory Format), and AllCategoriesExpansionArray (for
	 * items available if category filters are removed). Maximum number of items returned in each
	 * expansion container is 6 to 10.
	 */
	public $expandsearch;
	/**
	 * @var boolean | Limits the results to only those listings for which Item.LotSize is 2 or greater.
	 */
	public $lot;
	/**
	 * @var boolean | Restricts listings to return only items that have the Ad Format feature. If true, the values
	 * of ItemTypeFilter, StoresFixedPrice, and StoreSearchFilter are ignored (if they are specified).
	 * That is, "AND" logic is not applied.
	 */
	public $adformat;
	/**
	 * @var boolean | If true, only items with free shipping for the user's location are returned. The user's
	 * location is determined from the site ID specified in the request. If false, no filtering
	 * is done via this attribute. A listing is not considered a free shipping listing if it requires insurance
	 * or requires pick up or requires a shipping surcharge.
	 */
	public $freeshipping;
	/**
	 * @var int | Specifies the number of items from the specified listing the user tendering the offer intends
	 * to purchase or bid on. For Chinese auctions and other listing formats that only allow one
	 * item per listing, value may not exceed one. For multi-item listings, must be greater than
	 * zero and not exceeding the number of items offered for sale in the listing.
	 */
	public $quantity;
	/**
	 * @var QuantityOperatorCodeType | Limits the results to listings with quantities greater than, equal to, or less than Quantity.
	 * Controls the set of listings to return (not the details to return for each listing).
	 */
	public $quantityoperator;
	/**
	 * @var SellerBusinessCodeType | Type of seller account. This value is returned if the German site (site ID 77) or eBay
	 * Motors site (site ID 100) is specified.
	 */
	public $sellerbusinesstype;
	/**
	 * @var boolean | Indicates whether the order contains at least one transaction for a digital listing. Not
	 * applicable to Half.com.
	 */
	public $digitaldelivery;
	/**
	 * @var boolean | If true, each item in the result set can also include the item condition attribute (e.g.,
	 * New or Used) in the ItemSpecific property of the response. An item only includes a condition attribute
	 * in the response if the seller filled in the Item Condition in the Item Specifics section
	 * of the listing. (That is, the condition attribute is not returned if the seller only put
	 * the word "New" in the listing's title but did not specify the condition in the listing's
	 * Item Specifics.) Controls the details to return for each listing (not the set of listings
	 * that match the query). Note: This field does not control whether to retrieve only new or
	 * used items. In some categories, you can use a product finder search (SearchRequest) to
	 * only retrieve new or used items.
	 */
	public $includecondition;
	/**
	 * @var boolean | If true, each item in the result set also includes information about the seller's feedback.
	 * Controls the details to return for each listing (not the set of listings that match the
	 * query).
	 */
	public $includefeedback;
	/**
	 * @var int | A unique identification number assigned by eBay to registered nonprofit charity organizations.
	 * Required input when listing Giving Works items.
	 */
	public $charityid;
	/**
	 * @var string | Include local items in returning results near this postal code. This postal code is the
	 * basis for local search.
	 */
	public $localsearchpostalcode;
	/**
	 * @var int | The maximum number of related keywords to be retrieved. Use this field if you want the
	 * search results to include recommended keywords (that is, keywords matching one or more
	 * of the original keywords) in a RelatedSearchKeywordArray container. A value of 0 (the default)
	 * means no related search information is processed.
	 */
	public $maxrelatedsearchkeywords;
	/**
	 * @var AffiliateTrackingDetailsType | Container for affiliate tags for the REST API and for the unified schema API. If you use
	 * affiliate tags, it is possible to get affiliate commissions based on calls made by your
	 * application. (See the <a href="http://affiliates.ebay.com/" target="_blank">eBay Affiliate
	 * Program</a> for information about commissions.) Affiliate tags enable the tracking of user
	 * activity. You can use child tags of AffiliateTrackingDetails if you want call output to
	 * include a string, in ItemArray.Item.ListingDetails.ViewItemURL, that includes affiliate
	 * tracking information. For GetSearchResultsExpress, the ViewItemURL field is returned only
	 * if you specify AffiliateTrackingDetails in the request.
	 */
	public $affiliatetrackingdetails;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMotorsGermanySearchable($val)
	{
        $this->motorsgermanysearchable = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param SearchFlagsCodeType $val
	 * @throws Exception
	 */
	public function setSearchFlags($val)
	{
        $this->searchflags = (int)$val;
	}

	/**
	 * @param PriceRangeFilterType $val
	 * @throws Exception
	 */
	public function setPriceRangeFilter($val)
	{
        $this->pricerangefilter = (int)$val;
	}

	/**
	 * @param ProximitySearchType $val
	 * @throws Exception
	 */
	public function setProximitySearch($val)
	{
        $this->proximitysearch = (int)$val;
	}

	/**
	 * @param ItemTypeFilterCodeType $val
	 * @throws Exception
	 */
	public function setItemTypeFilter($val)
	{
        $this->itemtypefilter = (int)$val;
	}

	/**
	 * @param SearchTypeCodeType $val
	 * @throws Exception
	 */
	public function setSearchType($val)
	{
        $this->searchtype = (int)$val;
	}

	/**
	 * @param UserIdFilterType $val
	 * @throws Exception
	 */
	public function setUserIdFilter($val)
	{
        $this->useridfilter = (int)$val;
	}

	/**
	 * @param SearchLocationFilterType $val
	 * @throws Exception
	 */
	public function setSearchLocationFilter($val)
	{
        $this->searchlocationfilter = (int)$val;
	}

	/**
	 * @param SearchStoreFilterType $val
	 * @throws Exception
	 */
	public function setStoreSearchFilter($val)
	{
        $this->storesearchfilter = (int)$val;
	}

	/**
	 * @param SearchSortOrderCodeType $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        $this->order = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param SearchRequestType $val
	 * @throws Exception
	 */
	public function setSearchRequest($val)
	{
        $this->searchrequest = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductID');
        }
        $this->productid = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}

	/**
	 * @param RequestCategoriesType $val
	 * @throws Exception
	 */
	public function setCategories($val)
	{
        $this->categories = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setTotalOnly($val)
	{
        $this->totalonly = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeFrom($val)
	{
        $this->endtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeTo($val)
	{
        $this->endtimeto = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeFrom($val)
	{
        $this->modtimefrom = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeGetItFastItems($val)
	{
        $this->includegetitfastitems = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setStoresFixedPrice($val)
	{
        $this->storesfixedprice = (int)$val;
	}

	/**
	 * @param PaymentMethodSearchCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethod($val)
	{
        $this->paymentmethod = (int)$val;
	}

	/**
	 * @param GranularityLevelCodeType $val
	 * @throws Exception
	 */
	public function setGranularityLevel($val)
	{
        $this->granularitylevel = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpandSearch($val)
	{
        $this->expandsearch = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLot($val)
	{
        $this->lot = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAdFormat($val)
	{
        $this->adformat = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFreeShipping($val)
	{
        $this->freeshipping = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantity($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantity = (int)$val;
	}

	/**
	 * @param QuantityOperatorCodeType $val
	 * @throws Exception
	 */
	public function setQuantityOperator($val)
	{
        $this->quantityoperator = (int)$val;
	}

	/**
	 * @param SellerBusinessCodeType $val
	 * @throws Exception
	 */
	public function setSellerBusinessType($val)
	{
        $this->sellerbusinesstype = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDigitalDelivery($val)
	{
        $this->digitaldelivery = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeCondition($val)
	{
        $this->includecondition = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeFeedback($val)
	{
        $this->includefeedback = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCharityID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->charityid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocalSearchPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LocalSearchPostalCode');
        }
        $this->localsearchpostalcode = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxRelatedSearchKeywords($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxrelatedsearchkeywords = (int)$val;
	}

	/**
	 * @param AffiliateTrackingDetailsType $val
	 * @throws Exception
	 */
	public function setAffiliateTrackingDetails($val)
	{
        $this->affiliatetrackingdetails = (int)$val;
	}
}

/**
 * GetSearchResultsResponseType
 * Response contains the item listings that have the specified keyword(s) in the title, sub-title,
 * and (optionally) the description. If the request uses any of the optional filtering properties,
 * the item listings returned are those containing the keyword(s) and meeting the filter criteria.
 * <br><br> Not applicable to eBay Express or Half.com.
 */
class GetSearchResultsResponseType extends
 AbstractResponseType
{
	/**
	 * @var SearchResultItemArrayType | Contains the returned item listings, if any. The data for each listing is returned in an
	 * ItemType object.
	 */
	public $searchresultitemarray;
	/**
	 * @var int | Indicates the maximum number of Want It Now posts that can be returned in a WantItNowPostArray
	 * for a request. This value can be specified in the request by  EntriesPerPage in Pagination
	 * in the request.
	 */
	public $itemsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var boolean | Indicates whether there are additional Want It Now posts that meet the search criteria.
	 */
	public $hasmoreitems;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var CategoryArrayType | Statistical information about categories that contain items that match the query, if any.
	 * Returns empty if no matches are found or when the Categories filter was not passed in the
	 * request. (For categories associated with specific items, see items returned in each search result.)
	 * Shows the distribution of items across each category.
	 */
	public $categoryarray;
	/**
	 * @var BuyingGuideDetailsType | Contains URLs and other information about relevant buying guides (if any), as well as the
	 * site's buying guide hub. Unavailable in the Sandbox environment. Buying guides are useful
	 * to buyers who do not have a specific product in mind. For example, a digital camera buying
	 * guide could help a buyer determine what kind of digital camera is right for them. Only
	 * returned for product finder searches (using SearchRequest.SearchAttributes) and for searches
	 * that retrieve matching categories along with item data (using Categories.CategoriesOnly=false).
	 */
	public $buyingguidedetails;
	/**
	 * @var ExpansionArrayType | Returned for the US site, US eBay Motors site, and Canada site; returned for other international
	 * sites beginning in mid-September 2006. Contains items listed in the Store Inventory Format, if
	 * the request specifies that ExpandSearch is true.
	 */
	public $storeexpansionarray;
	/**
	 * @var ExpansionArrayType | Can be returned if the request specifies that ExpandSearch is true. Provides additional
	 * search results when a small result set would have been returned with the original search.
	 * For example, on the US site (site ID 0), if a search would normally result in fewer than
	 * 10 items, and ExpandSearch is true, the search results are expanded to include (if matching
	 * the query) the InternationalExpansionArray container for items, as well as other containers.
	 * The InternationalExpansionArray container contains items available from international sellers.
	 */
	public $internationalexpansionarray;
	/**
	 * @var ExpansionArrayType | Can be returned if the request specifies that ExpandSearch is true. Provides additional
	 * search results when a small result set would have been returned with the original search.
	 * For example, on the US site (site ID 0), if a search would normally result in fewer than
	 * 10 items, and ExpandSearch is true, the search results are expanded to include (if matching
	 * the query) the FilterRemovedExpansionArray container for items, as well as other containers.
	 * The FilterRemovedExpansionArray container contains items that would be returned if filters
	 * such as PriceRangeFilter are removed.
	 */
	public $filterremovedexpansionarray;
	/**
	 * @var ExpansionArrayType | Can be returned if the request specifies that ExpandSearch is true. Provides additional
	 * search results when a small result set would have been returned with the original search.
	 * For example, on the US site (site ID 0), if a search would normally result in fewer than
	 * 10 items, and ExpandSearch is true, the search results are expanded to include (if matching
	 * the query) the AllCategoriesExpansionArray container for items, as well as other containers.
	 * The AllCategoriesExpansionArray container contains items available if category filters
	 * are removed.
	 */
	public $allcategoriesexpansionarray;
	/**
	 * @var SpellingSuggestionType | Suggestion for a different spelling of the search term or terms, along with the number
	 * of matching items that would have been returned if the suggestions had been used. The suggestions
	 * are given in Text tags and the suggestion for the first word is given before the suggestion
	 * for subsequent words. Suggestions are based on correctly-spelled terms in items, so suggestions
	 * vary over time and depend on whether a word or word combination is in one or more items.
	 */
	public $spellingsuggestion;
	/**
	 * @var RelatedSearchKeywordArrayType | Container for keywords related to the original keywords in the request. Can be returned
	 * if the request specified more than zero in the MaxRelatedSearchKeywords field.
	 */
	public $relatedsearchkeywordarray;
	/**
	 * @param SearchResultItemArrayType $val
	 * @throws Exception
	 */
	public function setSearchResultItemArray($val)
	{
        $this->searchresultitemarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreItems($val)
	{
        $this->hasmoreitems = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param CategoryArrayType $val
	 * @throws Exception
	 */
	public function setCategoryArray($val)
	{
        $this->categoryarray = (int)$val;
	}

	/**
	 * @param BuyingGuideDetailsType $val
	 * @throws Exception
	 */
	public function setBuyingGuideDetails($val)
	{
        $this->buyingguidedetails = (int)$val;
	}

	/**
	 * @param ExpansionArrayType $val
	 * @throws Exception
	 */
	public function setStoreExpansionArray($val)
	{
        $this->storeexpansionarray = (int)$val;
	}

	/**
	 * @param ExpansionArrayType $val
	 * @throws Exception
	 */
	public function setInternationalExpansionArray($val)
	{
        $this->internationalexpansionarray = (int)$val;
	}

	/**
	 * @param ExpansionArrayType $val
	 * @throws Exception
	 */
	public function setFilterRemovedExpansionArray($val)
	{
        $this->filterremovedexpansionarray = (int)$val;
	}

	/**
	 * @param ExpansionArrayType $val
	 * @throws Exception
	 */
	public function setAllCategoriesExpansionArray($val)
	{
        $this->allcategoriesexpansionarray = (int)$val;
	}

	/**
	 * @param SpellingSuggestionType $val
	 * @throws Exception
	 */
	public function setSpellingSuggestion($val)
	{
        $this->spellingsuggestion = (int)$val;
	}

	/**
	 * @param RelatedSearchKeywordArrayType $val
	 * @throws Exception
	 */
	public function setRelatedSearchKeywordArray($val)
	{
        $this->relatedsearchkeywordarray = (int)$val;
	}
}

/**
 * GetSearchResultsExpressRequestType
 * <b>Please check our <a href="http://dev-forums.ebay.com/forum.jspa?forumID=1001">System
 * Announcements</a> for updates on current issues with GetSearchReultsExpress.</b><br> <br> Retrieves
 * brief details about active items that are listed on eBay Express, eBay catalog products
 * that have been used to pre-fill data in these items, and a histogram that shows the distribution
 * of items and catalog products across Express departments, aisles, and/or product types.<br> <br> This
 * call only returns Express data for the site associated with the site ID that you specify
 * in the request URL (for the SOAP API) or the X-EBAY-API-SITEID header (for the XML API).
 * For example, if you specify site ID 0, then data for Express US is returned. <br> <br> Currently,
 * this call is only supported for site ID 0 (Express US). <br> <br> The Sandbox does not support
 * GetSearchResultsExpress.<br> <br> You can configure the call to retrieve only the item data,
 * only the catalog product data, only the histogram, or any combination of these results.
 * By default, the call returns brief summaries of each.<br> <br> <b>Item Results:</b> For
 * each item returned (if any), the response includes a brief set of details, such as the item
 * price (including shipping). You can retrieve more or fewer details about each item by using
 * the ItemDetails field. To retrieve other details about a given item, use a call like GetSellerList
 * or GetItem.<br> <br> <b>Catalog Product Results:</b> For each eBay catalog product returned (if
 * any), the response includes a brief set of details, such as the minimum and maximum price
 * of listings that have been pre-filled based on that product. You can retrieve more or fewer
 * details about each product by using the ProductDetails field.<br> <br> <b>Histogram Results:</b>
 * Instead of grouping items by category, the Express search engine groups items into <i>domains</i>.
 * A domain is a set of items to which Express can apply a common set of search rules. Express supports
 * three kinds of domains: <i>Product types</i>, <i>aisles</i>, and <i>departments</i>, like
 * a typical department store. (The fact that we call these "domains" is not important to buyers
 * and sellers, but it can be helpful to understand the domain relationships when you are working
 * with the API.)<br> <br> Listings with similar properties are classified into product type
 * domains. For example, "DVDs & Movies" is a product type domain. Think of a product type
 * as a type of good or service that can be purchased and as a leaf domain (which cannot be
 * the parent of other domains).<br> <br> <span class="tablenote"><b>Note:</b> An Express product
 * type is not the same as an eBay catalog product. Some Express product types are associated with
 * eBay catalog products, but other Express product types are not.</span> <br> <br> When multiple
 * product types share a common theme, Express groups them into an aisle or a department. For
 * example, the Men's Jeans product type can be grouped with Men's Pants into a Men's Clothing
 * aisle. When multiple aisles share a common theme, Express groups them into departments.
 * For example, the Men's Clothing aisle can be grouped with a Men's Accessories aisle to form
 * an Apparel & Accessories department. If no groups make sense, a product type can stand alone
 * without being grouped. For example, "DVDs & Movies" would not be grouped with other product types
 * like Men's Jeans, so "DVDs & Movies" has no parent aisle or department. (From a user's perspective,
 * this product type is elevated to look like a department, but in the API it is still classified
 * as a product type.) Similarly, an aisle can stand alone without being grouped with other
 * aisles into a department.<br> <br> See the eBay Web Services guide link below for more information
 * about departments, aisles, and product types. </p> <p> This call returns a histogram that
 * shows the number of items and catalog products that were found in each department, aisle,
 * and/or product type that matches your search criteria.<br> <br> The domain names and groupings
 * are subject to change. They are determined by the Express search engine based on the items
 * that are currently listed on Express as well as historical buyer behavior. This means you
 * need to call GetSearchResultsExpress to determine the current domain names and their hierarchical
 * relationships.<br> <br> <span class="tablenote"><b>Note:</b> A domain is a search notion only.
 * That is, items are not stored in domains on eBay, and domains are not equivalent to eBay
 * categories (although Express may choose to organize and name some domains to match eBay
 * categories).</span> <br> <br> <b>Search Tips:</b></p> <ul> <li>Use either Query, ProductReferenceID,
 * or the ExternalProductID fields to search for specific items and/or products. See the descriptions
 * below for information about using these fields. (Only one of these query formats can be used
 * per request.)</li> <li>Use DepartmentName, AisleName, and/or ProductTypeName to browse or search
 * within a particular domain. You can also specify the value "Express" in DepartmentName to
 * retrieve a complete list of all available department, aisle, and product type names.</li> <li>Use
 * one or more filters like HighestPrice to refine the search.</li> <li>Use sort options like
 * ItemSort to control the order in which the results are returned.</li> <li>Use pagination
 * options like EntriesPerPage to control how many results to return at a time.</li> <li>Use
 * verbose controls like ItemDetails to specify the data to return within each result.</li> </ul> <p>The
 * item results, catalog product results, and histogram results do not provide references to
 * each other. That is, the items don't indicate which domains they were found in, and the
 * histogram doesn't specify which items were counted. However, you can infer these relationships
 * by modifying your search parameters. For example, once you determine which domains match
 * your query, you can call GetSearchResultsExpress again to browse or search each of those
 * domains to find out which items they contain. </p> <p>Applicable to the <a href="http://developer.ebay.com/developercenter/rest/"
 * target="_blank">REST API</a>.<br> <br> <b>Please check our <a href="http://dev-forums.ebay.com/forum.jspa?forumID=1001">System
 * Announcements</a> for updates on current issues with GetSearchReultsExpress.</b><br> <br>
 */
class GetSearchResultsExpressRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @var ExternalProductCodeType | The combination of ExternalProductIDType and ExternalProductIDValue create a query that
	 * only retrieves items that were listed with Pre-filled Item Information in categories that
	 * support ISBN or UPC codes. ExternalProductIDType identifies whether the search is by ISBN
	 * or UPC. If specified, also specify the ISBN or UPC code in ExternalProductIDValue.<br> <br> The
	 * Query, ProductReferenceID, and ExternalProductID query formats are mutually exclusive.
	 * That is, they cannot be used together in the same request. At least one of Query, ProductReferenceID,
	 * ExternalProductIDValue (and Type), SellerID, DepartmentName, AisleName, or ProductTypeName
	 * is required.<br> <br> <b>Note:</b> The ExternalProductID type and value structure is flat
	 * to support REST API requests in the future.
	 */
	public $externalproductidtype;
	/**
	 * @var string | An ISBN or UPC code (depending on ExternalProductIDType) for the eBay catalog product that
	 * you are searching for. Only valid when ExternalProductIDType is specified.
	 */
	public $externalproductidvalue;
	/**
	 * @var long | The global reference ID for the eBay catalog product. Only returned when ProductDetails
	 * is set to Fine.<br> <br> <span class="tablenote"><b>Note:</b> This value is not the same
	 * as the ProductID used in AddItem and related calls. A ProductID represents a particular
	 * version of a catalog product, which is associated with a particular set of Item Specifics
	 * and other details. A ProductReferenceID is a more generic or global reference to a catalog
	 * product, which is useful for buy-side searching. One ProductReferenceID can be associated
	 * with multiple ProductIDs.</span>
	 */
	public $productreferenceid;
	/**
	 * @var string | A department is a grouping of aisles and/or product types that share a common theme. This
	 * filter limits the search to the specified Express department. If not specified, this filter
	 * is ignored by the search engine.<br> <br> You can specify the value "Express" (without
	 * quotes) as the department name to retrieve all departments on Express. With this use case,
	 * the ItemArray and ProductArray nodes aren't returned. The valid department names are returned
	 * in the Histogram.Department.DomainDetails.Name fields. When DepartmentName=Express, you
	 * can only specify HistogramSort and/or HistogramDetails. Set HistogramDetail to Fine to
	 * also retrieve all aisles and product types. Do not specify ItemDetails or ProductDetails
	 * at all in the request. (Setting the values to None will return an error). Also do not specify
	 * any other query, pagination, price, or sorting fields in the request.<br> <br> The Query,
	 * ProductReferenceID, and ExternalProductID query formats are mutually exclusive. That is,
	 * they cannot be used together in the same request. At least one of Query, ProductReferenceID,
	 * ExternalProductIDValue (and Type), SellerID, DepartmentName, AisleName, or ProductTypeName
	 * is required.
	 */
	public $departmentname;
	/**
	 * @var string | An aisle is a grouping of product types that share a common theme. This filter limits the
	 * search to the specified Express aisle. If not specified, this filter is ignored by the
	 * search engine.<br> <br> See DepartmentName for information about how to retrieve all available department,
	 * aisle, and product type names. The valid aisle names are returned in the Histogram.Department.Aisle.DomainDetails.Name fields.<br> <br> At
	 * least one of Query, ProductReferenceID, ExternalProductIDValue (and Type), SellerID, DepartmentName,
	 * AisleName, or ProductTypeName is required. Optionally, both DepartmentName and AisleName
	 * can be specified in the same request. In this case, the search engine treats the combination
	 * as a fully qualified aisle name (and it returns an error if the combination is invalid).
	 */
	public $aislename;
	/**
	 * @var string | A product type is a type of good or service that can be purchased. This filter limits the
	 * search to the specified Express product type. If not specified, this filter is ignored
	 * by the search engine.<br> <br> <b>Note:</b> Express product types are not eBay catalog products.
	 * This field does not support eBay catalog product names or IDs.<br> <br> See DepartmentName
	 * for information about how to retrieve all available department, aisle, and product type
	 * names. The valid product type names are returned in Histogram.Department.Aisle.ProductType.DomainDetails.Name fields.<br> <br> Optionally,
	 * DepartmentName and/or AisleName can be specified in the same request with ProductTypeName.
	 * In this case, the search engine treats the combination as a fully qualified product type
	 * name (and it returns an error if the combination is invalid).
	 */
	public $producttypename;
	/**
	 * @var ExpressHistogramSortCodeType | Specifies the order of the data in the histogram (if any). Controls the way the histogram
	 * data is organized in the response (not the details to return). If not specified, the default
	 * sort order is ItemCount.<br> <br> This option has no effect on how item or product results
	 * are sorted. Histogram, item, and product results are sorted independently.<br> <br> Note:
	 * If you want to sort the results by criteria that eBay has not defined, retrieve the desired
	 * histogram data and then sort the results locally in your application.
	 */
	public $histogramsort;
	/**
	 * @var ExpressItemSortCodeType | Specifies the order in which listings (if any) are returned in the result set. If not specified,
	 * the items are sorted by relevance (as determined by eBay). If you choose to sort by total
	 * cost, a PostalCode must also be specified (so that eBay can calculate the shipping cost
	 * as part of the total cost for each item).<br> <br> Controls the way the data is organized
	 * in the response (not the details to return).<br> <br> This option has no effect on how
	 * histogram or product results are sorted. Histogram, item, and product results are sorted
	 * independently.<br> <br> Note: If you want to sort the results by criteria that eBay has
	 * not defined, retrieve all available pages and then sort the results locally in your application.
	 */
	public $itemsort;
	/**
	 * @var ExpressProductSortCodeType | Specifies the order in which Express products are returned in a result set. If not specified,
	 * the products are sorted by sales rank (bestselling first).<br> <br> This option has no
	 * effect on how histogram or item results are sorted. Histogram, item, and product results
	 * are sorted independently.<br> <br> Note: If you want to sort the results by criteria that
	 * eBay has not defined, retrieve all available pages and then sort the results locally in your
	 * application.<br> <br> Controls the way the data is organized in the response (not the details
	 * to return).
	 */
	public $productsort;
	/**
	 * @var AmountType | A filter that limits the results to items with a SellingStatus.CurrentPrice value lower
	 * than this value. For example, if you specify 10.01, the results will include items with
	 * a CurrentPrice of 10.00 or lower. Use without LowestPrice to specify a maximum price, or
	 * use with LowestPrice to define a price range that bounds the results. Must be higher than
	 * LowestPrice if both are specified. If not specified, no maximum price filter is applied
	 * to the query.<br> <br> You can specify any double value, but in practice the highest price
	 * of any item on Express is USD 10000 for Express US and (in the future) EUR 10000 for Express
	 * Germany. If you specify a value of 0.0 or lower, this filter is ignored. See "Data Types"
	 * in the eBay Web Services Guide for information about specifying double values.<br> <br> Does
	 * not control the order in which items are returned. (To sort by highest total price, use
	 * ItemSort.)
	 */
	public $highestprice;
	/**
	 * @var AmountType | A filter that limits the results to items with a SellingStatus.CurrentPrice value equal
	 * to or higher than this value. For example, if you specify 6.00, the results will include
	 * items with a CurrentPrice of 6.00 or higher. If specified, HighestPrice must also be specified;
	 * otherwise, the lowest price filter is ignored. Must be lower than HighestPrice. If not
	 * specified or if the value is less than 0.0, no minimum price filter is applied to the query.<br> <br> You
	 * can specify any double value, but in practice the highest price of any item on Express
	 * is USD 10000 for Express US and (in the future) EUR 10000 for Express Germany. See "Data
	 * Types" in the eBay Web Services Guide for information about specifying double values .<br> <br> Does
	 * not control the order in which items are returned. (To sort by lowest total price, use
	 * ItemSort.)
	 */
	public $lowestprice;
	/**
	 * @var ConditionSelectionCodeType | The item condition, if any. On Express US, this is often a value like "New", "Used", or
	 * "Refurbished", but the exact value can vary based on the Item Condition data that the seller
	 * used in the listing.<br> For example, in some eBay categories, the condition can have a
	 * value like "New: With Tags" instead. (At the time of this writing, GetSearchResultsExpress
	 * mapped all conditions to "New" and "Used". However, this could change in the future.) By
	 * default, only new items (or the equivalent) are returned from GetSearchResultsExpress. Use
	 * Condition in the request to include used and refurbished items (or the equivalent) as well. Only
	 * returned when ItemDetails is set to Fine.<br> <br> Not applicable to calls that browse
	 * or search items on the main eBay site.
	 */
	public $condition;
	/**
	 * @var UserIDType | The eBay ID of the seller who listed the item. <br><br> Starting Jan 2007, when a bidder's
	 * user info is made anonymous, this tag will be returned with the anonymous value "Seller
	 * X", where X indicates where the seller falls in the sequence of sellers that the user has
	 * purchased items from. For example, if the seller is the third seller that the user has
	 * purchased items from, the value "Seller 3" is returned.
	 */
	public $sellerid;
	/**
	 * @var string | The postal code to use as the basis for the proximity search.
	 */
	public $postalcode;
	/**
	 * @var ExpressDetailLevelCodeType | Controls the amount of statistical data to return in the response. If not specified, the
	 * default is Coarse.<br> <br> This setting is not a filter that limits the search; it only
	 * configures how much detail to retrieve in the resulting histogram. This setting has no
	 * effect on the product or item details.
	 */
	public $histogramdetails;
	/**
	 * @var ExpressDetailLevelCodeType | Selects the set of fields to retrieve for each catalog product that matches the query.
	 * If not specified, the default is Coarse.<br> <br> This setting is not a filter that limits
	 * the search; it only configures which fields to retrieve for each product found. This setting
	 * has no effect on the histogram or item details.
	 */
	public $productdetails;
	/**
	 * @var ExpressDetailLevelCodeType | Selects the set of fields to retrieve for each item that matches the query. If not specified,
	 * the default is Coarse.<br> <br> This setting is not a filter that limits the search; it
	 * only configures which fields to retrieve for each item found. This setting has no effect on
	 * the histogram or product details.
	 */
	public $itemdetails;
	/**
	 * @var int | Specifies the maximum number of entries to return in a single call. If the number of entries
	 * that can be returned is less than the value in EntriesPerPage, then the lower number is
	 * returned. For most calls, the max is 200 and the default is 25. For GetUserDisputes, the
	 * value is hard-coded at 200, and any input is ignored. See the documentation for other individual
	 * calls to determine the correct max and default values. For GetOrders, not applicable to
	 * eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $entriesperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var AffiliateTrackingDetailsType | Container for affiliate tags for the REST API and for the unified schema API. If you use
	 * affiliate tags, it is possible to get affiliate commissions based on calls made by your
	 * application. (See the <a href="http://affiliates.ebay.com/" target="_blank">eBay Affiliate
	 * Program</a> for information about commissions.) Affiliate tags enable the tracking of user
	 * activity. You can use child tags of AffiliateTrackingDetails if you want call output to
	 * include a string, in ItemArray.Item.ListingDetails.ViewItemURL, that includes affiliate
	 * tracking information. For GetSearchResultsExpress, the ViewItemURL field is returned only
	 * if you specify AffiliateTrackingDetails in the request.
	 */
	public $affiliatetrackingdetails;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}

	/**
	 * @param ExternalProductCodeType $val
	 * @throws Exception
	 */
	public function setExternalProductIDType($val)
	{
        $this->externalproductidtype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExternalProductIDValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ExternalProductIDValue');
        }
        $this->externalproductidvalue = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setProductReferenceID($val)
	{
        $this->productreferenceid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDepartmentName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DepartmentName');
        }
        $this->departmentname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAisleName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AisleName');
        }
        $this->aislename = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductTypeName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductTypeName');
        }
        $this->producttypename = (int)$val;
	}

	/**
	 * @param ExpressHistogramSortCodeType $val
	 * @throws Exception
	 */
	public function setHistogramSort($val)
	{
        $this->histogramsort = (int)$val;
	}

	/**
	 * @param ExpressItemSortCodeType $val
	 * @throws Exception
	 */
	public function setItemSort($val)
	{
        $this->itemsort = (int)$val;
	}

	/**
	 * @param ExpressProductSortCodeType $val
	 * @throws Exception
	 */
	public function setProductSort($val)
	{
        $this->productsort = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setHighestPrice($val)
	{
        $this->highestprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setLowestPrice($val)
	{
        $this->lowestprice = (int)$val;
	}

	/**
	 * @param ConditionSelectionCodeType $val
	 * @throws Exception
	 */
	public function setCondition($val)
	{
        $this->condition = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setSellerID($val)
	{
        $this->sellerid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PostalCode');
        }
        $this->postalcode = (int)$val;
	}

	/**
	 * @param ExpressDetailLevelCodeType $val
	 * @throws Exception
	 */
	public function setHistogramDetails($val)
	{
        $this->histogramdetails = (int)$val;
	}

	/**
	 * @param ExpressDetailLevelCodeType $val
	 * @throws Exception
	 */
	public function setProductDetails($val)
	{
        $this->productdetails = (int)$val;
	}

	/**
	 * @param ExpressDetailLevelCodeType $val
	 * @throws Exception
	 */
	public function setItemDetails($val)
	{
        $this->itemdetails = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setEntriesPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->entriesperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param AffiliateTrackingDetailsType $val
	 * @throws Exception
	 */
	public function setAffiliateTrackingDetails($val)
	{
        $this->affiliatetrackingdetails = (int)$val;
	}
}

/**
 * GetSearchResultsExpressResponseType
 * The GetSearchResultsExpress response contains the listings that match the query or ID specified
 * in the request, related eBay catalog product information, and a histogram showing the the
 * quantity (count) of matching items in Express departments, aisles, and product types. The
 * results may be limited by filters that were specified in the request.
 */
class GetSearchResultsExpressResponseType extends
 AbstractResponseType
{
	/**
	 * @var DomainHistogramType | Indicates the quantity of items and catalog products that fall into departments, aisles,
	 * and/or product types that match the criteria in the request. The sort order is controlled
	 * by the value of HistogramSort in the request. Only returned when matching data is found
	 * and HistogramDetails is Coarse (the default) or Fine.<br> <br> When HistogramDetails==Coarse
	 * and no DepartmentName, AisleName, or ProductTypeName is specified in the request, Express
	 * only returns histogram details for departments. In this particular case, Express returns
	 * no histogram details when no departments match the request. This could occur when Express
	 * only finds matching results in stand-alone product types or stand-alone aisles (because
	 * they aren't grouped into departments).
	 */
	public $histogram;
	/**
	 * @var ItemArrayType | Contains a list of Item types.
	 */
	public $itemarray;
	/**
	 * @var ProductArrayType | Contains a list of eBay catalog products have been used to pre-fill listings that match
	 * the criteria specified in the request. The sort order is controlled by the value of ProductSort
	 * in the request. Only returned when matching data is found and ProductDetails is Coarse
	 * (the default) or Fine. To determine which products are currently available in a given domain,
	 * specify the DepartmentName, AisleName, or ProductTypeName in the request.
	 */
	public $productarray;
	/**
	 * @var int | Specifies the maximum number of entries to return in a single call. If the number of entries
	 * that can be returned is less than the value in EntriesPerPage, then the lower number is
	 * returned. For most calls, the max is 200 and the default is 25. For GetUserDisputes, the
	 * value is hard-coded at 200, and any input is ignored. See the documentation for other individual
	 * calls to determine the correct max and default values. For GetOrders, not applicable to
	 * eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $entriesperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var boolean | If true, there are additional item and/or product results (on higher- numbered pages) that
	 * match the query. To retrieve them, call GetSearchResultsExpress again and increment the
	 * page number or specify a higher value for EntriesPerPage in the request.
	 */
	public $hasmoreentries;
	/**
	 * @param DomainHistogramType $val
	 * @throws Exception
	 */
	public function setHistogram($val)
	{
        $this->histogram = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setItemArray($val)
	{
        $this->itemarray = (int)$val;
	}

	/**
	 * @param ProductArrayType $val
	 * @throws Exception
	 */
	public function setProductArray($val)
	{
        $this->productarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setEntriesPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->entriesperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreEntries($val)
	{
        $this->hasmoreentries = (int)$val;
	}
}

/**
 * GetSellerEventsRequestType
 * Retrieves price changes, item revisions, description revisions, and other changes that have
 * occurred within the last 48 hours related to a seller's eBay listings. Input is the user
 * ID for the seller whose events are returned. GetSellerEvents returns zero, one, or multiple
 * item events. You can add filters so the data returned includes only events for items that
 * start, end, or are modified within a certain time span.
 */
class GetSellerEventsRequestType extends
 AbstractRequestType
{
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var dateTime | Specifies the earliest (oldest) date to use in a date range filter based on item start
	 * time. Specify either the end time range or start time range filter in every request.
	 */
	public $starttimefrom;
	/**
	 * @var dateTime | Specifies the latest (most recent) date to use in a date range filter based on item start
	 * time. Must be specified if StartTimeFrom is specified.
	 */
	public $starttimeto;
	/**
	 * @var dateTime | Specifies the earliest (oldest) date to use in a date range filter based on item end time. Specify
	 * either the end time range or start time range filter in every request.
	 */
	public $endtimefrom;
	/**
	 * @var dateTime | Specifies the latest (most recent) date to use in a date range filter based on item end
	 * time. Must be specified if EndTimeFrom is specified.
	 */
	public $endtimeto;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is later than or equal to this
	 * value. Specify the time value in GMT. See the eBay Web Services documentation for information
	 * about specifying time values. For more precise control of the date range filter, it is
	 * a good practice to also specify ModTimeTo. Otherwise, the end of the date range is the
	 * present time. Filtering by date range is optional. You can use date range filters in combination with
	 * other filters like DisputeFilterType to control the amount of data returned.
	 */
	public $modtimefrom;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is earlier than or equal to
	 * this value. Specify the time value in GMT. See the eBay Web Services documentation for
	 * information about specifying time values. For more precise control of the date range filter,
	 * it is a good practice to also specify ModTimeFrom. Otherwise, all available disputes modified
	 * prior to the ModTimeTo value are returned. Filtering by date range is optional. You can
	 * use date range filters in combination with other filters like DisputeFilterType to control
	 * the amount of data returned.
	 */
	public $modtimeto;
	/**
	 * @var boolean | Specifies that only new items are to be returned. NewItemFilter is an optional input.
	 */
	public $newitemfilter;
	/**
	 * @var boolean | Specifies whether to include WatchCount in Item nodes returned. WatchCount is only returned
	 * with DetailLevel ReturnAll.
	 */
	public $includewatchcount;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTimeFrom($val)
	{
        $this->starttimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTimeTo($val)
	{
        $this->starttimeto = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeFrom($val)
	{
        $this->endtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeTo($val)
	{
        $this->endtimeto = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeFrom($val)
	{
        $this->modtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeTo($val)
	{
        $this->modtimeto = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setNewItemFilter($val)
	{
        $this->newitemfilter = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeWatchCount($val)
	{
        $this->includewatchcount = (int)$val;
	}
}

/**
 * GetSellerEventsResponseType
 * Contains the items returned by the call. Items for which a seller event has          occurred
 * (and that meet any filters specified as input) are returned in an          ItemArrayType
 * object, within which are zero, one, or multiple ItemType objects.          Each ItemType
 * object contains the detail data for one item listing.
 */
class GetSellerEventsResponseType extends
 AbstractResponseType
{
	/**
	 * @var dateTime | Limits returned items to only those that were submited on or before the date-time specified.
	 * If specified, TimeFrom must also be specified. Express date-time in the format YYYY-MM-DD
	 * HH:MM:SS, and in GMT. (For information on how to convert between your local time zone and
	 * GMT, see Time Values Note.) Applies to items reported with VeROReportItems or by other
	 * means (e.g., through the web flow). Infringement reporting data is maintained for two years
	 * after the date of submission. This field is ignored if VeROReportPacketID or ItemID is
	 * specified.
	 */
	public $timeto;
	/**
	 * @var ItemArrayType | Contains a list of Item types.
	 */
	public $itemarray;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setTimeTo($val)
	{
        $this->timeto = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setItemArray($val)
	{
        $this->itemarray = (int)$val;
	}
}

/**
 * GetSellerListRequestType
 * Returns a list of items a seller has listed for auction. Returns an array of zero, one,
 * or multiple items. You can specify that the returned data include only items that start
 * or end within a specified date range.
 */
class GetSellerListRequestType extends
 AbstractRequestType
{
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var UserIDArrayType | Specifies the list of Motors Dealer sellers for which a special set of metrics can be requested.
	 * Applies to eBay Motors Pro applications only.
	 */
	public $motorsdealerusers;
	/**
	 * @var dateTime | Specifies the earliest (oldest) date to use in a date range filter based on item end time. Specify
	 * either the end time range or start time range filter in every request.
	 */
	public $endtimefrom;
	/**
	 * @var dateTime | Specifies the latest (most recent) date to use in a date range filter based on item end
	 * time. Must be specified if EndTimeFrom is specified.
	 */
	public $endtimeto;
	/**
	 * @var int | Specifies the result sort order. Default is Ascending.
	 */
	public $sort;
	/**
	 * @var dateTime | Specifies the earliest (oldest) date to use in a date range filter based on item start
	 * time. Specify either the end time range or start time range filter in every request.
	 */
	public $starttimefrom;
	/**
	 * @var dateTime | Specifies the latest (most recent) date to use in a date range filter based on item start
	 * time. Must be specified if StartTimeFrom is specified.
	 */
	public $starttimeto;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var GranularityLevelCodeType | Specifies the subset of item and user fields to return. See GetSellerList in the eBay Web
	 * Services guide for a list of the fields that are returned for each granularity level. For
	 * GetSellerList, use DetailLevel or GranularityLevel in a request, but not both. For GetSellerList,
	 * if GranularityLevel is specified, DetailLevel is ignored.
	 */
	public $granularitylevel;
	/**
	 * @var SKUArrayType | Specifies a set of seller SKUs to use as a filter. Only items with the specified SKUs are
	 * returned. Do not specify this tag if you do not want to filter by SKU. Corresponds to the
	 * SKU property that is part of ItemType and that can be provided when, for example, you use
	 * the AddItem call.
	 */
	public $skuarray;
	/**
	 * @var boolean | Specifies whether to include WatchCount in Item nodes returned. WatchCount is only returned
	 * with DetailLevel ReturnAll.
	 */
	public $includewatchcount;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param UserIDArrayType $val
	 * @throws Exception
	 */
	public function setMotorsDealerUsers($val)
	{
        $this->motorsdealerusers = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeFrom($val)
	{
        $this->endtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTimeTo($val)
	{
        $this->endtimeto = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSort($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->sort = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTimeFrom($val)
	{
        $this->starttimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTimeTo($val)
	{
        $this->starttimeto = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param GranularityLevelCodeType $val
	 * @throws Exception
	 */
	public function setGranularityLevel($val)
	{
        $this->granularitylevel = (int)$val;
	}

	/**
	 * @param SKUArrayType $val
	 * @throws Exception
	 */
	public function setSKUArray($val)
	{
        $this->skuarray = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeWatchCount($val)
	{
        $this->includewatchcount = (int)$val;
	}
}

/**
 * GetSellerListResponseType
 * Contains a list of the items listed by the seller specified as input. The list of items
 * is returned in an ItemArrayType object, in which are returned zero, one, or multiple ItemType
 * objects. Each ItemType object contains the detail data for one item listing.
 */
class GetSellerListResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | Indicates whether there are additional Want It Now posts that meet the search criteria.
	 */
	public $hasmoreitems;
	/**
	 * @var ItemArrayType | Contains a list of Item types.
	 */
	public $itemarray;
	/**
	 * @var int | Indicates the maximum number of Want It Now posts that can be returned in a WantItNowPostArray
	 * for a request. This value can be specified in the request by  EntriesPerPage in Pagination
	 * in the request.
	 */
	public $itemsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var int | Indicates the total number of items returned (i.e., the number of ItemType objects in ItemArray).
	 */
	public $returneditemcountactual;
	/**
	 * @var UserType | Container for information about this listing's seller. Not applicable to Half.com. <br> <br> In
	 * GetSearchResultsExpress, only returned when ItemDetails is set to Fine.
	 */
	public $seller;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreItems($val)
	{
        $this->hasmoreitems = (int)$val;
	}

	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setItemArray($val)
	{
        $this->itemarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setReturnedItemCountActual($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->returneditemcountactual = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setSeller($val)
	{
        $this->seller = (int)$val;
	}
}

/**
 * GetSellerPaymentsRequestType
 * Retrieves a summary of pending or paid payments that Half.com created for the seller identified
 * by the authentication token in the request. Only retrieves payments that occurred within
 * a particular pay period. Each payment is for one transaction for one item in one order.
 * An order can contain transactions for multiple items from multiple sellers, but this call
 * only retrieves payments that are relevant to one seller. The financial value of a payment
 * is typically based on an amount that a buyer paid to Half.com for a transaction, with adjustments
 * for shipping costs and Half.com's commission. For most sellers, each month contains two
 * pay periods: One from the 1st to the 15th of the month, and one from the 16th to the last
 * day of the month. Sellers can refer to their account information on the Half.com site to
 * determine their pay periods. (You cannot retrieve a seller's pay periods by using eBay Web
 * Services.) When a buyer makes a purchase and an order is created, Half.com creates a payment
 * for the seller and marks it as Pending in the seller's Half.com account. Within a certain
 * number of days after the pay period ends, Half.com settles payments for that period and
 * marks each completed payment as Paid. See the Half.com Web site online help for more information
 * about how payments are managed.
 */
class GetSellerPaymentsRequestType extends
 AbstractRequestType
{
	/**
	 * @var RCSPaymentStatusCodeType | Not supported.
	 */
	public $paymentstatus;
	/**
	 * @var dateTime | Time range filter that retrieves Half.com payments that were created within a single pay
	 * period. Sellers can refer to the Half.com site to determine their pay periods. PaymentTimeFrom
	 * is the earliest (oldest) time and PaymentTimeTo is the latest (most recent) time in the
	 * range. Half.com pay periods start and end at midnight Pacific time, but the time values
	 * are stored in the database in GMT (not Pacific time). See "Time Values" in the eBay Web
	 * Services guide for information about converting between GMT and Pacific time. <br> <br> If
	 * you specify a PaymentStatus of Pending, add a buffer of one hour (or one day) to both ends
	 * of the time range to retrieve more data than you need, and then filter the results on the
	 * client side as needed. If any pending payments match the request, the response may include
	 * all payments since the beginning of the period. <br> <br> If you specify a PaymentStatus
	 * of Paid, the time range must contain one full pay period. That is, PaymentTimeFrom must
	 * be earlier or equal the start time of the pay period, and PaymentTimeTo must be later than
	 * or equal to the end time of the pay period. Otherwise, no paid payments are returned. For
	 * example, if the pay period starts on 2005-09-16 and ends on 2005-09-30, you could specify
	 * an earlier PaymentTimeFrom value of 2005-09-16T00:00:00.000Z and a later PaymentTimeTo
	 * value of 2005-10-01T12:00:00.000Z. <br> <br> If you specify a time range that covers two
	 * pay periods, only the payments from the most recent pay period are returned. The earliest
	 * time you can specify is 18 months ago.
	 */
	public $paymenttimefrom;
	/**
	 * @var dateTime | Time range filter that retrieves Half.com payments for a single pay period. See the description
	 * of PaymentTimeTo for details about using this time range filter. For paid payments, this
	 * value should be equal to or later than the end of the last day of the pay period, where
	 * the time is converted to GMT. For example, if the period ends on 2005-09-30, you could specify
	 * 2005-10-01T09:00:00.000Z, which is later than the end of the last day.
	 */
	public $paymenttimeto;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param RCSPaymentStatusCodeType $val
	 * @throws Exception
	 */
	public function setPaymentStatus($val)
	{
        $this->paymentstatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setPaymentTimeFrom($val)
	{
        $this->paymenttimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setPaymentTimeTo($val)
	{
        $this->paymenttimeto = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetSellerPaymentsResponseType
 * Returns a summary of pending or paid payments that Half.com created for the seller identified
 * by the authentication token in the request. Only returns payments that occurred within a
 * particular pay period. Each payment is for one transaction for one item in one order. An
 * order can contain transactions for multiple items from multiple sellers, but this call only
 * retrieves payments that are relevant to one seller. Payments are only issued for items and
 * transactions that the seller has confirmed (see the Half.com online help for details). The
 * financial value of a payment is typically based on an amount that a buyer paid to Half.com
 * for a transaction, plus the shipping cost the buyer paid to Half.com for the item, minus Half.com's
 * commission. For most sellers, each month contains two pay periods: One from the 1st to the
 * 15th of the month, and one from the 16th to the last day of the month. Payments are submitted
 * to the seller's financial institution a certain number of days after the current pay period
 * ends (see the Half.com online help for details).
 */
class GetSellerPaymentsResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | If true, there are more payments yet to be retrieved. Additional GetSellerPayments calls
	 * with higher page numbers or more entries per page must be made to retrieve these payments.
	 * If false, no more payments are available or no payments match the request (based on the
	 * payment status and time filter).
	 */
	public $hasmorepayments;
	/**
	 * @var SellerPaymentType | Information about a single payment that matches the criteria in the request. A payment
	 * is between Half.com and a seller. Each payment is for one transaction for one item in one
	 * order. An order can contain transactions for multiple items from multiple sellers, but
	 * this call only retrieves payments that are relevant to one seller. The financial value
	 * of a payment is typically based on an amount that a buyer paid to Half.com for a transaction,
	 * plus the shipping cost the buyer paid for the item, minus Half.com's commission. Payments
	 * can also describe refunds that the seller has issued. Multiple SellerPayment entries can
	 * be returned per page of results. Typically, they are returned in reverse chronological
	 * order (most recent PaidTime first). Only returned if payments exist that match the request.
	 */
	public $sellerpayment;
	/**
	 * @var int | Indicates the number of payments that can be returned per page of data (i.e., per call).
	 * This is the same as the value specified in the Pagination.EntriesPerPage input (or the
	 * default value, if EntriesPerPage was not specified). This is not necessarily the actual
	 * number of payments returned per page (see ReturnedPaymentCountActual).
	 */
	public $paymentsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var int | Indicates the total number of payments returned (i.e., the number of SellerPayment entries
	 * returned.
	 */
	public $returnedpaymentcountactual;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMorePayments($val)
	{
        $this->hasmorepayments = (int)$val;
	}

	/**
	 * @param SellerPaymentType $val
	 * @throws Exception
	 */
	public function setSellerPayment($val)
	{
        $this->sellerpayment = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPaymentsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->paymentsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setReturnedPaymentCountActual($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->returnedpaymentcountactual = (int)$val;
	}
}

/**
 * GetSellerTransactionsRequestType
 *
 */
class GetSellerTransactionsRequestType extends
 AbstractRequestType
{
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is later than or equal to this
	 * value. Specify the time value in GMT. See the eBay Web Services documentation for information
	 * about specifying time values. For more precise control of the date range filter, it is
	 * a good practice to also specify ModTimeTo. Otherwise, the end of the date range is the
	 * present time. Filtering by date range is optional. You can use date range filters in combination with
	 * other filters like DisputeFilterType to control the amount of data returned.
	 */
	public $modtimefrom;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is earlier than or equal to
	 * this value. Specify the time value in GMT. See the eBay Web Services documentation for
	 * information about specifying time values. For more precise control of the date range filter,
	 * it is a good practice to also specify ModTimeFrom. Otherwise, all available disputes modified
	 * prior to the ModTimeTo value are returned. Filtering by date range is optional. You can
	 * use date range filters in combination with other filters like DisputeFilterType to control
	 * the amount of data returned.
	 */
	public $modtimeto;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var boolean | Indicates whether to include final value fees in the response. For most listing types,
	 * the fee is returned in Transaction.FinalValueFee. For Dutch auctions that end with bids
	 * (not Buy It Now purchases), the fee is returned in Item.SellingStatus.FinalValueFee. The
	 * Final Value Fee for FixedPriceItem, StoresFixedPrice, and Buy It Now Dutch listing types
	 * is returned on a transaction by transaction basis. For all other listing types, including
	 * Chinese and Dutch (no Buy It Now purchases), the Final Value Fee is returned when the listing
	 * status is Completed.
	 */
	public $includefinalvaluefee;
	/**
	 * @var boolean | Whether to retrieve the order information. Default is false.
	 */
	public $includecontainingorder;
	/**
	 * @var SKUArrayType | Specifies a set of seller SKUs to use as a filter. Only items with the specified SKUs are
	 * returned. Do not specify this tag if you do not want to filter by SKU. Corresponds to the
	 * SKU property that is part of ItemType and that can be provided when, for example, you use
	 * the AddItem call.
	 */
	public $skuarray;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeFrom($val)
	{
        $this->modtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeTo($val)
	{
        $this->modtimeto = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeFinalValueFee($val)
	{
        $this->includefinalvaluefee = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeContainingOrder($val)
	{
        $this->includecontainingorder = (int)$val;
	}

	/**
	 * @param SKUArrayType $val
	 * @throws Exception
	 */
	public function setSKUArray($val)
	{
        $this->skuarray = (int)$val;
	}
}

/**
 * GetSellerTransactionsResponseType
 * Returns an array of transaction data for the seller specified in the request. The results
 * can be used to create a report of data that is commonly necessary for end-of-auction processing. Zero,
 * one, or many Transaction objects can be returned in the array. The set of transactions returned
 * is limited to those that were modified between the times specified in the request's ModTimeFrom
 * and ModTimeTo filters. The transactions returned are sorted by Transaction.Status.LastTimeModified, ascending
 * order (that is, transactions that more recently were modified are returned last). Also returns
 * information about the seller whose transactions were requested. If pagination filters were
 * specified in the request, returns meta-data describing the effects of those filters on the
 * current response and the estimated effects if the same filters are used in subsequent calls.
 */
class GetSellerTransactionsResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | Indicates whether there are additional transactions to retrieve. That is, indicates whether
	 * more pages of data are available to be returned, given the filters that were specified
	 * in the request. Returns false for the last page of data.
	 */
	public $hasmoretransactions;
	/**
	 * @var int | Number of transactions returned per page (per call). May be a higher value than ReturnedTransactionCountActual
	 * if the page returned is the last page and more than one page of data exists.
	 */
	public $transactionsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var int | Number of transactions retrieved in the current page of results just returned. May be a
	 * lower value than TransactionsPerPage if the page returned is the last page and more than
	 * one page of data exists.
	 */
	public $returnedtransactioncountactual;
	/**
	 * @var UserType | Container for information about this listing's seller. Not applicable to Half.com. <br> <br> In
	 * GetSearchResultsExpress, only returned when ItemDetails is set to Fine.
	 */
	public $seller;
	/**
	 * @var TransactionArrayType | Contains a list of transactions. Returned as an empty tag if no applicable transactions
	 * exist.
	 */
	public $transactionarray;
	/**
	 * @var boolean | Specifies whether a seller wants to let buyers know that PayPal payments are preferred.
	 */
	public $paypalpreferred;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreTransactions($val)
	{
        $this->hasmoretransactions = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTransactionsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->transactionsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setReturnedTransactionCountActual($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->returnedtransactioncountactual = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setSeller($val)
	{
        $this->seller = (int)$val;
	}

	/**
	 * @param TransactionArrayType $val
	 * @throws Exception
	 */
	public function setTransactionArray($val)
	{
        $this->transactionarray = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPayPalPreferred($val)
	{
        $this->paypalpreferred = (int)$val;
	}
}

/**
 * GetStoreRequestType
 * Retrieves configuration information for the eBay store owned by the caller. The return value
 * from GetStoreResponse is a StoreType, which contains the store configuration, including
 * the store name, URL, subscription level, and other data. You can set CategoryStructureOnly
 * to true to retrieve only information about the category hierarchy of the store.
 */
class GetStoreRequestType extends
 AbstractRequestType
{
	/**
	 * @var boolean | If this is set to True, only the category structure of the store is returned. If this is
	 * not specified or set to False, the complete store configuration is returned.
	 */
	public $categorystructureonly;
	/**
	 * @var int | Specifies the category ID for the topmost category to return (along with the subcategories
	 * under it, the value of the LevelLimit property determining how deep). This tag is optional.
	 * If RootCategoryID is not specified, then the category tree starting at that root Category
	 * is returned.
	 */
	public $rootcategoryid;
	/**
	 * @var int | Specifies the limit for the number of levels of the category hierarchy to return, where
	 * the given root category is level 1 and its children are level 2. Only categories at or
	 * above the level specified are returned. This tag is optional. If LevelLimit is not set,
	 * the complete category hierarchy is returned. Stores support category hierarchies up to
	 * 3 levels only.
	 */
	public $levellimit;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCategoryStructureOnly($val)
	{
        $this->categorystructureonly = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setRootCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->rootcategoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLevelLimit($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->levellimit = (int)$val;
	}
}

/**
 * GetStoreResponseType
 * Returns the data describing a seller's eBay store, including name, description, URL, and
 * other information. The caller making the request must be the owner of an eBay store. If
 * the authenticated caller does not have an eBay store, the response is an error. A successful
 * response contains either the complete store configuration or information about the category
 * hierarchy for the store only.
 */
class GetStoreResponseType extends
 AbstractResponseType
{
	/**
	 * @var StoreType | Specifies the Store configuration that is being set for the user.
	 */
	public $store;
	/**
	 * @param StoreType $val
	 * @throws Exception
	 */
	public function setStore($val)
	{
        $this->store = (int)$val;
	}
}

/**
 * GetStoreCategoryUpdateStatusRequestType
 * Returns the status of the processing progress for category structure changes specified with
 * a SetStoreCategories request. Use this call to retrieve status when the SetStoreCategories
 * call is being processed asynchronously. SetStoreCategories will be processed asynchronously
 * when many listings are affected by the category structure changes.
 */
class GetStoreCategoryUpdateStatusRequestType extends
 AbstractRequestType
{
	/**
	 * @var long | The task ID associated with the category structure change request. If the SetStoreCategories
	 * call is process synchronously, the task ID is 0. If the category structure changes affect
	 * many listings, the changes will be processed asynchronously and the task ID will be a positive
	 * number. Use the task ID with GetStoreCategoryUpdateStatus to monitor the status of asynchronously
	 * processed changes.
	 */
	public $taskid;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setTaskID($val)
	{
        $this->taskid = (int)$val;
	}
}

/**
 * GetStoreCategoryUpdateStatusResponseType
 * Returns the store category structure update status, when a prior SetStoreCategories call
 * was processed asynchronously. If a SetStoreCategories request affects many listings, then
 * the category structure changes will be processed asynchronously. If not many listings are
 * affected by category structure changes, the status is returned in the SetStoreCategories
 * response.
 */
class GetStoreCategoryUpdateStatusResponseType extends
 AbstractResponseType
{
	/**
	 * @var TaskStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @param TaskStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}
}

/**
 * GetStoreCustomPageRequestType
 * Retrieves the custom page or pages for the user's Store.
 */
class GetStoreCustomPageRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Unique identifier for the Store custom page. When you are using   SetStoreCustomPage, if
	 * you specify a valid PageID, the custom page  is updated. If you do not specify a PageID,
	 * the custom page is  added.
	 */
	public $pageid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PageID');
        }
        $this->pageid = (int)$val;
	}
}

/**
 * GetStoreCustomPageResponseType
 * Contains the custom page or pages for the user's Store.
 */
class GetStoreCustomPageResponseType extends
 AbstractResponseType
{
	/**
	 * @var StoreCustomPageArrayType | The custom page or custom pages.
	 */
	public $custompagearray;
	/**
	 * @param StoreCustomPageArrayType $val
	 * @throws Exception
	 */
	public function setCustomPageArray($val)
	{
        $this->custompagearray = (int)$val;
	}
}

/**
 * GetStoreOptionsRequestType
 * Retrieves the current list of Store configuration options.
 */
class GetStoreOptionsRequestType extends
 AbstractRequestType
{}

/**
 * GetStoreOptionsResponseType
 * Contains the current list of options for Store configurations.
 */
class GetStoreOptionsResponseType extends
 AbstractResponseType
{
	/**
	 * @var StoreThemeArrayType | The current set of basic themes. Each basic theme definition specifies a valid color scheme
	 * for the theme.
	 */
	public $basicthemearray;
	/**
	 * @var StoreThemeArrayType | The current set of advances themes. Unlike basic themes, you can use any colorscheme with
	 * an advanced theme. These themes are suitable for more advanced customization.
	 */
	public $advancedthemearray;
	/**
	 * @var StoreLogoArrayType | The current set of Store logos. These logos are used in the Store header.
	 */
	public $logoarray;
	/**
	 * @var StoreSubscriptionArrayType | The current set of eBay Store subscription tiers and corresponding subscription prices.
	 */
	public $subscriptionarray;
	/**
	 * @var int | Maximum quantity of matching categories to return at the first level of the
	 *  category hierarchy (CategoryLevel 1).
	 */
	public $maxcategories;
	/**
	 * @var int | The maximum number of category levels in this store.
	 */
	public $maxcategorylevels;
	/**
	 * @param StoreThemeArrayType $val
	 * @throws Exception
	 */
	public function setBasicThemeArray($val)
	{
        $this->basicthemearray = (int)$val;
	}

	/**
	 * @param StoreThemeArrayType $val
	 * @throws Exception
	 */
	public function setAdvancedThemeArray($val)
	{
        $this->advancedthemearray = (int)$val;
	}

	/**
	 * @param StoreLogoArrayType $val
	 * @throws Exception
	 */
	public function setLogoArray($val)
	{
        $this->logoarray = (int)$val;
	}

	/**
	 * @param StoreSubscriptionArrayType $val
	 * @throws Exception
	 */
	public function setSubscriptionArray($val)
	{
        $this->subscriptionarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxCategories($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxcategories = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxCategoryLevels($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxcategorylevels = (int)$val;
	}
}

/**
 * GetStorePreferencesRequestType
 * Retrieves a user's Store preferences.
 */
class GetStorePreferencesRequestType extends
 AbstractRequestType
{}

/**
 * GetStorePreferencesResponseType
 * Contains the Store preferences retrieved for a user.
 */
class GetStorePreferencesResponseType extends
 AbstractResponseType
{
	/**
	 * @var StorePreferencesType | Specifies the store preferences.
	 */
	public $storepreferences;
	/**
	 * @param StorePreferencesType $val
	 * @throws Exception
	 */
	public function setStorePreferences($val)
	{
        $this->storepreferences = (int)$val;
	}
}

/**
 * GetSuggestedCategoriesRequestType
 * Requests a list of up to 10 categories with the highest percentage of listings whose titles
 * or descriptions contain the keywords you specify.
 */
class GetSuggestedCategoriesRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}
}

/**
 * GetSuggestedCategoriesResponseType
 * Returns a list of categories with the highest number of listings whose titles or descriptions
 * contain the keywords specified in a GetSuggestedCategoriesRequest.
 */
class GetSuggestedCategoriesResponseType extends
 AbstractResponseType
{
	/**
	 * @var SuggestedCategoryArrayType | Contains the categories that contain listings that match the query string in the request.
	 * The array can have up to 10 categories. Not returned if no categories match the query in
	 * the request.
	 */
	public $suggestedcategoryarray;
	/**
	 * @var int | Indicates the number of categories in the array.
	 */
	public $categorycount;
	/**
	 * @param SuggestedCategoryArrayType $val
	 * @throws Exception
	 */
	public function setSuggestedCategoryArray($val)
	{
        $this->suggestedcategoryarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCategoryCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->categorycount = (int)$val;
	}
}

/**
 * GetTaxTableRequestType
 * Retrieves the tax table for a user on a given site or retrieves the valid jurisdictions
 * (if any) for a given site.
 */
class GetTaxTableRequestType extends
 AbstractRequestType
{}

/**
 * GetTaxTableResponseType
 * Response to GetTaxTableRequest.
 */
class GetTaxTableResponseType extends
 AbstractResponseType
{
	/**
	 * @var dateTime | The last time (in GMT) that the tax table was updated. Only returned if the user previously
	 * created a tax table and if the site has jurisdictions. LastUpdateTime is useful for synchronization.
	 * If you cache the user's tax table, you can use GetTaxTable to check if it has changed and whether
	 * you need to update the cached tax table.
	 */
	public $lastupdatetime;
	/**
	 * @var TaxTableType | Tax details for a jurisdiction such as a state or province. Returns empty in GetItem if
	 * no tax table was used. Not applicable to Half.com.
	 */
	public $taxtable;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastUpdateTime($val)
	{
        $this->lastupdatetime = (int)$val;
	}

	/**
	 * @param TaxTableType $val
	 * @throws Exception
	 */
	public function setTaxTable($val)
	{
        $this->taxtable = (int)$val;
	}
}

/**
 * GetUserRequestType
 * Retrieves information about a user. Input fields control what user data is returned. This
 * includes the eBay user ID for the user whose data is to be returned and the item ID for
 * a listing to indicate a transactional relationship between the requestor and the target
 * user.
 */
class GetUserRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var boolean | Indicates if the response should include detailed data relating to whether an item would
	 * qualify as an Express listing. For information about the Express-related data that can
	 * be returned when IncludeExpressRequirements is set to true, see the annotations for the
	 * output of VerifyAddItem and see the eBay Web Services Guide.
	 */
	public $includeexpressrequirements;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for UserID');
        }
        $this->userid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeExpressRequirements($val)
	{
        $this->includeexpressrequirements = (int)$val;
	}
}

/**
 * GetUserResponseType
 * Contains the data retrieved by the call. User data is returned in a User object.
 */
class GetUserResponseType extends
 AbstractResponseType
{
	/**
	 * @var UserType | Bidder information. See the schema documentation for UserType for details on its properties
	 * and their meanings.
	 */
	public $user;
	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setUser($val)
	{
        $this->user = (int)$val;
	}
}

/**
 * GetUserContactDetailsRequestType
 * Returns contact information for a specified user if a bidding relationship exists. The bidder
 * must be bidding on the seller's active item, or an eBay user must have made an offer on the
 * item using Best Offer. The item must be in the Motors or Business & Industrial categories. Bidders
 * can use this call to contact sellers of an item they are bidding on or have made an offer
 * on (through Best Offer). Note that this call does NOT return an email address. Sellers who
 * wish to send an email to bidders should use AddMemberMessagesAAQToBidder.
 */
class GetUserContactDetailsRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | An eBay ID that uniquely identifies a given user. The same as the contact's eBay username. Either
	 * the seller's or bidder's username may be specified here, as long as a bidding relationship
	 * exists between them. That is, the bidder must be bidding on the seller's active item, or
	 * an eBay user must have made an offer on the item via Best Offer.
	 */
	public $contactid;
	/**
	 * @var string | An eBay ID that uniquely identifies a given user. The same as the seller's eBay username. Either
	 * the seller's or bidder's username may be specified here, as long as a bidding relationship
	 * exists between them. That is, the bidder must be bidding on the seller's active item, or
	 * an eBay user must have made an offer on the item via Best Offer.
	 */
	public $requesterid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ItemID');
        }
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setContactID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ContactID');
        }
        $this->contactid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRequesterID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RequesterID');
        }
        $this->requesterid = (int)$val;
	}
}

/**
 * GetUserContactDetailsResponseType
 * Returns contact information to a seller for both bidders and users who have made offers
 * (via Best Offer) during an active listing.
 */
class GetUserContactDetailsResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var AddressType | Contact information for the requested contact. Note that the email address is NOT returned.
	 */
	public $contactaddress;
	/**
	 * @var dateTime | Indicates the date the specified user originally registered with eBay. <br><br> Starting
	 * Jan 2007, when a bidder's user info is made anonymous, this tag will be returned only for
	 * that bidder, and the seller of an item that the user is bidding on.
	 */
	public $registrationdate;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for UserID');
        }
        $this->userid = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setContactAddress($val)
	{
        $this->contactaddress = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setRegistrationDate($val)
	{
        $this->registrationdate = (int)$val;
	}
}

/**
 * GetUserDisputesRequestType
 * Requests a list of disputes the requester is involved in as buyer or seller. The list includes
 * both Unpaid Item and Item Not Received disputes and can be filtered according to DisputeFilterType.
 * Use a DetailLevel of ReturnAll to return all data about each dispute, including DisputeResolution
 * and DisputeMessage elements.
 */
class GetUserDisputesRequestType extends
 AbstractRequestType
{
	/**
	 * @var DisputeFilterTypeCodeType | A filter used to reduce the number of disputes returned. The filter uses criteria such
	 * as whether the dispute is awaiting a response, is closed, or is eligible for credit. Both
	 * Unpaid Item and Item Not Received disputes can be returned for the same filter value.
	 */
	public $disputefiltertype;
	/**
	 * @var DisputeSortTypeCodeType | The value and sequence to use to sort the returned disputes.
	 */
	public $disputesorttype;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is later than or equal to this
	 * value. Specify the time value in GMT. See the eBay Web Services documentation for information
	 * about specifying time values. For more precise control of the date range filter, it is
	 * a good practice to also specify ModTimeTo. Otherwise, the end of the date range is the
	 * present time. Filtering by date range is optional. You can use date range filters in combination with
	 * other filters like DisputeFilterType to control the amount of data returned.
	 */
	public $modtimefrom;
	/**
	 * @var dateTime | A filter that retrieves disputes whose DisputeModifiedTime is earlier than or equal to
	 * this value. Specify the time value in GMT. See the eBay Web Services documentation for
	 * information about specifying time values. For more precise control of the date range filter,
	 * it is a good practice to also specify ModTimeFrom. Otherwise, all available disputes modified
	 * prior to the ModTimeTo value are returned. Filtering by date range is optional. You can
	 * use date range filters in combination with other filters like DisputeFilterType to control
	 * the amount of data returned.
	 */
	public $modtimeto;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param DisputeFilterTypeCodeType $val
	 * @throws Exception
	 */
	public function setDisputeFilterType($val)
	{
        $this->disputefiltertype = (int)$val;
	}

	/**
	 * @param DisputeSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setDisputeSortType($val)
	{
        $this->disputesorttype = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeFrom($val)
	{
        $this->modtimefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTimeTo($val)
	{
        $this->modtimeto = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetUserDisputesResponseType
 * Returns a list of disputes that involve the calling user as buyer or seller, in response
 * to a GetUserDisputesRequest.
 */
class GetUserDisputesResponseType extends
 AbstractResponseType
{
	/**
	 * @var DisputeIDType | The index of the first dispute in the current result set, relative to the total number
	 * of disputes available. Primarily useful for interpreting paginated results. For example,
	 * if 228 disputes are available and 200 results are returned per page: The first page returns a
	 * StartingDisputeID value of 1 and the second page returns a StartingDisputeID value of 201.
	 */
	public $startingdisputeid;
	/**
	 * @var DisputeIDType | The index of the last dispute in the current result set, relative to the total number of
	 * disputes available. Primarily useful for interpreting paginated results. For example, if
	 * 228 disputes are available and 200 results are returned per page: The first page returns an
	 * EndingDisputeID value of 200 and the second page returns an EndingDisputeID value of 228.
	 */
	public $endingdisputeid;
	/**
	 * @var DisputeArrayType | The array of disputes returned.
	 */
	public $disputearray;
	/**
	 * @var int | Indicates the maximum number of Want It Now posts that can be returned in a WantItNowPostArray
	 * for a request. This value can be specified in the request by  EntriesPerPage in Pagination
	 * in the request.
	 */
	public $itemsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var DisputeFilterCountType | The number of disputes that involve the requester as buyer or seller and match a given
	 * filter type.
	 */
	public $disputefiltercount;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setStartingDisputeID($val)
	{
        $this->startingdisputeid = (int)$val;
	}

	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setEndingDisputeID($val)
	{
        $this->endingdisputeid = (int)$val;
	}

	/**
	 * @param DisputeArrayType $val
	 * @throws Exception
	 */
	public function setDisputeArray($val)
	{
        $this->disputearray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param DisputeFilterCountType $val
	 * @throws Exception
	 */
	public function setDisputeFilterCount($val)
	{
        $this->disputefiltercount = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}
}

/**
 * GetUserPreferencesRequestType
 * Retrieves some or all of a user's preferences. The set of preferences retrieved depends on
 * the set of flags specified in the request.
 */
class GetUserPreferencesRequestType extends
 AbstractRequestType
{
	/**
	 * @var boolean | If true, requests a seller's preferences for receiving bidder notices.
	 */
	public $showbiddernoticepreferences;
	/**
	 * @var boolean | If true, requests a seller's preferences for accepting payments that combine item purchases
	 * into one order.
	 */
	public $showcombinedpaymentpreferences;
	/**
	 * @var boolean | If true, requests a seller's cross-promotion preferences, such as whether cross-promotions
	 * are enabled and the sort filters used.
	 */
	public $showcrosspromotionpreferences;
	/**
	 * @var boolean | If true, displays a seller's payment preferences, for displaying a Pay Now button, accepting
	 * PayPal, and so on.
	 */
	public $showsellerpaymentpreferences;
	/**
	 * @var boolean | If true, displays the seller's end of auction email preferences.
	 */
	public $showendofauctionemailpreferences;
	/**
	 * @var boolean | If true, retrieves preferences the seller has set for displaying items on a buyer's favorite
	 * sellers page and in the favorite sellers email digest.
	 */
	public $showsellerfavoriteitempreferences;
	/**
	 * @var boolean | You do not need to specify a "Show" filter to retrieve the ExpressPreferences node. Regardless
	 * of the request version you specify, the ExpressPreferences node is always returned if the
	 * user is eligible for Express, and it is never returned if the user is not eligible. Express
	 * preferences are dependent on the user's site of registration, not the site to which you
	 * send the request.
	 */
	public $showebxoptinpreference;
	/**
	 * @var boolean | If true, returns ProStores checkout preferences.
	 */
	public $showprostorespreferences;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowBidderNoticePreferences($val)
	{
        $this->showbiddernoticepreferences = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowCombinedPaymentPreferences($val)
	{
        $this->showcombinedpaymentpreferences = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowCrossPromotionPreferences($val)
	{
        $this->showcrosspromotionpreferences = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowSellerPaymentPreferences($val)
	{
        $this->showsellerpaymentpreferences = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowEndOfAuctionEmailPreferences($val)
	{
        $this->showendofauctionemailpreferences = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowSellerFavoriteItemPreferences($val)
	{
        $this->showsellerfavoriteitempreferences = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShoweBxOptInPreference($val)
	{
        $this->showebxoptinpreference = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShowProStoresPreferences($val)
	{
        $this->showprostorespreferences = (int)$val;
	}
}

/**
 * GetUserPreferencesResponseType
 * Returns some or all of a user's preferences. The preferences are grouped in sets, according
 * to the sets requested.
 */
class GetUserPreferencesResponseType extends
 AbstractResponseType
{
	/**
	 * @var BidderNoticePreferencesType | The user's bidder notice preferences to be set.
	 */
	public $biddernoticepreferences;
	/**
	 * @var CombinedPaymentPreferencesType | The user's combined payment preferences to be set. When you change these preferences, it
	 * can take up to 7 days for the change to have any logical or functional effect on eBay.
	 * <br> <br> For the US and Germany sites, combined payment preferences can also affect whether
	 * a seller is eligible to list on Express. A seller needs to allow shoppers to pay by single,
	 * combined payments for their purchases. A seller is not eligible for Express if they don't
	 * allow combined payments. Once changes to these preferences take effect on eBay (within
	 * 7 days), it can take up to 7 more days for existing items to be added to or removed from
	 * Express. Thus, it can take up to 14 days (total) for combined payment preference changes
	 * to affect whether listings appear on Express. Also see ExpressPreferences.ExpressSellingPreferences.
	 */
	public $combinedpaymentpreferences;
	/**
	 * @var CrossPromotionPreferencesType | The user's cross promotion preferences to be set.
	 */
	public $crosspromotionpreferences;
	/**
	 * @var SellerPaymentPreferencesType | The user's seller payment preferences to be set.
	 */
	public $sellerpaymentpreferences;
	/**
	 * @var SellerFavoriteItemPreferencesType | Seller's favorite item preferences to be set.
	 */
	public $sellerfavoriteitempreferences;
	/**
	 * @var EndOfAuctionEmailPreferencesType | The seller's end of auction email preferences to be set.
	 */
	public $endofauctionemailpreferences;
	/**
	 * @var eBxOptInPreferenceType | If true: The seller wants their eligible eBay listings to be included on eBay Express (in
	 * addition to the main eBay site). If false: The seller does not want their listings to be
	 * included on eBay Express. If omitted (in SetUserPreferences): The seller does not want
	 * to change their existing preference. (Initially, eBay sets this preference to true for every
	 * seller.)
	 */
	public $ebxoptinpreference;
	/**
	 * @var ExpressPreferencesType | The seller's Express preferences. Currently used to indicate which of the seller's eligible
	 * listings to include on Express. You can only set these preferences for sellers who are
	 * eligible to list on Express. To determine the seller's eligibility, call GetUser and check
	 * the value of SellerInfo.ExpressEligible. Once you set Express preferences, you cannot set
	 * them again (e.g., to change the value) within 7 days. Also see CombinedPaymentPreferences,
	 * which affect a seller's eligibility to list on Express.
	 */
	public $expresspreferences;
	/**
	 * @var ProStoresCheckoutPreferenceType | Details about the checkout preferences related to the ProStores store. Returned only if
	 * set.
	 */
	public $prostorespreference;
	/**
	 * @param BidderNoticePreferencesType $val
	 * @throws Exception
	 */
	public function setBidderNoticePreferences($val)
	{
        $this->biddernoticepreferences = (int)$val;
	}

	/**
	 * @param CombinedPaymentPreferencesType $val
	 * @throws Exception
	 */
	public function setCombinedPaymentPreferences($val)
	{
        $this->combinedpaymentpreferences = (int)$val;
	}

	/**
	 * @param CrossPromotionPreferencesType $val
	 * @throws Exception
	 */
	public function setCrossPromotionPreferences($val)
	{
        $this->crosspromotionpreferences = (int)$val;
	}

	/**
	 * @param SellerPaymentPreferencesType $val
	 * @throws Exception
	 */
	public function setSellerPaymentPreferences($val)
	{
        $this->sellerpaymentpreferences = (int)$val;
	}

	/**
	 * @param SellerFavoriteItemPreferencesType $val
	 * @throws Exception
	 */
	public function setSellerFavoriteItemPreferences($val)
	{
        $this->sellerfavoriteitempreferences = (int)$val;
	}

	/**
	 * @param EndOfAuctionEmailPreferencesType $val
	 * @throws Exception
	 */
	public function setEndOfAuctionEmailPreferences($val)
	{
        $this->endofauctionemailpreferences = (int)$val;
	}

	/**
	 * @param eBxOptInPreferenceType $val
	 * @throws Exception
	 */
	public function setEBxOptInPreference($val)
	{
        $this->ebxoptinpreference = (int)$val;
	}

	/**
	 * @param ExpressPreferencesType $val
	 * @throws Exception
	 */
	public function setExpressPreferences($val)
	{
        $this->expresspreferences = (int)$val;
	}

	/**
	 * @param ProStoresCheckoutPreferenceType $val
	 * @throws Exception
	 */
	public function setProStoresPreference($val)
	{
        $this->prostorespreference = (int)$val;
	}
}

/**
 * GetVeROReasonCodeDetailsRequestType
 * Retrieves details for VeRO reason codes and their descriptions. You can specify a reason
 * code ID to get details for a specific reason on the site specified in the request header.
 * If ReasonCodeID is not passed in the request, all reason codes are returned. Set ReturnAllSites
 * to true to retrieve reason codes for all sites. You must be a member of the Verified Rights
 * Owner (VeRO) Program to use this call.
 */
class GetVeRoReasonCodeDetailsRequestType extends
 AbstractRequestType
{
	/**
	 * @var long | Unique identifier for a reason code. If this ReasonCodeID is passed then  only details
	 * of this ReasonCodeID will be returned. If no reason code is  specified, all reason codes
	 * are returned.
	 */
	public $reasoncodeid;
	/**
	 * @var boolean | Set to true to retrieve reason codes for all sites. If not specified,  reason codes are
	 * returned for the site specified in the request header  only.  If ReasonCodeID is specified,
	 * this parameter is ignored.
	 */
	public $returnallsites;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setReasonCodeID($val)
	{
        $this->reasoncodeid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReturnAllSites($val)
	{
        $this->returnallsites = (int)$val;
	}
}

/**
 * GetVeROReasonCodeDetailsResponseType
 * Contains the reason codes for all sites.
 */
class GetVeRoReasonCodeDetailsResponseType extends
 AbstractResponseType
{
	/**
	 * @var VeROReasonCodeDetailsType | Contains the list of the status codes for a site.
	 */
	public $veroreasoncodedetails;
	/**
	 * @param VeROReasonCodeDetailsType $val
	 * @throws Exception
	 */
	public function setVeROReasonCodeDetails($val)
	{
        $this->veroreasoncodedetails = (int)$val;
	}
}

/**
 * GetVeROReportStatusRequestType
 * Retrieves status information about VeRO reported items you have submitted. You can receive
 * the status of individual items you have reported or, by specifying VeROReportPacketID, you
 * can retrieve status for all items reported with a given VeROReportItems request. You can
 * also retrieve items that were reported during a given time period. If no input parameters
 * are specified, status is returned on all items you have reported in the last two years. You
 * must be a member of the Verified Rights Owner (VeRO) Program to use this call.
 */
class GetVeRoReportStatusRequestType extends
 AbstractRequestType
{
	/**
	 * @var long | A unique packet identifier for the items reported.
	 */
	public $veroreportpacketid;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var boolean | Set to true to return reported item details when you specify VeROReportPacketID in the
	 * request.
	 */
	public $includereporteditemdetails;
	/**
	 * @var dateTime | Limits returned items to only those that were submited on or after the date-time specified.
	 * If specified, TimeTo must also be specified. Express the date-time in the format YYYY-MM-DD
	 * HH:MM:SS, and in GMT. (For information on how to convert between your local time zone and
	 * GMT, see Time Values Note.) Applies to items reported with VeROReportItems or by other
	 * means (e.g., through the web flow). Infringement reporting data is maintained for two years
	 * after the date of submission. This field is ignored if VeROReportPacketID or ItemID is
	 * specified.
	 */
	public $timefrom;
	/**
	 * @var dateTime | Limits returned items to only those that were submited on or before the date-time specified.
	 * If specified, TimeFrom must also be specified. Express date-time in the format YYYY-MM-DD
	 * HH:MM:SS, and in GMT. (For information on how to convert between your local time zone and
	 * GMT, see Time Values Note.) Applies to items reported with VeROReportItems or by other
	 * means (e.g., through the web flow). Infringement reporting data is maintained for two years
	 * after the date of submission. This field is ignored if VeROReportPacketID or ItemID is
	 * specified.
	 */
	public $timeto;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setVeROReportPacketID($val)
	{
        $this->veroreportpacketid = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeReportedItemDetails($val)
	{
        $this->includereporteditemdetails = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setTimeFrom($val)
	{
        $this->timefrom = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setTimeTo($val)
	{
        $this->timeto = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetVeROReportStatusResponseType
 * Contains status information for items reported by the VeRO Program member.
 */
class GetVeRoReportStatusResponseType extends
 AbstractResponseType
{
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @var boolean | Indicates whether there are additional Want It Now posts that meet the search criteria.
	 */
	public $hasmoreitems;
	/**
	 * @var int | Indicates the maximum number of Want It Now posts that can be returned in a WantItNowPostArray
	 * for a request. This value can be specified in the request by  EntriesPerPage in Pagination
	 * in the request.
	 */
	public $itemsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var long | A unique packet identifier for the items reported.
	 */
	public $veroreportpacketid;
	/**
	 * @var VeROReportPacketStatusCodeType | The processing status of the packet.
	 */
	public $veroreportpacketstatus;
	/**
	 * @var VeROReportedItemDetailsType | Contains the list of the reported item details. Returns empty if no items are available
	 * that match the request.
	 */
	public $reporteditemdetails;
	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreItems($val)
	{
        $this->hasmoreitems = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setVeROReportPacketID($val)
	{
        $this->veroreportpacketid = (int)$val;
	}

	/**
	 * @param VeROReportPacketStatusCodeType $val
	 * @throws Exception
	 */
	public function setVeROReportPacketStatus($val)
	{
        $this->veroreportpacketstatus = (int)$val;
	}

	/**
	 * @param VeROReportedItemDetailsType $val
	 * @throws Exception
	 */
	public function setReportedItemDetails($val)
	{
        $this->reporteditemdetails = (int)$val;
	}
}

/**
 * GetWantItNowPostRequestType
 * Retrieves data for a specific, active Want It Now post identified by a post ID. The response
 * includes the following fields: CategoryID, Description, PostID, Site, StartTime, ResponseCount,
 * and Title. Although GetWantItNowSearchResults returns most of this information, only GetWantItNowPost
 * returns Description for a post.
 */
class GetWantItNowPostRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | ID that uniquely identifies a Want It Now post.
	 */
	public $postid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setPostID($val)
	{
        $this->postid = (int)$val;
	}
}

/**
 * GetWantItNowPostResponseType
 * Contains the Want It Now post data returned by the call. The data for the specified post
 * listing is returned in a WantItNowPostType object.
 */
class GetWantItNowPostResponseType extends
 AbstractResponseType
{
	/**
	 * @var WantItNowPostType | Contains data for a Want It Now post found by a search.
	 */
	public $wantitnowpost;
	/**
	 * @param WantItNowPostType $val
	 * @throws Exception
	 */
	public function setWantItNowPost($val)
	{
        $this->wantitnowpost = (int)$val;
	}
}

/**
 * GetWantItNowSearchResultsRequestType
 * Retrieves a list of active Want It Now posts that match specified keywords and/or a specific
 * category ID. The response contains the following data: CategoryID, PostID, StartTime, ResponseCount,
 * Site, and Title. To get the post description (Description), you must use GetWantItNowPost
 * to retrieve individual posts.
 */
class GetWantItNowSearchResultsRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @var boolean | If true, include the description field of Want It Now posts in the keyword search. Want It
	 * Now posts returned are those where specified search keywords appear in either the description
	 * or the title. This is the default behavior if SearchInDescription is not specified. If
	 * false, only the title will be searched. SearchInDescription is an optional input.
	 */
	public $searchindescription;
	/**
	 * @var boolean | If true, the search applies to all eBay sites. If false, the search is limited to the site
	 * specified in the URL query string when the call is made.
	 */
	public $searchworldwide;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSearchInDescription($val)
	{
        $this->searchindescription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSearchWorldwide($val)
	{
        $this->searchworldwide = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}
}

/**
 * GetWantItNowSearchResultsResponseType
 * Response contains the Want It Now posts that have the specified keyword(s) in the title
 * and (optionally) the description.
 */
class GetWantItNowSearchResultsResponseType extends
 AbstractResponseType
{
	/**
	 * @var WantItNowPostArrayType | Contains the returned Want It Now posts, if any. The data for each post is returned in
	 * a WantItNowPostType object.
	 */
	public $wantitnowpostarray;
	/**
	 * @var boolean | Indicates whether there are additional Want It Now posts that meet the search criteria.
	 */
	public $hasmoreitems;
	/**
	 * @var int | Indicates the maximum number of Want It Now posts that can be returned in a WantItNowPostArray
	 * for a request. This value can be specified in the request by  EntriesPerPage in Pagination
	 * in the request.
	 */
	public $itemsperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @param WantItNowPostArrayType $val
	 * @throws Exception
	 */
	public function setWantItNowPostArray($val)
	{
        $this->wantitnowpostarray = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreItems($val)
	{
        $this->hasmoreitems = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemsPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemsperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}
}

/**
 * GeteBayDetailsRequestType
 * Retrieves eBay IDs and codes (e.g., site IDs and shipping service codes), enumerated data
 * (e.g., payment methods), and other common eBay meta-data. This call enables you to keep
 * certain data up to date in your applications without referring to the schema, the documentation,
 * or the eBay online help. Other data is returned for your reference, but you may need to
 * refer to the schema or the documentation for information about valid values and usage. <br><br>
 * In some cases, the data returned in the response will vary according to the site that you
 * use for the request.
 */
class GeteBayDetailsRequestType extends
 AbstractRequestType
{
	/**
	 * @var DetailNameCodeType | A designation of what kind of information you wish returned for the specified eBay site.
	 * If omitted, all details are returned. The possible values for input (the enumeration values
	 * of DetailNameCodeType) are the same name as fields returned by the response. See the documentation
	 * for the GeteBayDetails response to better understand the DetailName options.
	 */
	public $detailname;
	/**
	 * @param DetailNameCodeType $val
	 * @throws Exception
	 */
	public function setDetailName($val)
	{
        $this->detailname = (int)$val;
	}
}

/**
 * GeteBayDetailsResponseType
 * Details about a specified site in response to GeteBayDetailsRequest. If no DetailName is
 * identified in the request, all elements of GeteBayDetailsResponse are returned. Otherwise,
 * only the element corresponding to the specified DetailName is returned.
 */
class GeteBayDetailsResponseType extends
 AbstractResponseType
{
	/**
	 * @var CountryDetailsType | Details about a specific country. GeteBayDetails returns all countries in the system, regardless
	 * of the site to which you sent the request.
	 */
	public $countrydetails;
	/**
	 * @var CurrencyDetailsType | Details about a specific currency that can be used for listing on an eBay site. GeteBayDetails
	 * returns all site currencies in the system, regardless of the site to which you sent the
	 * request.
	 */
	public $currencydetails;
	/**
	 * @var DispatchTimeMaxDetailsType | Details about a specific max dispatch time. A dispatch time specifies the maximum number
	 * of business days a seller commits to for shipping an item to domestic buyers after receiving
	 * a cleared payment. GeteBayDetails returns all dispatch times in the system, regardless
	 * of the site to which you sent the request.
	 */
	public $dispatchtimemaxdetails;
	/**
	 * @var PaymentOptionDetailsType | Details about a specific buyer payment method. GeteBayDetails only returns payment methods
	 * that are applicable to the site to which you sent the request.
	 */
	public $paymentoptiondetails;
	/**
	 * @var RegionDetailsType | Details about a specific geographical region. GeteBayDetails only returns regions that
	 * are applicable to the site to which you sent the request. However, you should ignore region
	 * values for all sites except China.
	 */
	public $regiondetails;
	/**
	 * @var ShippingLocationDetailsType | Details about a location or region to which the seller is willing to ship. GeteBayDetails
	 * returns all shipping locations in the system, regardless of the site to which you sent
	 * the request.
	 */
	public $shippinglocationdetails;
	/**
	 * @var ShippingServiceDetailsType | Details about a specific shipping service. GeteBayDetails only returns shipping services
	 * that are applicable to the site to which you sent the request.
	 */
	public $shippingservicedetails;
	/**
	 * @var SiteDetailsType | Details about a specific eBay site. GeteBayDetails returns all sites in the system, regardless
	 * of the site to which you sent the request.
	 */
	public $sitedetails;
	/**
	 * @var TaxJurisdictionType | Sales tax details for zero or more jurisdictions (states, provinces, etc). For GetTaxTable,
	 * if DetailLevel is not specified, information is only returned for the jurisdictions for
	 * which the user provided tax information. If DetailLevel is ReturnAll, tax information is
	 * returned for all possible jurisdictions, whether specified by the user or not. ShippingIncludedInTax
	 * and SalesTaxPercent are returned but are empty.
	 */
	public $taxjurisdiction;
	/**
	 * @var URLDetailsType | Details about a specific eBay URL. GeteBayDetails only returns URLs that are applicable
	 * to the site to which you sent the request.
	 */
	public $urldetails;
	/**
	 * @param CountryDetailsType $val
	 * @throws Exception
	 */
	public function setCountryDetails($val)
	{
        $this->countrydetails = (int)$val;
	}

	/**
	 * @param CurrencyDetailsType $val
	 * @throws Exception
	 */
	public function setCurrencyDetails($val)
	{
        $this->currencydetails = (int)$val;
	}

	/**
	 * @param DispatchTimeMaxDetailsType $val
	 * @throws Exception
	 */
	public function setDispatchTimeMaxDetails($val)
	{
        $this->dispatchtimemaxdetails = (int)$val;
	}

	/**
	 * @param PaymentOptionDetailsType $val
	 * @throws Exception
	 */
	public function setPaymentOptionDetails($val)
	{
        $this->paymentoptiondetails = (int)$val;
	}

	/**
	 * @param RegionDetailsType $val
	 * @throws Exception
	 */
	public function setRegionDetails($val)
	{
        $this->regiondetails = (int)$val;
	}

	/**
	 * @param ShippingLocationDetailsType $val
	 * @throws Exception
	 */
	public function setShippingLocationDetails($val)
	{
        $this->shippinglocationdetails = (int)$val;
	}

	/**
	 * @param ShippingServiceDetailsType $val
	 * @throws Exception
	 */
	public function setShippingServiceDetails($val)
	{
        $this->shippingservicedetails = (int)$val;
	}

	/**
	 * @param SiteDetailsType $val
	 * @throws Exception
	 */
	public function setSiteDetails($val)
	{
        $this->sitedetails = (int)$val;
	}

	/**
	 * @param TaxJurisdictionType $val
	 * @throws Exception
	 */
	public function setTaxJurisdiction($val)
	{
        $this->taxjurisdiction = (int)$val;
	}

	/**
	 * @param URLDetailsType $val
	 * @throws Exception
	 */
	public function setURLDetails($val)
	{
        $this->urldetails = (int)$val;
	}
}

/**
 * GeteBayOfficialTimeRequestType
 * Gets the official eBay system time in GMT.
 */
class GeteBayOfficialTimeRequestType extends
 AbstractRequestType
{}

/**
 * GeteBayOfficialTimeResponseType
 * The Timestamp field indicates the official eBay system time in GMT. For information about
 * converting between GMT and other time zones, see "Time Values" in the Data Types appendix
 * in the eBay Web Services guide.
 */
class GeteBayOfficialTimeResponseType extends
 AbstractResponseType
{}

/**
 * IssueRefundRequestType
 * Issues a refund for a single Half.com transaction. This can only be called by a seller.
 * A refund may only be issued for a specific transaction. Sellers do not have the ability
 * to issue a general refund (a refund not tied to a transaction) to a buyer.
 */
class IssueRefundRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var RefundReasonCodeType | Explanation of the reason that the refund is being issued.
	 */
	public $refundreason;
	/**
	 * @var RefundTypeCodeType | Explanation of the costs that the refund amount covers.
	 */
	public $refundtype;
	/**
	 * @var AmountType | The amount the seller wants to refund to the buyer, in US Dollars (USD). Must be greater
	 * than 0.00. Half.com allows a maximum of the original item sale price (transaction price
	 * plus original shipping reimbursement) plus return shipping costs (the amount the buyer
	 * paid to return the item). Typically, the return shipping cost is based on the current cost
	 * of shipping the individual item (not the discounted cost calculated during the original
	 * checkout for a multi-item order). You can also issue a partial refund for the amount you
	 * want the buyer to receive. If RefundType=Full or RefundType=FullPlusShipping and you do
	 * not pass RefundAmount in the request, Half.com will calculate the refund amount for you.
	 * If you pass RefundAmount in the request, the amount you specify will override Half.com's
	 * calculated value. Required if RefundType= CustomOrPartial.
	 */
	public $refundamount;
	/**
	 * @var string | Note to the buyer. Cannot include HTML.
	 */
	public $refundmessage;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param RefundReasonCodeType $val
	 * @throws Exception
	 */
	public function setRefundReason($val)
	{
        $this->refundreason = (int)$val;
	}

	/**
	 * @param RefundTypeCodeType $val
	 * @throws Exception
	 */
	public function setRefundType($val)
	{
        $this->refundtype = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setRefundAmount($val)
	{
        $this->refundamount = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRefundMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RefundMessage');
        }
        $this->refundmessage = (int)$val;
	}
}

/**
 * IssueRefundResponseType
 * Indicates the refund amount that a seller issued to a buyer for a single Half.com transaction. Refunds
 * may only be issued for a specific transaction. Sellers do not have the ability to issue
 * a general refund (not tied to a transaction) to a buyer.
 */
class IssueRefundResponseType extends
 AbstractResponseType
{
	/**
	 * @var AmountType | Total amount refunded by the seller for this transaction. Applicable to Half.com (for GetOrders).
	 */
	public $refundfromseller;
	/**
	 * @var AmountType | Total amount refunded to the buyer for this transaction. Applicable to Half.com (for GetOrders).
	 */
	public $totalrefundtobuyer;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setRefundFromSeller($val)
	{
        $this->refundfromseller = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalRefundToBuyer($val)
	{
        $this->totalrefundtobuyer = (int)$val;
	}
}

/**
 * LeaveFeedbackRequestType
 * Enables a user to leave feedback about another user. Both users (the sender  and the recipient)
 * must have a transactional relationship. That is, they must have both been participants in
 * a successfully concluded item sale transaction that took place no more than 90 days prior.
 * Also, the sending user cannot have already left feedback for the recipient for the transaction.
 */
class LeaveFeedbackRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Textual comment that explains, clarifies, or justifies the feedback rating specified in
	 * CommentType. Still displayed if feedback is withdrawn.
	 */
	public $commenttext;
	/**
	 * @var CommentTypeCodeType | Rating of the feedback being left (e.g., Positive).
	 */
	public $commenttype;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var UserIDType | Recipient user for whom the feedback is being left.
	 */
	public $targetuser;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCommentText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CommentText');
        }
        $this->commenttext = (int)$val;
	}

	/**
	 * @param CommentTypeCodeType $val
	 * @throws Exception
	 */
	public function setCommentType($val)
	{
        $this->commenttype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setTargetUser($val)
	{
        $this->targetuser = (int)$val;
	}
}

/**
 * LeaveFeedbackResponseType
 * LeaveFeedback response message includes an acknowledgement if the          feedback was
 * successfully left.
 */
class LeaveFeedbackResponseType extends
 AbstractResponseType
{
	/**
	 * @var string | Unique identifier for the feedback entry. Returned for a detail level of ReturnAll (if
	 * the parent is returned).
	 */
	public $feedbackid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFeedbackID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FeedbackID');
        }
        $this->feedbackid = (int)$val;
	}
}

/**
 * PlaceOfferRequestType
 * Enables the requesting user to submit a bid (make an offer) on the item listing specified
 * in ItemID. For competitive-bidding listings (Chinese and Dutch auctions), makes a bid. For
 * fixed-price listings (Basic Fixed-Price and eBay Stores Inventory listings), purchases the
 * item. <br><br> This is available for use by authorized third parties and for evaluation
 * by all. For information on becoming authorized for PlaceOffer (including testing PlaceOffer
 * in the Sandbox), contact Developer Relations, developer-relations@ebay.com.
 */
class PlaceOfferRequestType extends
 AbstractRequestType
{
	/**
	 * @var OfferType | Contains the data for one offer. This includes: data for the user making the
	 *  offer, the amount of the offer, the quantity of items being bought from the
	 *  listing, the type of offer being made, and more.
	 */
	public $offer;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var boolean | If a warning message exists and BlockOnWarning is true, the warning message is returned
	 * and the bid is blocked. If no warning message exists and BlockOnWarning is true, the bid
	 * is placed. If BlockOnWarning is false, the bid is placed, regardless of warning.
	 */
	public $blockonwarning;
	/**
	 * @param OfferType $val
	 * @throws Exception
	 */
	public function setOffer($val)
	{
        $this->offer = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBlockOnWarning($val)
	{
        $this->blockonwarning = (int)$val;
	}
}

/**
 * PlaceOfferResponseType
 * The PlaceOffer result set provides feedback on the success and result of the offer made.
 */
class PlaceOfferResponseType extends
 AbstractResponseType
{
	/**
	 * @var SellingStatusType | Various details about the current status of the listing, such as the current number of
	 * bids and the current high bidder. Not applicable to Half.com.<br> <br> For GetSearchResultsExpress,
	 * this is always returned when ItemArray.Item is returned.
	 */
	public $sellingstatus;
	/**
	 * @param SellingStatusType $val
	 * @throws Exception
	 */
	public function setSellingStatus($val)
	{
        $this->sellingstatus = (int)$val;
	}
}

/**
 * RelistItemRequestType
 * Enables a seller to take a single item (or a single multi-item listing) that ended without
 * bidders or buyers and re-list it on a specified eBay site. The listing may be re-listed
 * with the same item properties as the original or the seller may change a number of the item's
 * defining properties at re-listing time. The new listing will have a different item ID than
 * the original one. RelistItem re-lists a single item (or a single multi-item listing) that
 * has already ended. To re-list multiple items (multiple listings) that have ended, execute
 * RelistItem once for each ended listing.
 */
class RelistItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var ModifiedFieldType | Applicable when the ListingFlow is ReviseItem or RelistItem. Array of item properties that
	 * are being changed. In release 439 and later, ModifiedFields is no longer required to revise field
	 * values, but it is still supported for backward compatibility. See the Developer's Guide
	 * for rules on adding, modifying, and removing values when revising or relisting items.
	 */
	public $modifiedfields;
	/**
	 * @var string | Specifies the name of the field to remove from a listing. Applicable when the ListingFlow
	 * is ReviseItem or RelistItem. See the Developer's Guide for rules on removing values when
	 * revising or relisting items. DeletedField accepts the following values for removing fields:
	 * item.pictureDetails.pictureURL, item.pictureDetails.galleryURL, item.listingDesigner.themeID,
	 * item.listingDesigner.layoutID, item.payPalEmailAddress, item.proximitySearchDetails.postalCode, item.shippingDetails.paymentInstructions,
	 * and item.SKU. When the ListingFlow is RelistItem, the following values for DeletedField
	 * are also allowed: item.charity, item.secondaryCategory, and item.subTitle. DeletedField
	 * is case sensitive. The request can contain zero, one, or many instances of DeletedField.
	 */
	public $deletedfield;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param ModifiedFieldType $val
	 * @throws Exception
	 */
	public function setModifiedFields($val)
	{
        $this->modifiedfields = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDeletedField($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DeletedField');
        }
        $this->deletedfield = (int)$val;
	}
}

/**
 * RelistItemResponseType
 * Returns the item ID and the estimated fees for the re-listed listing.
 */
class RelistItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | ID of the secondary category in which the item would be listed. Only returned if you set
	 * Item.CategoryMappingAllowed to true in the request and the ID you passed in SecondaryCategory
	 * was mapped to a new ID by eBay. If the secondary category has not changed or it has expired
	 * with no replacement, Category2ID does not return a value.
	 */
	public $category2id;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategory2ID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Category2ID');
        }
        $this->category2id = (int)$val;
	}
}

/**
 * RemoveFromWatchListRequestType
 * Enables a user to remove item from his or her My eBay watch list.
 */
class RemoveFromWatchListRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var boolean | If true, then all the items in the user's watch list are removed. Either ItemID or RemoveAllItems
	 * must be specified, but NOT both.
	 */
	public $removeallitems;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRemoveAllItems($val)
	{
        $this->removeallitems = (int)$val;
	}
}

/**
 * RemoveFromWatchListResponseType
 * Returns information about the user's My eBay watch list.
 */
class RemoveFromWatchListResponseType extends
 AbstractResponseType
{
	/**
	 * @var int | (out) The current number of items in the user's watch list (after those specified in the
	 * call request have been removed)
	 */
	public $watchlistcount;
	/**
	 * @var int | (out) The maximum number of items allowed in watch lists. Currently this value is the same for
	 * all sites and all users.
	 */
	public $watchlistmaximum;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWatchListCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->watchlistcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWatchListMaximum($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->watchlistmaximum = (int)$val;
	}
}

/**
 * RespondToBestOfferRequestType
 * Enables the seller of a Best Offer item to accept, decline, or counter offers made by bidders.
 * Best offers can be declined in bulk, using the same message from the seller to the bidders
 * of all rejected offers.
 */
class RespondToBestOfferRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var BestOfferIDType | An id to distinguish this best offer from other best offers made on the item.
	 */
	public $bestofferid;
	/**
	 * @var BestOfferActionCodeType | Indicates the type of offer being made on the specified listing. Valid values are enumerated
	 * in the BidActionCodeType code list.
	 */
	public $action;
	/**
	 * @var string | A comment from the seller to the buyer.
	 */
	public $sellerresponse;
	/**
	 * @var AmountType | The counter offer price. When Action is set to Counter, you must specify the amount for
	 * the counteroffer with CounterOfferPrice. The value of CounterOfferPrice cannot exceed the
	 * Buy It Now price for a single quantity item. The value of CounterOfferPrice may exceed
	 * the Buy It Now price if the value for CounterOfferQuantity is greater than 1.
	 */
	public $counterofferprice;
	/**
	 * @var int | The counter offer quantity. When Action is set to Counter you must specify the quantity
	 * of items for the counteroffer with CounterOfferQuantity.
	 */
	public $counterofferquantity;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param BestOfferIDType $val
	 * @throws Exception
	 */
	public function setBestOfferID($val)
	{
        $this->bestofferid = (int)$val;
	}

	/**
	 * @param BestOfferActionCodeType $val
	 * @throws Exception
	 */
	public function setAction($val)
	{
        $this->action = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerResponse($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerResponse');
        }
        $this->sellerresponse = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setCounterOfferPrice($val)
	{
        $this->counterofferprice = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCounterOfferQuantity($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->counterofferquantity = (int)$val;
	}
}

/**
 * RespondToBestOfferResponseType
 * Contains a list of BestOffers that were either accepted or declined.
 */
class RespondToBestOfferResponseType extends
 AbstractResponseType
{
	/**
	 * @var BestOfferArrayType | A list of BestOffers that were either accepted or declined.
	 */
	public $respondtobestoffer;
	/**
	 * @param BestOfferArrayType $val
	 * @throws Exception
	 */
	public function setRespondToBestOffer($val)
	{
        $this->respondtobestoffer = (int)$val;
	}
}

/**
 * RespondToFeedbackRequestType
 * Enables users to reply to feedback left by the other party in the transaction and/or follow
 * up on the feedback left for the other party.
 */
class RespondToFeedbackRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Unique identifier for the feedback entry. Returned for a detail level of ReturnAll (if
	 * the parent is returned).
	 */
	public $feedbackid;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var UserIDType | User who left the feedback that is being replied to or followed up on.
	 */
	public $targetuserid;
	/**
	 * @var FeedbackResponseCodeType | Specifies whether the response is a reply or a follow-up.
	 */
	public $responsetype;
	/**
	 * @var string | Textual comment that the user who is subject of feedback may leave in response or rebuttal
	 * to the feedback. Alternatively, when the  ResponseType is FollowUp, this value contains
	 * the text of the follow-up comment. Max length is 125 for the Taiwan site.
	 */
	public $responsetext;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFeedbackID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FeedbackID');
        }
        $this->feedbackid = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setTargetUserID($val)
	{
        $this->targetuserid = (int)$val;
	}

	/**
	 * @param FeedbackResponseCodeType $val
	 * @throws Exception
	 */
	public function setResponseType($val)
	{
        $this->responsetype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setResponseText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ResponseText');
        }
        $this->responsetext = (int)$val;
	}
}

/**
 * RespondToFeedbackResponseType
 * Indicates the success or failure of the attempt to reply to feedback that has been left
 * for a user, or to post a follow-up comment to a feedback comment a user has left for someone
 * else.
 */
class RespondToFeedbackResponseType extends
 AbstractResponseType
{}

/**
 * RespondToWantItNowPostRequestType
 * Enables a seller to respond to a Want It Now post with an item listed on the eBay site.
 * Responses appear on the Want It Now post page, with the item title, the price of the item,
 * the number of bids on the item, and the time left before the listing ends. If the item has
 * a picture, the picture is also included on the Want It Now post page.
 */
class RespondToWantItNowPostRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var ItemIDType | ID that uniquely identifies a Want It Now post.
	 */
	public $postid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setPostID($val)
	{
        $this->postid = (int)$val;
	}
}

/**
 * RespondToWantItNowPostResponseType
 * Indicates the success or failure of the attempt to respond to a Want It Now post.
 */
class RespondToWantItNowPostResponseType extends
 AbstractResponseType
{}

/**
 * ReviseCheckoutStatusRequestType
 * Enables a seller to update the payment status of an item.
 */
class ReviseCheckoutStatusRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var string | ID of the Half.com order associated with the payment. Returns 0 for single-transaction
	 * orders.
	 */
	public $orderid;
	/**
	 * @var AmountType | The amount the buyer paid for the item(s) in the transaction. If the seller allowed the
	 * buyer to change the item total, the buyer is able to change the total until the time that
	 * the transaction's status moves to Complete. Determine whether the buyer changed the amount
	 * by retrieving the transaction data and comparing the AmountPaid value to what the seller
	 * expected. For combined payment (the transaction is part of an order), GetSellerTransactions
	 * and GetItemTransactions return the amount paid for the order to which the transaction belongs. For
	 * Motors items, AmountPaid is the amount paid by the buyer for the deposit. Not applicable
	 * to Half.com.
	 */
	public $amountpaid;
	/**
	 * @var BuyerPaymentMethodCodeType | Payment method the buyer selected for paying the seller for the transaction. If checkout
	 * is not yet complete, PaymentMethodUsed is set to whatever the buyer selected as his or
	 * her preference on the Review Your Purchase page.
	 */
	public $paymentmethodused;
	/**
	 * @var CompleteStatusCodeType | Indicates the current status of the checkout process for the transaction.
	 */
	public $checkoutstatus;
	/**
	 * @var token | A domestic shipping service offered for shipping the item (for example, UPS Ground). For
	 * a list of valid values that you can cache for future use, call GeteBayDetails with DetailName
	 * set to ShippingServiceDetails. For flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders).
	 */
	public $shippingservice;
	/**
	 * @var boolean | Whether shipping costs are to be part of the base amount that is taxed. GetTaxTable: This
	 * tag is empty if the user did not previously provide information.
	 */
	public $shippingincludedintax;
	/**
	 * @var CheckoutMethodCodeType | Not supported.
	 */
	public $checkoutmethod;
	/**
	 * @var InsuranceSelectedCodeType | The insurance option selected by the buyer.
	 */
	public $insurancetype;
	/**
	 * @var RCSPaymentStatusCodeType | Not supported.
	 */
	public $paymentstatus;
	/**
	 * @var AmountType | Adjustment amount entered by the buyer. A positive amount indicates the amount is an extra
	 * charge being paid to the seller by the buyer. A negative value indicates this amount is
	 * a credit given to the buyer by the seller. Not applicable to Half.com.
	 */
	public $adjustmentamount;
	/**
	 * @var AddressType | The address to which the item is to be shipped.
	 */
	public $shippingaddress;
	/**
	 * @var string | eBay ID for the buyer in the transaction being revised. A transaction is uniquely identified
	 * by one of two means: (a) You provide a TransactionID and ItemID. (This is the preferred
	 * approach.), OR, (b) You provide a BuyerID and ItemID and eBay identifies only one transaction
	 * for that combination (an error is returned if there are multiple transactions for that
	 * combination). Note: If all three are provided (that is, BuyerID, ItemID and TransactionID),
	 * BuyerID is ignored.
	 */
	public $buyerid;
	/**
	 * @var AmountType | The insurance cost associated with shipping a single item with this shipping service. Exception:
	 * for GetItemShipping, this is proportional to QuantitySold. If the item has not yet been sold,
	 * insurance information cannot be calculated and the value is 0.00. For calculated shipping
	 * only. Also applicable to Half.com (for GetOrders).
	 */
	public $shippinginsurancecost;
	/**
	 * @var AmountType | Sales tax details. US site only. Flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders). If your application normally calculates sales tax without using eBay's
	 * tax tables, you should understand how purchases via eBay Express will affect the way you
	 * process payments. For general information about listings on eBay Express, see the eBay
	 * Web Services Guide links below. Not applicable to eBay Motors vehicle listings.
	 */
	public $salestax;
	/**
	 * @var AmountType | Amount of money paid for shipping. For Third-party Checkout applications.
	 */
	public $shippingcost;
	/**
	 * @var string | Not supported.
	 */
	public $encryptedid;
	/**
	 * @var ExternalTransactionType | A PayPal transaction that relates to this eBay transaction. Returned only if there is at
	 * least one PayPal transaction related to this eBay transaction. Not applicable to Half.com.
	 */
	public $externaltransaction;
	/**
	 * @var string | Not supported.
	 */
	public $multiplesellerpaymentid;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setOrderID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for OrderID');
        }
        $this->orderid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountPaid($val)
	{
        $this->amountpaid = (int)$val;
	}

	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethodUsed($val)
	{
        $this->paymentmethodused = (int)$val;
	}

	/**
	 * @param CompleteStatusCodeType $val
	 * @throws Exception
	 */
	public function setCheckoutStatus($val)
	{
        $this->checkoutstatus = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setShippingService($val)
	{
        $this->shippingservice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingIncludedInTax($val)
	{
        $this->shippingincludedintax = (int)$val;
	}

	/**
	 * @param CheckoutMethodCodeType $val
	 * @throws Exception
	 */
	public function setCheckoutMethod($val)
	{
        $this->checkoutmethod = (int)$val;
	}

	/**
	 * @param InsuranceSelectedCodeType $val
	 * @throws Exception
	 */
	public function setInsuranceType($val)
	{
        $this->insurancetype = (int)$val;
	}

	/**
	 * @param RCSPaymentStatusCodeType $val
	 * @throws Exception
	 */
	public function setPaymentStatus($val)
	{
        $this->paymentstatus = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAdjustmentAmount($val)
	{
        $this->adjustmentamount = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setShippingAddress($val)
	{
        $this->shippingaddress = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBuyerID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BuyerID');
        }
        $this->buyerid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingInsuranceCost($val)
	{
        $this->shippinginsurancecost = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setSalesTax($val)
	{
        $this->salestax = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingCost($val)
	{
        $this->shippingcost = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEncryptedID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for EncryptedID');
        }
        $this->encryptedid = (int)$val;
	}

	/**
	 * @param ExternalTransactionType $val
	 * @throws Exception
	 */
	public function setExternalTransaction($val)
	{
        $this->externaltransaction = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMultipleSellerPaymentID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MultipleSellerPaymentID');
        }
        $this->multiplesellerpaymentid = (int)$val;
	}
}

/**
 * ReviseCheckoutStatusResponseType
 * Indicates success or failure of the attempt to revise the listing's checkout status.
 */
class ReviseCheckoutStatusResponseType extends
 AbstractResponseType
{}

/**
 * ReviseItemRequestType
 * Enables a seller to change the properties of a currently active listing. Inputs are the
 * item ID of the ended item being re-listed and any properties that are being changed for
 * the revision.
 */
class ReviseItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var ModifiedFieldType | Applicable when the ListingFlow is ReviseItem or RelistItem. Array of item properties that
	 * are being changed. In release 439 and later, ModifiedFields is no longer required to revise field
	 * values, but it is still supported for backward compatibility. See the Developer's Guide
	 * for rules on adding, modifying, and removing values when revising or relisting items.
	 */
	public $modifiedfields;
	/**
	 * @var string | Specifies the name of the field to remove from a listing. Applicable when the ListingFlow
	 * is ReviseItem or RelistItem. See the Developer's Guide for rules on removing values when
	 * revising or relisting items. DeletedField accepts the following values for removing fields:
	 * item.pictureDetails.pictureURL, item.pictureDetails.galleryURL, item.listingDesigner.themeID,
	 * item.listingDesigner.layoutID, item.payPalEmailAddress, item.proximitySearchDetails.postalCode, item.shippingDetails.paymentInstructions,
	 * and item.SKU. When the ListingFlow is RelistItem, the following values for DeletedField
	 * are also allowed: item.charity, item.secondaryCategory, and item.subTitle. DeletedField
	 * is case sensitive. The request can contain zero, one, or many instances of DeletedField.
	 */
	public $deletedfield;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param ModifiedFieldType $val
	 * @throws Exception
	 */
	public function setModifiedFields($val)
	{
        $this->modifiedfields = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDeletedField($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DeletedField');
        }
        $this->deletedfield = (int)$val;
	}
}

/**
 * ReviseItemResponseType
 * Returns the item ID and the estimated fees for the revised listing.
 */
class ReviseItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | ID of the secondary category in which the item would be listed. Only returned if you set
	 * Item.CategoryMappingAllowed to true in the request and the ID you passed in SecondaryCategory
	 * was mapped to a new ID by eBay. If the secondary category has not changed or it has expired
	 * with no replacement, Category2ID does not return a value.
	 */
	public $category2id;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}

	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategory2ID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Category2ID');
        }
        $this->category2id = (int)$val;
	}
}

/**
 * ReviseLiveAuctionItemRequestType
 * Enables a seller to make changes to the definition of an active item listing that listed
 * for the Live Auction.
 */
class ReviseLiveAuctionItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var ModifiedFieldType | Applicable when the ListingFlow is ReviseItem or RelistItem. Array of item properties that
	 * are being changed. In release 439 and later, ModifiedFields is no longer required to revise field
	 * values, but it is still supported for backward compatibility. See the Developer's Guide
	 * for rules on adding, modifying, and removing values when revising or relisting items.
	 */
	public $modifiedfields;
	/**
	 * @var string | Specifies the name of the field to remove from a listing. Applicable when the ListingFlow
	 * is ReviseItem or RelistItem. See the Developer's Guide for rules on removing values when
	 * revising or relisting items. DeletedField accepts the following values for removing fields:
	 * item.pictureDetails.pictureURL, item.pictureDetails.galleryURL, item.listingDesigner.themeID,
	 * item.listingDesigner.layoutID, item.payPalEmailAddress, item.proximitySearchDetails.postalCode, item.shippingDetails.paymentInstructions,
	 * and item.SKU. When the ListingFlow is RelistItem, the following values for DeletedField
	 * are also allowed: item.charity, item.secondaryCategory, and item.subTitle. DeletedField
	 * is case sensitive. The request can contain zero, one, or many instances of DeletedField.
	 */
	public $deletedfield;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param ModifiedFieldType $val
	 * @throws Exception
	 */
	public function setModifiedFields($val)
	{
        $this->modifiedfields = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDeletedField($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DeletedField');
        }
        $this->deletedfield = (int)$val;
	}
}

/**
 * ReviseLiveAuctionItemResponseType
 * Returns the item ID and the estimated fees for the revised listing.
 */
class ReviseLiveAuctionItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | ID of the secondary category in which the item would be listed. Only returned if you set
	 * Item.CategoryMappingAllowed to true in the request and the ID you passed in SecondaryCategory
	 * was mapped to a new ID by eBay. If the secondary category has not changed or it has expired
	 * with no replacement, Category2ID does not return a value.
	 */
	public $category2id;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategory2ID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Category2ID');
        }
        $this->category2id = (int)$val;
	}
}

/**
 * ReviseMyMessagesRequestType
 * Sets the read state for messages and alerts, the flagged state of messages, and moves alerts
 * and messages into and out of folders.
 */
class ReviseMyMessagesRequestType extends
 AbstractRequestType
{
	/**
	 * @var MyMessagesMessageIDArrayType | Contains a list of up to 10 MessageID values. <br /><br /> Either AlertIDs, MessageIDs,
	 * or both must be included in the request. Messages in the Sent box cannot be moved, marked
	 * as Read, or Flagged.
	 */
	public $messageids;
	/**
	 * @var MyMessagesAlertIDArrayType | Contains a list of up to 10 AlertID values. <br /><br /> Either AlertIDs, MessageIDs, or
	 * both must be included in the request. Alerts cannot be flagged. Alerts cannot be moved
	 * into a new folder until they have been resolved. <br /><br /> Resolve alerts by marking
	 * Read (if no action is required), or by using ActionURL (if action is required).
	 */
	public $alertids;
	/**
	 * @var boolean | Whether or not a message has been viewed by a given user. Note that retrieving a message
	 * with the API does not mark it as read.
	 */
	public $read;
	/**
	 * @var boolean | Whether or not a message has been flagged.
	 */
	public $flagged;
	/**
	 * @var long | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @param MyMessagesMessageIDArrayType $val
	 * @throws Exception
	 */
	public function setMessageIDs($val)
	{
        $this->messageids = (int)$val;
	}

	/**
	 * @param MyMessagesAlertIDArrayType $val
	 * @throws Exception
	 */
	public function setAlertIDs($val)
	{
        $this->alertids = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRead($val)
	{
        $this->read = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFlagged($val)
	{
        $this->flagged = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        $this->folderid = (int)$val;
	}
}

/**
 * ReviseMyMessagesResponseType
 * The response to ReviseMyMessagesRequestType. If the request was successful, ReviseMyMessages
 * returns nothing.
 */
class ReviseMyMessagesResponseType extends
 AbstractResponseType
{}

/**
 * ReviseMyMessagesFoldersRequestType
 * Renames, removes, or restores specified My Messages folders for a given user.
 */
class ReviseMyMessagesFoldersRequestType extends
 AbstractRequestType
{
	/**
	 * @var MyMessagesFolderOperationCodeType | Indicates the type of operation to perform on a specified My Messages folder. Operations
	 * include renaming, removing, and restoring folders. Operations cannot be performed on the
	 * Inbox and Sent folders.
	 */
	public $operation;
	/**
	 * @var long | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @var string | The name of a specified My Messages folder.
	 */
	public $foldername;
	/**
	 * @param MyMessagesFolderOperationCodeType $val
	 * @throws Exception
	 */
	public function setOperation($val)
	{
        $this->operation = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        $this->folderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFolderName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FolderName');
        }
        $this->foldername = (int)$val;
	}
}

class ReviseMyMessagesFoldersResponseType extends
 AbstractResponseType
{}

/**
 * SellerReverseDisputeRequestType
 * Enables a seller to "reverse" an Unpaid Item dispute that has been closed, for example,
 * if buyer and seller reach an agreement. The seller's Final Value Fee credit and the buyer's
 * strike are both reversed, if applicable. The dispute might have resulted in a strike to
 * the buyer and a Final Value Fee credit to the seller. A buyer and seller sometimes come
 * to agreement after a dispute has been closed. In particular, the seller might discover that
 * the buyer actually paid, or the buyer might agree to pay the seller's fees in exchange for
 * having the strike removed. <br><br> A dispute can only be reversed if it was closed with
 * DisputeActivity set to SellerEndCommunication, CameToAgreementNeedFVFCredit, or MutualAgreementOrNoBuyerResponse.
 */
class SellerReverseDisputeRequestType extends
 AbstractRequestType
{
	/**
	 * @var DisputeIDType | The unique identifier of a dispute, returned by the eBay site when the dispute is created.
	 */
	public $disputeid;
	/**
	 * @var DisputeResolutionReasonCodeType | The reason for the resolution. The DisputeResolutionReason results in the action described
	 * by the DisputeResolutionRecordType.
	 */
	public $disputeresolutionreason;
	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setDisputeID($val)
	{
        $this->disputeid = (int)$val;
	}

	/**
	 * @param DisputeResolutionReasonCodeType $val
	 * @throws Exception
	 */
	public function setDisputeResolutionReason($val)
	{
        $this->disputeresolutionreason = (int)$val;
	}
}

/**
 * SellerReverseDisputeResponseType
 * Returned after calling SellerReverseDisputeRequest. Contains the status             of the
 * call and any errors or warnings.
 */
class SellerReverseDisputeResponseType extends
 AbstractResponseType
{}

/**
 * SendInvoiceRequestType
 * Enables a seller to send an invoice to a buyer involved in the transaction.
 */
class SendInvoiceRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var OrderIDType | ID of the Half.com order associated with the payment. Returns 0 for single-transaction
	 * orders.
	 */
	public $orderid;
	/**
	 * @var InternationalShippingServiceOptionsType | Shipping costs and options related to an international shipping service. When used as input,
	 * if one is provided, at least one domestic ShippingService must be provided.<br> <br> Not
	 * applicable to invoices for digital listings.
	 */
	public $internationalshippingserviceoptions;
	/**
	 * @var ShippingServiceOptionsType | Shipping costs and options related to domestic shipping services offered by the seller.
	 * Flat and calculated shipping. Required if InternationalShippingServiceOption is specified.<br> <br> If
	 * you specify multiple ShippingServiceOptions nodes, the repeating nodes must be contiguous.
	 * For example, you can insert InternationalShippingServiceOption nodes after a list of repeating
	 * ShippingServiceOptions nodes, but not between them:<br> <br> &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br> &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br> &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br> &lt;InternationalShippingServiceOption&gt;...&lt;/InternationalShippingServiceOption&gt;<br> &lt;InternationalShippingServiceOption&gt;...&lt;/InternationalShippingServiceOption&gt;<br><br> <br> If
	 * you specify ShippingDetails when you revise or relist an item but you omit ShippingServiceOptions,
	 * eBay will drop the domestic shipping services from the listing. This may also have unintended
	 * side effects, as other fields that depend on this data may be dropped as well. To retain
	 * the shipping services and dependent fields when you modify other shipping details, it may
	 * be simplest to specify all ShippingDetails that you still want to include in the listing.<br> <br> Not
	 * applicable to Half.com or eBay Motors vehicle listings.
	 */
	public $shippingserviceoptions;
	/**
	 * @var SalesTaxType | Sales tax details. US site only. Flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders). If your application normally calculates sales tax without using eBay's
	 * tax tables, you should understand how purchases via eBay Express will affect the way you
	 * process payments. For general information about listings on eBay Express, see the eBay
	 * Web Services Guide links below. Not applicable to eBay Motors vehicle listings.
	 */
	public $salestax;
	/**
	 * @var InsuranceOptionCodeType | Whether the seller offers shipping insurance and, if so, whether the insurance is optional
	 * or required. Flat and calculated shipping. Optional as input and only allowed if ChangePaymentInstructions
	 * is true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express.
	 */
	public $insuranceoption;
	/**
	 * @var AmountType | Cost of shipping insurance set by the seller. If the buyer bought more than one of this
	 * item, this is the insurance for just a single item. Exception: for GetItemShipping, this
	 * is proportional to QuantitySold. Value should be greater than 0.00 if InsuranceOption is
	 * Optional or Required. For flat shipping only. Optional as input and only allowed if ChangePaymentInstructions is
	 * true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express. Not
	 * applicable to eBay Motors vehicle listings.
	 */
	public $insurancefee;
	/**
	 * @var BuyerPaymentMethodCodeType | The payment methods the buyer uses to pay for      the order. An order can have multiple
	 * payment methods if the      buyer combines several transactions into one order.      Also
	 * applicable to Half.com (for GetOrders).
	 */
	public $paymentmethods;
	/**
	 * @var string | Valid PayPal email address for the PayPal account that the seller will use if they offer
	 * PayPal as a payment method for the listing. eBay uses this to identify the correct PayPal
	 * account when the buyer pays via PayPal during the checkout process. (As a seller can have
	 * more than one PayPal account, you cannot necessarily rely on PayPal account data returned
	 * from GetUser for details about the account associated with the PayPal email address that
	 * the seller specifies.)<br> <br> Required if seller has chosen PayPal as a payment method
	 * (PaymentMethods) for the listing.<br> <br> For a listing to be eligible for Express US,
	 * the seller needs to use an email address that is in good standing and that is associated
	 * with a PayPal Premier or PayPal business account that is set to ship to unconfirmed addresses.
	 * For Express Germany, PayPalEmailAddress must be specified for Express format listings,
	 * but it is optional for other formats (as long as an eligible default PayPal account is
	 * specified in the seller's Express preferences). If the specified PayPal account becomes
	 * ineligible for eBay Express payments (because the seller blocked unconfirmed addresses
	 * or some other change occurred), the items associated with that account may become ineligible
	 * for Express and may no longer appear on Express. See eBay Express information in the eBay
	 * Web Services Guide for more information.<br> <br> For digital listings, the seller needs
	 * to use an email address that is associated with a PayPal Premier or PayPal business account.
	 * <br> <br> <b>For ReviseItem and RelistItem only:</b> To remove this value when you revise
	 * or relist an item, use DeletedField. When you revise a listing, if the listing has bids
	 * (or items have been sold) or it ends within 12 hours, you can add PayPalEmailAddress, but
	 * you cannot remove it.<br> <br> Not applicable to eBay Motors listings. Also not applicable
	 * to Half.com.
	 */
	public $paypalemailaddress;
	/**
	 * @var string | Seller's Payment instructions/message to the buyer and return policy. Default is null.
	 */
	public $checkoutinstructions;
	/**
	 * @var boolean | Specifies whether the seller wishes to be copied on the invoice email that will be sent
	 * to the buyer. Default will be true.
	 */
	public $emailcopytoseller;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param OrderIDType $val
	 * @throws Exception
	 */
	public function setOrderID($val)
	{
        $this->orderid = (int)$val;
	}

	/**
	 * @param InternationalShippingServiceOptionsType $val
	 * @throws Exception
	 */
	public function setInternationalShippingServiceOptions($val)
	{
        $this->internationalshippingserviceoptions = (int)$val;
	}

	/**
	 * @param ShippingServiceOptionsType $val
	 * @throws Exception
	 */
	public function setShippingServiceOptions($val)
	{
        $this->shippingserviceoptions = (int)$val;
	}

	/**
	 * @param SalesTaxType $val
	 * @throws Exception
	 */
	public function setSalesTax($val)
	{
        $this->salestax = (int)$val;
	}

	/**
	 * @param InsuranceOptionCodeType $val
	 * @throws Exception
	 */
	public function setInsuranceOption($val)
	{
        $this->insuranceoption = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInsuranceFee($val)
	{
        $this->insurancefee = (int)$val;
	}

	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethods($val)
	{
        $this->paymentmethods = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPayPalEmailAddress($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PayPalEmailAddress');
        }
        $this->paypalemailaddress = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCheckoutInstructions($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CheckoutInstructions');
        }
        $this->checkoutinstructions = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEmailCopyToSeller($val)
	{
        $this->emailcopytoseller = (int)$val;
	}
}

/**
 * SendInvoiceResponseType
 * Returns the status of calling SendInvoice.
 */
class SendInvoiceResponseType extends
 AbstractResponseType
{}

/**
 * SetNotificationPreferencesRequestType
 * Manages a user's notification preferences. This is part of the eBay Platform Notifications
 * feature. Notification can be used to alert production-certified applications of selected
 * events on the eBay site, helping reduce the number of times your application needs to retrieve
 * certain information.
 */
class SetNotificationPreferencesRequestType extends
 AbstractRequestType
{
	/**
	 * @var ApplicationDeliveryPreferencesType | Specifies application-based event preferences that have been enabled.
	 */
	public $applicationdeliverypreferences;
	/**
	 * @var NotificationEnableArrayType | Array of NotificationEventEnableTypes. Each NotificationEventEnableType contains an EventSetting
	 * and an EventType.
	 */
	public $userdeliverypreferencearray;
	/**
	 * @var NotificationUserDataType | Specifies user data for notification settings such as mobile phone number.
	 */
	public $userdata;
	/**
	 * @var NotificationEventPropertyType | Characteristics or details of an event such as type, name and value. Currently can only
	 * be set for wireless applications.
	 */
	public $eventproperty;
	/**
	 * @param ApplicationDeliveryPreferencesType $val
	 * @throws Exception
	 */
	public function setApplicationDeliveryPreferences($val)
	{
        $this->applicationdeliverypreferences = (int)$val;
	}

	/**
	 * @param NotificationEnableArrayType $val
	 * @throws Exception
	 */
	public function setUserDeliveryPreferenceArray($val)
	{
        $this->userdeliverypreferencearray = (int)$val;
	}

	/**
	 * @param NotificationUserDataType $val
	 * @throws Exception
	 */
	public function setUserData($val)
	{
        $this->userdata = (int)$val;
	}

	/**
	 * @param NotificationEventPropertyType $val
	 * @throws Exception
	 */
	public function setEventProperty($val)
	{
        $this->eventproperty = (int)$val;
	}
}

/**
 * SetNotificationPreferencesResponseType
 * (out) Returned after a call to SetNotificationPreferences to indicate that the call succeeded.
 */
class SetNotificationPreferencesResponseType extends
 AbstractResponseType
{}

/**
 * SetPictureManagerDetailsRequestType
 * Creates, updates, or deletes Picture Manager account settings, folders, or pictures.
 */
class SetPictureManagerDetailsRequestType extends
 AbstractRequestType
{
	/**
	 * @var PictureManagerDetailsType | Specifies the setting or folder to create, update, or delete, or the picture to update.
	 * You cannot upload or delete pictures using SetPictureManagerDetails; you must use the eBay
	 * site.
	 */
	public $picturemanagerdetails;
	/**
	 * @var PictureManagerActionCodeType | Indicates the type of offer being made on the specified listing. Valid values are enumerated
	 * in the BidActionCodeType code list.
	 */
	public $action;
	/**
	 * @param PictureManagerDetailsType $val
	 * @throws Exception
	 */
	public function setPictureManagerDetails($val)
	{
        $this->picturemanagerdetails = (int)$val;
	}

	/**
	 * @param PictureManagerActionCodeType $val
	 * @throws Exception
	 */
	public function setAction($val)
	{
        $this->action = (int)$val;
	}
}

/**
 * SetPictureManagerDetailsResponseType
 * Returns the status of an action on a setting, folder, or picture in a Picture Manager account.
 */
class SetPictureManagerDetailsResponseType extends
 AbstractResponseType
{}

/**
 * SetPromotionRulesRequestType
 * Defines one or more cross-promotion rules for an item or store category. You must be a seller
 * and the owner of an eBay Stores storefront to use SetPromotionRules.
 */
class SetPromotionRulesRequestType extends
 AbstractRequestType
{
	/**
	 * @var OperationTypeCodeType | Specifies whether the update is for item rules or default rules for the promotion type.
	 * Allowed values are ItemRules or ReplaceAllDefaultRules. Required when setting default rules.
	 */
	public $operationtype;
	/**
	 * @var PromotionRuleArrayType | Specifies a list of cross-promotion rules to set. Each rule defines a referring item or
	 * store category and the cross-promoted items or store categories.
	 */
	public $promotionrulearray;
	/**
	 * @param OperationTypeCodeType $val
	 * @throws Exception
	 */
	public function setOperationType($val)
	{
        $this->operationtype = (int)$val;
	}

	/**
	 * @param PromotionRuleArrayType $val
	 * @throws Exception
	 */
	public function setPromotionRuleArray($val)
	{
        $this->promotionrulearray = (int)$val;
	}
}

/**
 * SetPromotionRulesResponseType
 * Returned after calling SetPromotionRulesRequest to indicate  whether the rules have been
 * set successfully.
 */
class SetPromotionRulesResponseType extends
 AbstractResponseType
{}

/**
 * SetReturnURLRequestType
 * Configures your application's authentication and authorization preferences and other data,
 * such as the URLs that eBay should redirect users to after they complete the authentication
 * and authorization process. This call needs the ebay userid/password you created for use
 * by your applications (not an authentication token).
 */
class SetReturnUrLrequestType extends
 AbstractRequestType
{
	/**
	 * @var AuthenticationEntryType | Contains the data properties that define one authentication entry.            Multiple
	 * AuthenticationEntry fields can be returned.
	 */
	public $authenticationentry;
	/**
	 * @var string | Sets an application display name for the eBay sign-in page. Need not be set with every
	 * call. Optional.
	 */
	public $applicationdisplayname;
	/**
	 * @var ModifyActionCodeType | Indicates the type of offer being made on the specified listing. Valid values are enumerated
	 * in the BidActionCodeType code list.
	 */
	public $action;
	/**
	 * @param AuthenticationEntryType $val
	 * @throws Exception
	 */
	public function setAuthenticationEntry($val)
	{
        $this->authenticationentry = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setApplicationDisplayName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ApplicationDisplayName');
        }
        $this->applicationdisplayname = (int)$val;
	}

	/**
	 * @param ModifyActionCodeType $val
	 * @throws Exception
	 */
	public function setAction($val)
	{
        $this->action = (int)$val;
	}
}

/**
 * SetReturnURLResponseType
 * Confirms whether your application's authentication preferences and other details were configured
 * successfully.
 */
class SetReturnUrLresponseType extends
 AbstractResponseType
{}

/**
 * SetStoreRequestType
 * Sets the configuration of the eBay store owned by the caller.
 */
class SetStoreRequestType extends
 AbstractRequestType
{
	/**
	 * @var StoreType | Specifies the Store configuration that is being set for the user.
	 */
	public $store;
	/**
	 * @param StoreType $val
	 * @throws Exception
	 */
	public function setStore($val)
	{
        $this->store = (int)$val;
	}
}

/**
 * SetStoreResponseType
 * Returned after calling SetStoreRequest. This serves as confirmation that        the Store
 * configuration was successfully submitted.
 */
class SetStoreResponseType extends
 AbstractResponseType
{}

/**
 * SetStoreCategoriesRequestType
 * Requests changes to the category structure for a store. Use this call to add, delete, move,
 * or rename a list of categories.
 */
class SetStoreCategoriesRequestType extends
 AbstractRequestType
{
	/**
	 * @var StoreCategoryUpdateActionCodeType | Indicates the type of offer being made on the specified listing. Valid values are enumerated
	 * in the BidActionCodeType code list.
	 */
	public $action;
	/**
	 * @var int | Items can only be contained within child categories. A parent category cannot contain items.
	 * If adding, moving, or deleting categories displaces items, you must specify a destination
	 * child category under which the displaced items will be moved. The destination category
	 * must have no child categories.
	 */
	public $itemdestinationcategoryid;
	/**
	 * @var int | When adding or moving store categories, specifies the category under which the listed categories
	 * will be located. To add or move categories to the top level, set the value to -999.
	 */
	public $destinationparentcategoryid;
	/**
	 * @var StoreCustomCategoryArrayType | Contains information for specifying the store categories being acted on.
	 */
	public $storecategories;
	/**
	 * @param StoreCategoryUpdateActionCodeType $val
	 * @throws Exception
	 */
	public function setAction($val)
	{
        $this->action = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemDestinationCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemdestinationcategoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDestinationParentCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->destinationparentcategoryid = (int)$val;
	}

	/**
	 * @param StoreCustomCategoryArrayType $val
	 * @throws Exception
	 */
	public function setStoreCategories($val)
	{
        $this->storecategories = (int)$val;
	}
}

/**
 * SetStoreCategoriesResponseType
 * Returns the status of the processing progress for changes to the category structure for
 * a store.
 */
class SetStoreCategoriesResponseType extends
 AbstractResponseType
{
	/**
	 * @var long | The task ID associated with the category structure change request. If the SetStoreCategories
	 * call is process synchronously, the task ID is 0. If the category structure changes affect
	 * many listings, the changes will be processed asynchronously and the task ID will be a positive
	 * number. Use the task ID with GetStoreCategoryUpdateStatus to monitor the status of asynchronously
	 * processed changes.
	 */
	public $taskid;
	/**
	 * @var TaskStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setTaskID($val)
	{
        $this->taskid = (int)$val;
	}

	/**
	 * @param TaskStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}
}

/**
 * SetStoreCustomPageRequestType
 * Sets a custom page for a user's eBay Store. The page can include static HTML      content
 * as well as dynamic content that is added using the special eBay Stores      tags.
 */
class SetStoreCustomPageRequestType extends
 AbstractRequestType
{
	/**
	 * @var StoreCustomPageType | A Store custom page.
	 */
	public $custompage;
	/**
	 * @param StoreCustomPageType $val
	 * @throws Exception
	 */
	public function setCustomPage($val)
	{
        $this->custompage = (int)$val;
	}
}

/**
 * SetStoreCustomPageResponseType
 * Returned after calling SetStoreCustomPageRequest. This serves as      confirmation that
 * the custom page was successfully submitted.
 */
class SetStoreCustomPageResponseType extends
 AbstractResponseType
{
	/**
	 * @var StoreCustomPageType | A Store custom page.
	 */
	public $custompage;
	/**
	 * @param StoreCustomPageType $val
	 * @throws Exception
	 */
	public function setCustomPage($val)
	{
        $this->custompage = (int)$val;
	}
}

/**
 * SetStorePreferencesRequestType
 * Sets the preferences for a user's eBay Store. These preferences include various seller vacation
 * options.
 */
class SetStorePreferencesRequestType extends
 AbstractRequestType
{
	/**
	 * @var StorePreferencesType | Specifies the store preferences.
	 */
	public $storepreferences;
	/**
	 * @param StorePreferencesType $val
	 * @throws Exception
	 */
	public function setStorePreferences($val)
	{
        $this->storepreferences = (int)$val;
	}
}

/**
 * SetStorePreferencesResponseType
 * Returned after calling SetStorePreferencesRequest. This serves as confirmation that
 *     the Store preferences were successfully submitted.
 */
class SetStorePreferencesResponseType extends
 AbstractResponseType
{}

/**
 * SetTaxTableRequestType
 * Sets the tax table for a seller on a given site.
 */
class SetTaxTableRequestType extends
 AbstractRequestType
{
	/**
	 * @var TaxTableType | Tax details for a jurisdiction such as a state or province. Returns empty in GetItem if
	 * no tax table was used. Not applicable to Half.com.
	 */
	public $taxtable;
	/**
	 * @param TaxTableType $val
	 * @throws Exception
	 */
	public function setTaxTable($val)
	{
        $this->taxtable = (int)$val;
	}
}

/**
 * SetTaxTableResponseType
 * Response to SetTaxTableRequest.
 */
class SetTaxTableResponseType extends
 AbstractResponseType
{}

/**
 * SetUserNotesRequestType
 * Enables users to add, replace, and delete My eBay notes for items that are being tracked
 * in the My eBay All Selling and All Buying areas.
 */
class SetUserNotesRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var SetUserNotesActionCodeType | Indicates the type of offer being made on the specified listing. Valid values are enumerated
	 * in the BidActionCodeType code list.
	 */
	public $action;
	/**
	 * @var string | Text of the note. Maximum 250 characters. Required only if the Action is AddOrUpdate. This
	 * note text will completely replace any existing My eBay note for the specified item.
	 */
	public $notetext;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param SetUserNotesActionCodeType $val
	 * @throws Exception
	 */
	public function setAction($val)
	{
        $this->action = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setNoteText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for NoteText');
        }
        $this->notetext = (int)$val;
	}
}

/**
 * SetUserNotesResponseType
 * Returns the status of the call.
 */
class SetUserNotesResponseType extends
 AbstractResponseType
{}

/**
 * SetUserPreferencesRequestType
 * Sets the user's preferences to those specified in the request. As a general rule, once you
 * set a preference,  GetUserPreferences and the user's preferences displayed on the eBay Web
 * site should reflect the new setting immediately. However, it could take up to 7 days for
 * the change to have any logical or functional effect. For example, if you change your combined
 * payment preferences, it could take up to 7 days for eBay to apply the updated combined payment
 * settings to your listings. Also, once you set a preference, you cannot change its setting
 * again within 7 days.
 */
class SetUserPreferencesRequestType extends
 AbstractRequestType
{
	/**
	 * @var BidderNoticePreferencesType | The user's bidder notice preferences to be set.
	 */
	public $biddernoticepreferences;
	/**
	 * @var CombinedPaymentPreferencesType | The user's combined payment preferences to be set. When you change these preferences, it
	 * can take up to 7 days for the change to have any logical or functional effect on eBay.
	 * <br> <br> For the US and Germany sites, combined payment preferences can also affect whether
	 * a seller is eligible to list on Express. A seller needs to allow shoppers to pay by single,
	 * combined payments for their purchases. A seller is not eligible for Express if they don't
	 * allow combined payments. Once changes to these preferences take effect on eBay (within
	 * 7 days), it can take up to 7 more days for existing items to be added to or removed from
	 * Express. Thus, it can take up to 14 days (total) for combined payment preference changes
	 * to affect whether listings appear on Express. Also see ExpressPreferences.ExpressSellingPreferences.
	 */
	public $combinedpaymentpreferences;
	/**
	 * @var CrossPromotionPreferencesType | The user's cross promotion preferences to be set.
	 */
	public $crosspromotionpreferences;
	/**
	 * @var SellerPaymentPreferencesType | The user's seller payment preferences to be set.
	 */
	public $sellerpaymentpreferences;
	/**
	 * @var SellerFavoriteItemPreferencesType | Seller's favorite item preferences to be set.
	 */
	public $sellerfavoriteitempreferences;
	/**
	 * @var EndOfAuctionEmailPreferencesType | The seller's end of auction email preferences to be set.
	 */
	public $endofauctionemailpreferences;
	/**
	 * @var eBxOptInPreferenceType | If true: The seller wants their eligible eBay listings to be included on eBay Express (in
	 * addition to the main eBay site). If false: The seller does not want their listings to be
	 * included on eBay Express. If omitted (in SetUserPreferences): The seller does not want
	 * to change their existing preference. (Initially, eBay sets this preference to true for every
	 * seller.)
	 */
	public $ebxoptinpreference;
	/**
	 * @var ExpressPreferencesType | The seller's Express preferences. Currently used to indicate which of the seller's eligible
	 * listings to include on Express. You can only set these preferences for sellers who are
	 * eligible to list on Express. To determine the seller's eligibility, call GetUser and check
	 * the value of SellerInfo.ExpressEligible. Once you set Express preferences, you cannot set
	 * them again (e.g., to change the value) within 7 days. Also see CombinedPaymentPreferences,
	 * which affect a seller's eligibility to list on Express.
	 */
	public $expresspreferences;
	/**
	 * @param BidderNoticePreferencesType $val
	 * @throws Exception
	 */
	public function setBidderNoticePreferences($val)
	{
        $this->biddernoticepreferences = (int)$val;
	}

	/**
	 * @param CombinedPaymentPreferencesType $val
	 * @throws Exception
	 */
	public function setCombinedPaymentPreferences($val)
	{
        $this->combinedpaymentpreferences = (int)$val;
	}

	/**
	 * @param CrossPromotionPreferencesType $val
	 * @throws Exception
	 */
	public function setCrossPromotionPreferences($val)
	{
        $this->crosspromotionpreferences = (int)$val;
	}

	/**
	 * @param SellerPaymentPreferencesType $val
	 * @throws Exception
	 */
	public function setSellerPaymentPreferences($val)
	{
        $this->sellerpaymentpreferences = (int)$val;
	}

	/**
	 * @param SellerFavoriteItemPreferencesType $val
	 * @throws Exception
	 */
	public function setSellerFavoriteItemPreferences($val)
	{
        $this->sellerfavoriteitempreferences = (int)$val;
	}

	/**
	 * @param EndOfAuctionEmailPreferencesType $val
	 * @throws Exception
	 */
	public function setEndOfAuctionEmailPreferences($val)
	{
        $this->endofauctionemailpreferences = (int)$val;
	}

	/**
	 * @param eBxOptInPreferenceType $val
	 * @throws Exception
	 */
	public function setEBxOptInPreference($val)
	{
        $this->ebxoptinpreference = (int)$val;
	}

	/**
	 * @param ExpressPreferencesType $val
	 * @throws Exception
	 */
	public function setExpressPreferences($val)
	{
        $this->expresspreferences = (int)$val;
	}
}

/**
 * SetUserPreferencesResponseType
 * Returned after a call to SetUserPreferences to indicate that the call succeeded.
 */
class SetUserPreferencesResponseType extends
 AbstractResponseType
{}

/**
 * ValidateChallengeInputRequestType
 * Validates the user response to a GetChallengeToken botblock challenge.
 */
class ValidateChallengeInputRequestType extends
 AbstractRequestType
{
	/**
	 * @var string | Botblock token that was returned by GetChallengeToken.
	 */
	public $challengetoken;
	/**
	 * @var string | User response to a botblock challenge.
	 */
	public $userinput;
	/**
	 * @var boolean | Whether the challenge token should remain valid for up to two minutes.
	 */
	public $keeptokenvalid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setChallengeToken($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ChallengeToken');
        }
        $this->challengetoken = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setUserInput($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for UserInput');
        }
        $this->userinput = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setKeepTokenValid($val)
	{
        $this->keeptokenvalid = (int)$val;
	}
}

/**
 * ValidateChallengeInputResponseType
 * Validate the user response to botblock challenge.
 */
class ValidateChallengeInputResponseType extends
 AbstractResponseType
{
	/**
	 * @var boolean | Indicates whether the token is valid.
	 */
	public $validtoken;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setValidToken($val)
	{
        $this->validtoken = (int)$val;
	}
}

/**
 * ValidateTestUserRegistrationRequestType
 * Requests to enable a test user to sell items in the Sandbox environment.
 */
class ValidateTestUserRegistrationRequestType extends
 AbstractRequestType
{
	/**
	 * @var int | The aggregate feedback score for a user. A user's feedback score is the net positive feedback
	 * minus the net negative feedback left for the user. Feedback scores are a quantitative expression
	 * of the desirability of dealing with a user as a buyer or a seller in transactions. Each
	 * transaction can result in one feedback entry for a given user (the buyer can leave feedback
	 * for the seller, and the seller can leave feedback for the buyer.). That one feedback can
	 * be positive, negative, or neutral. The aggregated feedback counts for a particular user
	 * represent that user's overall feedback score (referred to as a "feedback rating" on the
	 * eBay site). If the user has chosen to make their feedback private and that user is not
	 * the user identified in the request's authentication token, FeedbackScore is not returned
	 * and FeedbackPrivate is returned with a value of true.<br> <br> To be eligible to list on
	 * Express, a seller's feedback score needs to be 100 or higher. See "eBay Express" in the
	 * eBay Web Services guide. In GetSearchResultsExpress, only returned when ItemDetails is
	 * set to Fine.<br> <br> In GetSearchResults and GetCategoryListings, feedback information
	 * is only returned if IncludeFeedback = true in the request. <br><br> Starting Jan 2007,
	 * when a bidder's user info is made anonymous, the real feedback score will be returned only
	 * for that bidder, and the seller of an item that the user is bidding on. For all other users,
	 * the value -99 is returned.
	 */
	public $feedbackscore;
	/**
	 * @var dateTime | Indicates the date the specified user originally registered with eBay. <br><br> Starting
	 * Jan 2007, when a bidder's user info is made anonymous, this tag will be returned only for
	 * that bidder, and the seller of an item that the user is bidding on.
	 */
	public $registrationdate;
	/**
	 * @var boolean | Indicates if a user subscribes to Seller's Assistant. You cannot request to subscribe a
	 * user to both Seller's Assistant and Seller's Assistant Pro. You cannot request to unsubscribe
	 * a user.
	 */
	public $subscribesa;
	/**
	 * @var boolean | Indicates if a user subscribes to Seller's Assistant Pro. You cannot request to subscribe
	 * a user to both Seller's Assistant and Seller's Assistant Pro. You cannot request to unsubscribe
	 * a user.
	 */
	public $subscribesapro;
	/**
	 * @var boolean | Indicates if a user subscribes to Selling Manager. You cannot request to subscribe a user
	 * to both Selling Manager and Selling Manager Pro. You cannot request to unsubscribe a user.
	 */
	public $subscribesm;
	/**
	 * @var boolean | Indicates if a user subscribes to Selling Manager Pro. You cannot request to subscribe
	 * a user to both Selling Manager and Selling Manager Pro. You cannot request to unsubscribe
	 * a user.
	 */
	public $subscribesmpro;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbackscore = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setRegistrationDate($val)
	{
        $this->registrationdate = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSubscribeSA($val)
	{
        $this->subscribesa = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSubscribeSAPro($val)
	{
        $this->subscribesapro = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSubscribeSM($val)
	{
        $this->subscribesm = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSubscribeSMPro($val)
	{
        $this->subscribesmpro = (int)$val;
	}
}

/**
 * ValidateTestUserRegistrationResponseType
 * Returned after calling ValidateTestUserRegistrationRequest; confirms a successful      call.
 */
class ValidateTestUserRegistrationResponseType extends
 AbstractResponseType
{}

/**
 * VeROReportItemsRequestType
 * Reports items that allegedly infringe your copyright, trademark, or other intellectual property
 * rights. You can report one or more items at a time with this call. You must be a member
 * of the Verified Rights Owner (VeRO) Program to use this call.
 */
class VeRoReportItemsRequestType extends
 AbstractRequestType
{
	/**
	 * @var UserIDType | User ID of the VeRO member reporting the items.
	 */
	public $rightsownerid;
	/**
	 * @var VeROReportItemsType | Container (packet) for items being reported. You can report the same item  more than once
	 * in a packet if a different reason code is used each time.
	 */
	public $reportitems;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setRightsOwnerID($val)
	{
        $this->rightsownerid = (int)$val;
	}

	/**
	 * @param VeROReportItemsType $val
	 * @throws Exception
	 */
	public function setReportItems($val)
	{
        $this->reportitems = (int)$val;
	}
}

/**
 * VeROReportItemsResponseType
 * Contains a packet ID and status for the items reported by the VeRO Program member.
 */
class VeRoReportItemsResponseType extends
 AbstractResponseType
{
	/**
	 * @var long | A unique packet identifier for the items reported.
	 */
	public $veroreportpacketid;
	/**
	 * @var VeROReportPacketStatusCodeType | The processing status of the packet.
	 */
	public $veroreportpacketstatus;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setVeROReportPacketID($val)
	{
        $this->veroreportpacketid = (int)$val;
	}

	/**
	 * @param VeROReportPacketStatusCodeType $val
	 * @throws Exception
	 */
	public function setVeROReportPacketStatus($val)
	{
        $this->veroreportpacketstatus = (int)$val;
	}
}

/**
 * VerifyAddItemRequestType
 * Defines a single new item and tests the definition for validity. Behaves exactly the same
 * as AddItem (same inputs, same outputs, and same behavior and usage rules), but without actually
 * listing the item to an eBay site. Applications can use this call to test the definition
 * of an item before actually listing it to eBay with AddItem, reducing item listing-related
 * errors.
 */
class VerifyAddItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var boolean | Indicates if the response should include detailed data relating to whether an item would
	 * qualify as an Express listing. For information about the Express-related data that can
	 * be returned when IncludeExpressRequirements is set to true, see the annotations for the
	 * output of VerifyAddItem and see the eBay Web Services Guide.
	 */
	public $includeexpressrequirements;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeExpressRequirements($val)
	{
        $this->includeexpressrequirements = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}
}

/**
 * VerifyAddItemResponseType
 * Returns the estimated fees that would be applicable for a new listing (were the item actually
 * listed to eBay with AddItem).
 */
class VerifyAddItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var boolean | If true, the item is qualified for the eBay Express site associated with the item's listing
	 * site (US or Germany).<br> <br> For fixed-price, Store Inventory, and Express format listings, this
	 * means the item appears on Express. <br> <br> For Chinese auction listings with Buy It Now,
	 * this means the item appears on Express as long as it has no bids and doesn't end within
	 * 12 hours. See Item.SellingStatus.BidCount to determine whether an auction with Buy It Now
	 * has bids or not, and see EndTime or Item.TimeLeft to to determine how soon the listing
	 * ends.
	 */
	public $expresslisting;
	/**
	 * @var ExpressItemRequirementsType | Contains details about why an item does or doesn't qualify as an Express listing. Only
	 * returned when IncludeExpressRequirements is true the request. Whether a child field is
	 * returned can depend on whether the field currently applies to the site on which the item
	 * would be listed. Whether a child field is returned also can depend on whether its value
	 * would be true or false, or the order of eligibility precedence. The item requirements are
	 * assessed in this order:<br> - SellerExpressEligible<br> - ExpressOptOut<br> - ExpressApproved<br> -
	 * All other settings
	 */
	public $expressitemrequirements;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | ID of the secondary category in which the item would be listed. Only returned if you set
	 * Item.CategoryMappingAllowed to true in the request and the ID you passed in SecondaryCategory
	 * was mapped to a new ID by eBay. If the secondary category has not changed or it has expired
	 * with no replacement, Category2ID does not return a value.
	 */
	public $category2id;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressListing($val)
	{
        $this->expresslisting = (int)$val;
	}

	/**
	 * @param ExpressItemRequirementsType $val
	 * @throws Exception
	 */
	public function setExpressItemRequirements($val)
	{
        $this->expressitemrequirements = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategory2ID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Category2ID');
        }
        $this->category2id = (int)$val;
	}
}

/**
 * VerifyAddSecondChanceItemRequestType
 * Simulates the creation of a new Second Chance Offer listing of an item without actually
 * creating a listing.
 */
class VerifyAddSecondChanceItemRequestType extends
 AbstractRequestType
{
	/**
	 * @var UserIDType | Specifies the bidder from the original, ended listing to whom the seller is extending the
	 * second chance offer. Specify only one RecipientBidderUserID per call. If multiple users
	 * are specified (each in a RecipientBidderUserID node), only the last one specified receives
	 * the offer.
	 */
	public $recipientbidderuserid;
	/**
	 * @var AmountType | For Chinese auction listings, Buy It Now allows a user to purchase the item at a fixed
	 * price and end the auction immediately. eBay China also supports Buy It Now for Dutch auction
	 * listings (see International Differences Overview in the eBay Web Services guide). Use this
	 * field to add Buy It Now and specify the amount a buyer would need to bid to take advantage
	 * of the Buy It Now feature. <br><br> On the main eBay site, not applicable to fixed-price
	 * items (ListingTypeCodeType type StoresFixedPrice or FixedPriceItem), AdFormat listings,
	 * or Half.com listings. For fixed-price and Half.com listings, see StartPrice instead. See
	 * the eBay Web Services Guide for validation rules when revising US eBay Motors listings,
	 * including rules for lowering the Buy It Now price of a Motors listing. <br><br> On most
	 * sites, once a Chinese auction has bids, the listing is no longer eligible for Buy It Now.
	 * However, calls like GetItem and GetSearchResults still return the BuyItNowPrice that the
	 * seller set for the listing. You can use Item.SellingStatus.BidCount to determine whether
	 * an auction with Buy It Now has bids or not. With GetSearchResults, you can examine the
	 * Item.SearchDetails.BuyItNowEnabled flag to determine whether an auction is still a Buy
	 * It Now listing. With GetItem, you can examine the Item.ListingDetails.BuyItNowAvailable
	 * flag to determine whether a Dutch auction is still a Buy It Now listing. <br><br> For a
	 * listing to be eligible for Express, the max Buy It Now Price is USD 10,000.00 for the US. (Additional
	 * price limits may be imposed by the seller's PayPal account or the payment method used.
	 * Such limits cannot be determined via the eBay API and are not covered in eBay's API documentation,
	 * as they may vary for each user.) <br><br> To remove this value when revising or relisting
	 * an item, use DeletedField.
	 */
	public $buyitnowprice;
	/**
	 * @var boolean | Regardless of the request version you specify, the seller always receives a copy of the
	 * notification email that goes to the recipient user.
	 */
	public $copyemailtoseller;
	/**
	 * @var SecondChanceOfferDurationCodeType | Specifies the length of time an auction can be open, in days. The allowed durations vary
	 * according to the type of listing. The value GTC means Good Til Canceled.
	 */
	public $duration;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var string | Text response to buyer from seller.
	 */
	public $sellermessage;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setRecipientBidderUserID($val)
	{
        $this->recipientbidderuserid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBuyItNowPrice($val)
	{
        $this->buyitnowprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCopyEmailToSeller($val)
	{
        $this->copyemailtoseller = (int)$val;
	}

	/**
	 * @param SecondChanceOfferDurationCodeType $val
	 * @throws Exception
	 */
	public function setDuration($val)
	{
        $this->duration = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerMessage');
        }
        $this->sellermessage = (int)$val;
	}
}

/**
 * VerifyAddSecondChanceItemResponseType
 * VerifyAddSecondChanceItem request to emulate creation of a new Second Chance Offer for an
 * item to one of that item's bidders.
 */
class VerifyAddSecondChanceItemResponseType extends
 AbstractResponseType
{
	/**
	 * @var FeesType | (Not used.)
	 */
	public $fees;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @param FeesType $val
	 * @throws Exception
	 */
	public function setFees($val)
	{
        $this->fees = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}
}

class AckCodeType
{
	const SUCCESS        = 'Success';
	const FAILURE        = 'Failure';
	const WARNING        = 'Warning';
	const PARTIALFAILURE = 'PartialFailure';
	const CUSTOMCODE     = 'CustomCode';
}

class BuyerPaymentMethodCodeType
{
	const NONE                        = 'None';
	const MOCC                        = 'MOCC';
	const AMEX                        = 'AmEx';
	const PAYMENTSEEDESCRIPTION       = 'PaymentSeeDescription';
	const CCACCEPTED                  = 'CCAccepted';
	const PERSONALCHECK               = 'PersonalCheck';
	const COD                         = 'COD';
	const VISAMC                      = 'VisaMC';
	const PAISAPAYACCEPTED            = 'PaisaPayAccepted';
	const OTHER                       = 'Other';
	const PAYPAL                      = 'PayPal';
	const DISCOVER                    = 'Discover';
	const CASHONPICKUP                = 'CashOnPickup';
	const MONEYXFERACCEPTED           = 'MoneyXferAccepted';
	const MONEYXFERACCEPTEDINCHECKOUT = 'MoneyXferAcceptedInCheckout';
	const OTHERONLINEPAYMENTS         = 'OtherOnlinePayments';
	const ESCROW                      = 'Escrow';
	const PREPAYDELIVERY              = 'PrePayDelivery';
	const CODPREPAYDELIVERY           = 'CODPrePayDelivery';
	const POSTALTRANSFER              = 'PostalTransfer';
	const CUSTOMCODE                  = 'CustomCode';
	const LOANCHECK                   = 'LoanCheck';
	const CASHINPERSON                = 'CashInPerson';
	const ELV                         = 'ELV';
}

class DetailLevelCodeType
{
	const RETURNALL             = 'ReturnAll';
	const ITEMRETURNDESCRIPTION = 'ItemReturnDescription';
	const ITEMRETURNATTRIBUTES  = 'ItemReturnAttributes';
	const ITEMRETURNCATEGORIES  = 'ItemReturnCategories';
	const RETURNSUMMARY         = 'ReturnSummary';
	const RETURNHEADERS         = 'ReturnHeaders';
	const RETURNMESSAGES        = 'ReturnMessages';
}

class DisputeActivityCodeType
{
	const SELLERADDINFORMATION             = 'SellerAddInformation';
	const SELLERCOMPLETEDTRANSACTION       = 'SellerCompletedTransaction';
	const CAMETOAGREEMENTNEEDFVFCREDIT     = 'CameToAgreementNeedFVFCredit';
	const SELLERENDCOMMUNICATION           = 'SellerEndCommunication';
	const MUTUALAGREEMENTORNOBUYERRESPONSE = 'MutualAgreementOrNoBuyerResponse';
	const SELLEROFFERSREFUND               = 'SellerOffersRefund';
	const SELLERSHIPPEDITEM                = 'SellerShippedItem';
	const SELLERCOMMENT                    = 'SellerComment';
	const SELLERPAYMENTNOTRECEIVED         = 'SellerPaymentNotReceived';
	const CUSTOMCODE                       = 'CustomCode';
}

class DisputeCreditEligibilityCodeType
{
	const INELIGIBLE = 'InEligible';
	const ELIGIBLE   = 'Eligible';
	const CUSTOMCODE = 'CustomCode';
}

class DisputeExplanationCodeType
{
	const BUYERHASNOTRESPONDED        = 'BuyerHasNotResponded';
	const BUYERREFUSEDTOPAY           = 'BuyerRefusedToPay';
	const BUYERNOTCLEAREDTOPAY        = 'BuyerNotClearedToPay';
	const BUYERRETURNEDITEMFORREFUND  = 'BuyerReturnedItemForRefund';
	const UNABLETORESOLVETERMS        = 'UnableToResolveTerms';
	const BUYERNOLONGERWANTSITEM      = 'BuyerNoLongerWantsItem';
	const BUYERPURCHASINGMISTAKE      = 'BuyerPurchasingMistake';
	const SHIPCOUNTRYNOTSUPPORTED     = 'ShipCountryNotSupported';
	const SHIPPINGADDRESSNOTCONFIRMED = 'ShippingAddressNotConfirmed';
	const PAYMENTMETHODNOTSUPPORTED   = 'PaymentMethodNotSupported';
	const BUYERNOLONGERREGISTERED     = 'BuyerNoLongerRegistered';
	const OTHEREXPLANATION            = 'OtherExplanation';
	const UNSPECIFIED                 = 'Unspecified';
	const CUSTOMCODE                  = 'CustomCode';
}

/**
 * DisputeFilterCountType
 * The number of disputes that match a given filter.
 */
class DisputeFilterCountType
{
	/**
	 * @var DisputeFilterTypeCodeType | A filter used to reduce the number of disputes returned. The filter uses criteria such
	 * as whether the dispute is awaiting a response, is closed, or is eligible for credit. Both
	 * Unpaid Item and Item Not Received disputes can be returned for the same filter value.
	 */
	public $disputefiltertype;
	/**
	 * @var int | The total number of My eBay Second Chance Offers available.
	 */
	public $totalavailable;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param DisputeFilterTypeCodeType $val
	 * @throws Exception
	 */
	public function setDisputeFilterType($val)
	{
        $this->disputefiltertype = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalavailable = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DisputeFilterTypeCodeType
{
	const ALLINVOLVEDDISPUTES                = 'AllInvolvedDisputes';
	const DISPUTESAWAITINGMYRESPONSE         = 'DisputesAwaitingMyResponse';
	const DISPUTESAWAITINGOTHERPARTYRESPONSE = 'DisputesAwaitingOtherPartyResponse';
	const ALLINVOLVEDCLOSEDDISPUTES          = 'AllInvolvedClosedDisputes';
	const ELIGIBLEFORCREDIT                  = 'EligibleForCredit';
	const UNPAIDITEMDISPUTES                 = 'UnpaidItemDisputes';
	const ITEMNOTRECEIVEDDISPUTES            = 'ItemNotReceivedDisputes';
	const CUSTOMCODE                         = 'CustomCode';
}

class DisputeIdType
{}

class DisputeMessageSourceCodeType
{
	const BUYER      = 'Buyer';
	const SELLER     = 'Seller';
	const EBAY       = 'eBay';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * DisputeMessageType
 * Contains a message posted to a dispute. The message can be posted by the buyer, the seller,
 * or an eBay representative.
 */
class DisputeMessageType
{
	/**
	 * @var int | An ID that uniquely identifies a message for a given user. <br /><br /> This value is not
	 * the same as the value used for the GetMemberMessages MessageID. Use the GetMemberMessages
	 * value for used as the GetMyMessages ExternalID instead.
	 */
	public $messageid;
	/**
	 * @var DisputeMessageSourceCodeType | The party who posted the message: the buyer, the seller, or an eBay representative.
	 */
	public $messagesource;
	/**
	 * @var dateTime | The date and time the message was created, in GMT.
	 */
	public $messagecreationtime;
	/**
	 * @var string | The text of the message.
	 */
	public $messagetext;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMessageID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->messageid = (int)$val;
	}

	/**
	 * @param DisputeMessageSourceCodeType $val
	 * @throws Exception
	 */
	public function setMessageSource($val)
	{
        $this->messagesource = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setMessageCreationTime($val)
	{
        $this->messagecreationtime = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessageText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MessageText');
        }
        $this->messagetext = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DisputeReasonCodeType
{
	const BUYERHASNOTPAID             = 'BuyerHasNotPaid';
	const TRANSACTIONMUTUALLYCANCELED = 'TransactionMutuallyCanceled';
	const ITEMNOTRECEIVED             = 'ItemNotReceived';
	const SIGNIFICANTLYNOTASDESCRIBED = 'SignificantlyNotAsDescribed';
	const NOREFUND                    = 'NoRefund';
	const RETURNPOLICYUNPAIDITEM      = 'ReturnPolicyUnpaidItem';
	const CUSTOMCODE                  = 'CustomCode';
}

class DisputeRecordTypeCodeType
{
	const UNPAIDITEM      = 'UnpaidItem';
	const ITEMNOTRECEIVED = 'ItemNotReceived';
	const CUSTOMCODE      = 'CustomCode';
}

class DisputeResolutionReasonCodeType
{
	const UNRESOLVED               = 'Unresolved';
	const PROOFOFPAYMENT           = 'ProofOfPayment';
	const COMPUTERTECHNICALPROBLEM = 'ComputerTechnicalProblem';
	const NOCONTACT                = 'NoContact';
	const FAMILYEMERGENCY          = 'FamilyEmergency';
	const PROOFGIVENINFEEDBACK     = 'ProofGivenInFeedback';
	const FIRSTINFRACTION          = 'FirstInfraction';
	const CAMETOAGREEMENT          = 'CameToAgreement';
	const ITEMRETURNED             = 'ItemReturned';
	const BUYERPAIDAUCTIONFEES     = 'BuyerPaidAuctionFees';
	const SELLERRECEIVEDPAYMENT    = 'SellerReceivedPayment';
	const OTHERRESOLUTION          = 'OtherResolution';
	const CLAIMPAID                = 'ClaimPaid';
	const CUSTOMCODE               = 'CustomCode';
}

class DisputeResolutionRecordTypeCodeType
{
	const STRIKEBUYER                = 'StrikeBuyer';
	const SUSPENDBUYER               = 'SuspendBuyer';
	const FVFCREDIT                  = 'FVFCredit';
	const INSERTIONFEECREDIT         = 'InsertionFeeCredit';
	const APPEALBUYERSTRIKE          = 'AppealBuyerStrike';
	const UNSUSPENDBUYER             = 'UnsuspendBuyer';
	const REVERSEFVFCREDIT           = 'ReverseFVFCredit';
	const REVERSEINSERTIONFEECREDIT  = 'ReverseInsertionFeeCredit';
	const GENERATECSTICKETFORSUSPEND = 'GenerateCSTicketForSuspend';
	const FVFCREDITNOTGRANTED        = 'FVFCreditNotGranted';
	const ITEMNOTRECEIVEDCLAIMFILED  = 'ItemNotReceivedClaimFiled';
	const CUSTOMCODE                 = 'CustomCode';
}

/**
 * DisputeResolutionType
 * Contains all information about a dispute resolution. A dispute can have a resolution even
 * if the seller does not receive payment. The resolution can have various results, including
 * a Final Value Fee credit to the seller or a strike to the buyer.
 */
class DisputeResolutionType
{
	/**
	 * @var DisputeResolutionRecordTypeCodeType | The action resulting from the resolution, affecting either the buyer or the seller.
	 */
	public $disputeresolutionrecordtype;
	/**
	 * @var DisputeResolutionReasonCodeType | The reason for the resolution. The DisputeResolutionReason results in the action described
	 * by the DisputeResolutionRecordType.
	 */
	public $disputeresolutionreason;
	/**
	 * @var dateTime | The date and time the dispute was resolved, in GMT.
	 */
	public $resolutiontime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param DisputeResolutionRecordTypeCodeType $val
	 * @throws Exception
	 */
	public function setDisputeResolutionRecordType($val)
	{
        $this->disputeresolutionrecordtype = (int)$val;
	}

	/**
	 * @param DisputeResolutionReasonCodeType $val
	 * @throws Exception
	 */
	public function setDisputeResolutionReason($val)
	{
        $this->disputeresolutionreason = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setResolutionTime($val)
	{
        $this->resolutiontime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DisputeSortTypeCodeType
{
	const NONE                               = 'None';
	const DISPUTECREATEDTIMEASCENDING        = 'DisputeCreatedTimeAscending';
	const DISPUTECREATEDTIMEDESCENDING       = 'DisputeCreatedTimeDescending';
	const DISPUTESTATUSASCENDING             = 'DisputeStatusAscending';
	const DISPUTESTATUSDESCENDING            = 'DisputeStatusDescending';
	const DISPUTECREDITELIGIBILITYASCENDING  = 'DisputeCreditEligibilityAscending';
	const DISPUTECREDITELIGIBILITYDESCENDING = 'DisputeCreditEligibilityDescending';
	const CUSTOMCODE                         = 'CustomCode';
}

class DisputeStateCodeType
{
	const LOCKED                                    = 'Locked';
	const CLOSED                                    = 'Closed';
	const BUYERFIRSTRESPONSEPAYOPTION               = 'BuyerFirstResponsePayOption';
	const BUYERFIRSTRESPONSENOPAYOPTION             = 'BuyerFirstResponseNoPayOption';
	const BUYERFIRSTRESPONSEPAYOPTIONLATERESPONSE   = 'BuyerFirstResponsePayOptionLateResponse';
	const BUYERFIRSTRESPONSENOPAYOPTIONLATERESPONSE = 'BuyerFirstResponseNoPayOptionLateResponse';
	const MUTUALCOMMUNICATIONPAYOPTION              = 'MutualCommunicationPayOption';
	const MUTUALCOMMUNICATIONNOPAYOPTION            = 'MutualCommunicationNoPayOption';
	const PENDINGRESOLVE                            = 'PendingResolve';
	const MUTUALWITHDRAWALAGREEMENT                 = 'MutualWithdrawalAgreement';
	const MUTUALWITHDRAWALAGREEMENTLATE             = 'MutualWithdrawalAgreementLate';
	const NOTRECEIVEDNOSELLERRESPONSE               = 'NotReceivedNoSellerResponse';
	const NOTASDESCRIBEDNOSELLERRESPONSE            = 'NotAsDescribedNoSellerResponse';
	const NOTRECEIVEDMUTUALCOMMUNICATION            = 'NotReceivedMutualCommunication';
	const NOTASDESCRIBEDMUTUALCOMMUNICATION         = 'NotAsDescribedMutualCommunication';
	const MUTUALAGREEMENTORBUYERRETURNINGITEM       = 'MutualAgreementOrBuyerReturningItem';
	const CLAIMOPENED                               = 'ClaimOpened';
	const NODOCUMENTATION                           = 'NoDocumentation';
	const CLAIMCLOSED                               = 'ClaimClosed';
	const CLAIMDENIED                               = 'ClaimDenied';
	const CLAIMPENDING                              = 'ClaimPending';
	const CLAIMPAYMENTPENDING                       = 'ClaimPaymentPending';
	const CLAIMPAID                                 = 'ClaimPaid';
	const CLAIMRESOLVED                             = 'ClaimResolved';
	const CLAIMSUBMITTED                            = 'ClaimSubmitted';
	const CUSTOMCODE                                = 'CustomCode';
}

class DisputeStatusCodeType
{
	const CLOSED                             = 'Closed';
	const WAITINGFORSELLERRESPONSE           = 'WaitingForSellerResponse';
	const WAITINGFORBUYERRESPONSE            = 'WaitingForBuyerResponse';
	const CLOSEDFVFCREDITSTRIKE              = 'ClosedFVFCreditStrike';
	const CLOSEDNOFVFCREDITSTRIKE            = 'ClosedNoFVFCreditStrike';
	const CLOSEDFVFCREDITNOSTRIKE            = 'ClosedFVFCreditNoStrike';
	const CLOSEDNOFVFCREDITNOSTRIKE          = 'ClosedNoFVFCreditNoStrike';
	const STRIKEAPPEALEDAFTERCLOSING         = 'StrikeAppealedAfterClosing';
	const FVFCREDITREVERSEDAFTERCLOSING      = 'FVFCreditReversedAfterClosing';
	const STRIKEAPPEALEDANDFVFCREDITREVERSED = 'StrikeAppealedAndFVFCreditReversed';
	const CLAIMOPENED                        = 'ClaimOpened';
	const NODOCUMENTATION                    = 'NoDocumentation';
	const CLAIMCLOSED                        = 'ClaimClosed';
	const CLAIMDENIED                        = 'ClaimDenied';
	const CLAIMINPROCESS                     = 'ClaimInProcess';
	const CLAIMAPPROVED                      = 'ClaimApproved';
	const CLAIMPAID                          = 'ClaimPaid';
	const CLAIMRESOLVED                      = 'ClaimResolved';
	const CLAIMSUBMITTED                     = 'ClaimSubmitted';
	const CUSTOMCODE                         = 'CustomCode';
}

/**
 * DuplicateInvocationDetailsType
 * Contains properties that provide information on duplicate uses of InvocationIDs.
 */
class DuplicateInvocationDetailsType
{
	/**
	 * @var UUIDType | The duplicate InvocationID.
	 */
	public $duplicateinvocationid;
	/**
	 * @var InvocationStatusType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var string | The id that identifies the business item the previous API invocation created. For example,
	 * the ItemID of the item created by an AddItem call.
	 */
	public $invocationtrackingid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param UUIDType $val
	 * @throws Exception
	 */
	public function setDuplicateInvocationID($val)
	{
        $this->duplicateinvocationid = (int)$val;
	}

	/**
	 * @param InvocationStatusType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setInvocationTrackingID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for InvocationTrackingID');
        }
        $this->invocationtrackingid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ErrorClassificationCodeType
{
	const REQUESTERROR = 'RequestError';
	const SYSTEMERROR  = 'SystemError';
	const CUSTOMCODE   = 'CustomCode';
}

class ErrorHandlingCodeType
{
	const LEGACY       = 'Legacy';
	const BESTEFFORT   = 'BestEffort';
	const ALLORNOTHING = 'AllOrNothing';
	const FAILONERROR  = 'FailOnError';
}

/**
 * ErrorParameterType
 * A variable that contains specific information about the context of this error. For example,
 * if you pass in an attribute set ID that does not match the specified category, the attribute
 * set ID might be returned as an error parameter. Use error parameters to flag fields that
 * users need to correct. Also use error parameters to distinguish between errors when multiple errors
 * are returned.
 */
class ErrorParameterType
{
	/**
	 * @var string | Specifies the value for the property.
	 */
	public $value;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var string
	 */
	public $paramid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Value');
        }
        $this->value = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setParamID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ParamID');
        }
        $this->paramid = (int)$val;
	}
}

/**
 * ErrorType
 * These are request errors (as opposed to system errors) that occur due to problems with business-level
 * data (e.g., an invalid combination of arguments) that the application passed in.
 */
class ErrorType
{
	/**
	 * @var string | Brief version of the tip message.
	 */
	public $shortmessage;
	/**
	 * @var string | Detailed version of the tip message.
	 */
	public $longmessage;
	/**
	 * @var token | Reason for SMS subscription error (postback from thired-party integrator).
	 */
	public $errorcode;
	/**
	 * @var boolean | Indicates whether the error message text is intended to be displayed to an end user or
	 * intended only to be parsed by the application. If true or not present (the default), the
	 * message text is intended for the end user. If false, the message text is intended for the
	 * application, and the application should translate the error into a more appropriate message. Only
	 * applicable to Item Specifics errors and warnings returned from listing requests.
	 */
	public $userdisplayhint;
	/**
	 * @var SeverityCodeType | Indicates whether the error is a severe error (causing the request to fail) or an informational
	 * error (a warning) that should be communicated to the user.
	 */
	public $severitycode;
	/**
	 * @var ErrorParameterType | This optional element carries a list of context-specific error variables that indicate
	 * details about the error condition. These are useful when multiple instances of ErrorType
	 * are returned.
	 */
	public $errorparameters;
	/**
	 * @var ErrorClassificationCodeType | API errors are divided between two classes: system errors and request errors.
	 */
	public $errorclassification;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShortMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShortMessage');
        }
        $this->shortmessage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLongMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LongMessage');
        }
        $this->longmessage = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setErrorCode($val)
	{
        $this->errorcode = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUserDisplayHint($val)
	{
        $this->userdisplayhint = (int)$val;
	}

	/**
	 * @param SeverityCodeType $val
	 * @throws Exception
	 */
	public function setSeverityCode($val)
	{
        $this->severitycode = (int)$val;
	}

	/**
	 * @param ErrorParameterType $val
	 * @throws Exception
	 */
	public function setErrorParameters($val)
	{
        $this->errorparameters = (int)$val;
	}

	/**
	 * @param ErrorClassificationCodeType $val
	 * @throws Exception
	 */
	public function setErrorClassification($val)
	{
        $this->errorclassification = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class InvocationStatusType
{
	const INPROGRESS = 'InProgress';
	const SUCCESS    = 'Success';
	const FAILURE    = 'Failure';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * MeasureType
 * Basic type for specifying measures and the system of measurement. A decimal value (e.g.,
 * 10.25) is meaningful as a measure when accompanied by a definition of the unit of measure
 * (e.g., Pounds), in which case the value specifies the quantity of that unit. A MeasureType
 * expresses both the value (a decimal) and, optionally, the unit and the system of measurement. Details
 * such as shipping weights are specified as measure types.
 */
class MeasureType
{
	/**
	 * @var decimal
	 */
	public $_;
	/**
	 * @var token
	 */
	public $unit;
	/**
	 * @var MeasurementSystemCodeType
	 */
	public $measurementsystem;
	/**
	 * @param decimal $val
	 * @throws Exception
	 */
	public function set($val)
	{
        $this->_ = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setUnit($val)
	{
        $this->unit = (int)$val;
	}

	/**
	 * @param MeasurementSystemCodeType $val
	 * @throws Exception
	 */
	public function setMeasurementSystem($val)
	{
        $this->measurementsystem = (int)$val;
	}
}

class MeasurementSystemCodeType
{
	const ENGLISH = 'English';
	const METRIC  = 'Metric';
}

/**
 * PaginationType
 * Contains data for controlling pagination in API requests. Pagination of returned data is
 * required for some calls and not needed in or not supported for some calls. See the documentation for
 * individual calls to determine whether pagination is supported, required, or desirable.
 */
class PaginationType
{
	/**
	 * @var int | Specifies the maximum number of entries to return in a single call. If the number of entries
	 * that can be returned is less than the value in EntriesPerPage, then the lower number is
	 * returned. For most calls, the max is 200 and the default is 25. For GetUserDisputes, the
	 * value is hard-coded at 200, and any input is ignored. See the documentation for other individual
	 * calls to determine the correct max and default values. For GetOrders, not applicable to
	 * eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $entriesperpage;
	/**
	 * @var int | Specifies the number of the page of data to return in the current call. Default is 1 for
	 * most calls. For some calls, the default is 0. Specify a positive value equal to or lower
	 * than the number of pages available (which you determine by examining the results of your
	 * initial request). See the documentation for other individual calls to determine the correct default
	 * value. For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com).
	 */
	public $pagenumber;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setEntriesPerPage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->entriesperpage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pagenumber = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SeverityCodeType
{
	const WARNING    = 'Warning';
	const ERROR      = 'Error';
	const CUSTOMCODE = 'CustomCode';
}

class UuIdType
{}

class UserIdPasswordType
{
	/**
	 * @var string | The application ID that is unique to each application you (or your company) has registered
	 * with the eBay Developers Program. If you are executing a call in the Sandbox, this is the
	 * "AppId" value that eBay issued to you when you received your Sandbox keys. If you are executing
	 * a call in Production, this is the "AppId" value that eBay issued to you when you received
	 * your Production keys.
	 */
	public $appid;
	/**
	 * @var string | The unique developer ID that the eBay Developers Program issued to you (or your company).
	 * If you are executing a call in the Sandbox, this is the "DevId" value that eBay issued
	 * to you when you received your Sandbox keys. Typically, you receive your Sandbox keys when
	 * you register as a new developer. If you are executing a call in Production, this is the
	 * "DevId" value that eBay issued to you when you received your Production keys. Typically,
	 * you receive your Production keys when you certify an application.
	 */
	public $devid;
	/**
	 * @var string | Authentication certificate that authenticates the application when making API calls. If
	 * you are executing a call in the Sandbox, this is the "CertId" value that eBay issued to
	 * you when you received your Sandbox keys. If you are executing a call in Production, this
	 * is the "CertId" value that eBay issued to you when you received your Production keys. This
	 * is unrelated to auth tokens.
	 */
	public $authcert;
	/**
	 * @var string | eBay user ID (i.e., eBay.com Web site login name) for the user the application is retrieving
	 * a token for. This is typically the application's end-user (not the developer).
	 */
	public $username;
	/**
	 * @var string | Password for the user specified in Username.
	 */
	public $password;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAppId($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AppId');
        }
        $this->appid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDevId($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DevId');
        }
        $this->devid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAuthCert($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AuthCert');
        }
        $this->authcert = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setUsername($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Username');
        }
        $this->username = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPassword($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Password');
        }
        $this->password = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class WarningLevelCodeType
{
	const LOW  = 'Low';
	const HIGH = 'High';
}

class AccessRuleCurrentStatusCodeType
{
	const NOTSET                    = 'NotSet';
	const HOURLYLIMITEXCEEDED       = 'HourlyLimitExceeded';
	const DAILYLIMITEXCEEDED        = 'DailyLimitExceeded';
	const PERIODICLIMITEXCEEDED     = 'PeriodicLimitExceeded';
	const HOURLYSOFTLIMITEXCEEDED   = 'HourlySoftLimitExceeded';
	const DAILYSOFTLIMITEXCEEDED    = 'DailySoftLimitExceeded';
	const PERIODICSOFTLIMITEXCEEDED = 'PeriodicSoftLimitExceeded';
	const CUSTOMCODE                = 'CustomCode';
}

class AccessRuleStatusCodeType
{
	const RULEOFF            = 'RuleOff';
	const RULEON             = 'RuleOn';
	const APPLICATIONBLOCKED = 'ApplicationBlocked';
	const CUSTOMCODE         = 'CustomCode';
}

class AccountDetailEntryCodeType
{
	const UNKNOWN                                         = 'Unknown';
	const FEEINSERTION                                    = 'FeeInsertion';
	const FEEBOLD                                         = 'FeeBold';
	const FEEFEATURED                                     = 'FeeFeatured';
	const FEECATEGORYFEATURED                             = 'FeeCategoryFeatured';
	const FEEFINALVALUE                                   = 'FeeFinalValue';
	const PAYMENTCHECK                                    = 'PaymentCheck';
	const PAYMENTCC                                       = 'PaymentCC';
	const CREDITCOURTESY                                  = 'CreditCourtesy';
	const CREDITNOSALE                                    = 'CreditNoSale';
	const CREDITPARTIALSALE                               = 'CreditPartialSale';
	const REFUNDCC                                        = 'RefundCC';
	const REFUNDCHECK                                     = 'RefundCheck';
	const FINANCECHARGE                                   = 'FinanceCharge';
	const AWDEBIT                                         = 'AWDebit';
	const AWCREDIT                                        = 'AWCredit';
	const AWMEMO                                          = 'AWMemo';
	const CREDITDUPLICATELISTING                          = 'CreditDuplicateListing';
	const FEEPARTIALSALE                                  = 'FeePartialSale';
	const PAYMENTELECTRONICTRANSFERREVERSAL               = 'PaymentElectronicTransferReversal';
	const PAYMENTCCONCE                                   = 'PaymentCCOnce';
	const FEERETURNEDCHECK                                = 'FeeReturnedCheck';
	const FEEREDEPOSITCHECK                               = 'FeeRedepositCheck';
	const PAYMENTCASH                                     = 'PaymentCash';
	const CREDITINSERTION                                 = 'CreditInsertion';
	const CREDITBOLD                                      = 'CreditBold';
	const CREDITFEATURED                                  = 'CreditFeatured';
	const CREDITCATEGORYFEATURED                          = 'CreditCategoryFeatured';
	const CREDITFINALVALUE                                = 'CreditFinalValue';
	const FEENSFCHECK                                     = 'FeeNSFCheck';
	const FEERETURNCHECKCLOSE                             = 'FeeReturnCheckClose';
	const MEMO                                            = 'Memo';
	const PAYMENTMONEYORDER                               = 'PaymentMoneyOrder';
	const CREDITCARDONFILE                                = 'CreditCardOnFile';
	const CREDITCARDNOTONFILE                             = 'CreditCardNotOnFile';
	const INVOICED                                        = 'Invoiced';
	const INVOICEDCREDITCARD                              = 'InvoicedCreditCard';
	const CREDITTRANSFERFROM                              = 'CreditTransferFrom';
	const DEBITTRANSFERTO                                 = 'DebitTransferTo';
	const INVOICECREDITBALANCE                            = 'InvoiceCreditBalance';
	const EBAYDEBIT                                       = 'eBayDebit';
	const EBAYCREDIT                                      = 'eBayCredit';
	const PROMOTIONALCREDIT                               = 'PromotionalCredit';
	const CCNOTONFILEPERCUSTREQ                           = 'CCNotOnFilePerCustReq';
	const CREDITINSERTIONFEE                              = 'CreditInsertionFee';
	const CCPAYMENTREJECTED                               = 'CCPaymentRejected';
	const FEEGIFTICON                                     = 'FeeGiftIcon';
	const CREDITGIFTICON                                  = 'CreditGiftIcon';
	const FEEGALLERY                                      = 'FeeGallery';
	const FEEFEATUREDGALLERY                              = 'FeeFeaturedGallery';
	const CREDITGALLERY                                   = 'CreditGallery';
	const CREDITFEATUREDGALLERY                           = 'CreditFeaturedGallery';
	const ITEMMOVEFEE                                     = 'ItemMoveFee';
	const OUTAGECREDIT                                    = 'OutageCredit';
	const CREDITPSA                                       = 'CreditPSA';
	const CREDITPCGS                                      = 'CreditPCGS';
	const FEERESERVE                                      = 'FeeReserve';
	const CREDITRESERVE                                   = 'CreditReserve';
	const EBAYVISACREDIT                                  = 'eBayVISACredit';
	const BBADMINCREDIT                                   = 'BBAdminCredit';
	const BBADMINDEBIT                                    = 'BBAdminDebit';
	const REFERRERCREDIT                                  = 'ReferrerCredit';
	const REFERRERDEBIT                                   = 'ReferrerDebit';
	const SWITCHCURRENCY                                  = 'SwitchCurrency';
	const PAYMENTGIFTCERTIFICATE                          = 'PaymentGiftCertificate';
	const PAYMENTWIRETRANSFER                             = 'PaymentWireTransfer';
	const PAYMENTHOMEBANKING                              = 'PaymentHomeBanking';
	const PAYMENTELECTRONICTRANSFER                       = 'PaymentElectronicTransfer';
	const PAYMENTADJUSTMENTCREDIT                         = 'PaymentAdjustmentCredit';
	const PAYMENTADJUSTMENTDEBIT                          = 'PaymentAdjustmentDebit';
	const CHARGEOFF                                       = 'Chargeoff';
	const CHARGEOFFRECOVERY                               = 'ChargeoffRecovery';
	const CHARGEOFFBANKRUPTCY                             = 'ChargeoffBankruptcy';
	const CHARGEOFFSUSPENDED                              = 'ChargeoffSuspended';
	const CHARGEOFFDECEASED                               = 'ChargeoffDeceased';
	const CHARGEOFFOTHER                                  = 'ChargeoffOther';
	const CHARGEOFFWACKO                                  = 'ChargeoffWacko';
	const FINANCECHARGEREVERSAL                           = 'FinanceChargeReversal';
	const FVFCREDITREVERSAL                               = 'FVFCreditReversal';
	const FOREIGNFUNDSCONVERT                             = 'ForeignFundsConvert';
	const FOREIGNFUNDSCHECKREVERSAL                       = 'ForeignFundsCheckReversal';
	const EOMRESTRICTION                                  = 'EOMRestriction';
	const ALLFEESCREDIT                                   = 'AllFeesCredit';
	const SETONHOLD                                       = 'SetOnHold';
	const REVERTUSERSTATE                                 = 'RevertUserState';
	const DIRECTDEBITONFILE                               = 'DirectDebitOnFile';
	const DIRECTDEBITNOTONFILE                            = 'DirectDebitNotOnFile';
	const PAYMENTDIRECTDEBIT                              = 'PaymentDirectDebit';
	const DIRECTDEBITREVERSAL                             = 'DirectDebitReversal';
	const DIRECTDEBITRETURNEDITEM                         = 'DirectDebitReturnedItem';
	const FEEHIGHLIGHT                                    = 'FeeHighlight';
	const CREDITHIGHLIGHT                                 = 'CreditHighlight';
	const BULKUSERSUSPENSION                              = 'BulkUserSuspension';
	const FEEREALESTATE30DAYSLISTING                      = 'FeeRealEstate30DaysListing';
	const CREDITREALESTATE30DAYSLISTING                   = 'CreditRealEstate30DaysListing';
	const TRADINGLIMITOVERRIDEON                          = 'TradingLimitOverrideOn';
	const TRADINGLIMITOVERRIDEOFF                         = 'TradingLimitOverrideOff';
	const EQUIFAXREALTIMEFEE                              = 'EquifaxRealtimeFee';
	const CREDITEQUIFAXREALTIMEFEE                        = 'CreditEquifaxRealtimeFee';
	const PAYMENTEQUIFAXDEBIT                             = 'PaymentEquifaxDebit';
	const PAYMENTEQUIFAXCREDIT                            = 'PaymentEquifaxCredit';
	const MERGED                                          = 'Merged';
	const AUTOTRADERON                                    = 'AutoTraderOn';
	const AUTOTRADEROFF                                   = 'AutoTraderOff';
	const PAPERINVOICEON                                  = 'PaperInvoiceOn';
	const PAPERINVOICEOFF                                 = 'PaperInvoiceOff';
	const ACCOUNTSTATESWITCH                              = 'AccountStateSwitch';
	const FVFCREDITREVERSALAUTOMATIC                      = 'FVFCreditReversalAutomatic';
	const CREDITSOFTOUTAGE                                = 'CreditSoftOutage';
	const LACATALOGFEE                                    = 'LACatalogFee';
	const LAEXTRAITEM                                     = 'LAExtraItem';
	const LACATALOGITEMFEEREFUND                          = 'LACatalogItemFeeRefund';
	const LACATALOGINSERTIONREFUND                        = 'LACatalogInsertionRefund';
	const LAFINALVALUEFEE                                 = 'LAFinalValueFee';
	const LAFINALVALUEFEEREFUND                           = 'LAFinalValueFeeRefund';
	const LABUYERPREMIUMPERCENTAGEFEE                     = 'LABuyerPremiumPercentageFee';
	const LABUYERPREMIUMPERCENTAGEFEEREFUND               = 'LABuyerPremiumPercentageFeeRefund';
	const LAAUDIOVIDEOFEE                                 = 'LAAudioVideoFee';
	const LAAUDIOVIDEOFEEREFUND                           = 'LAAudioVideoFeeRefund';
	const FEEIPIXPHOTO                                    = 'FeeIPIXPhoto';
	const FEEIPIXSLIDESHOW                                = 'FeeIPIXSlideShow';
	const CREDITIPIXPHOTO                                 = 'CreditIPIXPhoto';
	const CREDITIPIXSLIDESHOW                             = 'CreditIPIXSlideShow';
	const FEETENDAYAUCTION                                = 'FeeTenDayAuction';
	const CREDITTENDAYAUCTION                             = 'CreditTenDayAuction';
	const TEMPORARYCREDIT                                 = 'TemporaryCredit';
	const TEMPORARYCREDITREVERSAL                         = 'TemporaryCreditReversal';
	const SUBSCRIPTIONAABASIC                             = 'SubscriptionAABasic';
	const SUBSCRIPTIONAAPRO                               = 'SubscriptionAAPro';
	const CREDITAABASIC                                   = 'CreditAABasic';
	const CREDITAAPRO                                     = 'CreditAAPro';
	const FEELARGEPICTURE                                 = 'FeeLargePicture';
	const CREDITLARGEPICTURE                              = 'CreditLargePicture';
	const FEEPICTUREPACK                                  = 'FeePicturePack';
	const CREDITPICTUREPACKPARTIAL                        = 'CreditPicturePackPartial';
	const CREDITPICTUREPACKFULL                           = 'CreditPicturePackFull';
	const SUBSCRIPTIONEBAYSTORES                          = 'SubscriptioneBayStores';
	const CREDITEBAYSTORES                                = 'CrediteBayStores';
	const FEEINSERTIONFIXEDPRICE                          = 'FeeInsertionFixedPrice';
	const CREDITINSERTIONFIXEDPRICE                       = 'CreditInsertionFixedPrice';
	const FEEFINALVALUEFIXEDPRICE                         = 'FeeFinalValueFixedPrice';
	const CREDITFINALVALUEFIXEDPRICE                      = 'CreditFinalValueFixedPrice';
	const ELECTRONICINVOICEON                             = 'ElectronicInvoiceOn';
	const ELECTRONICINVOICEOFF                            = 'ElectronicInvoiceOff';
	const FLAGDDDDPENDING                                 = 'FlagDDDDPending';
	const FLAGDDPAYMENTCONFIRMED                          = 'FlagDDPaymentConfirmed';
	const FIXEDPRICEDURATIONFEE                           = 'FixedPriceDurationFee';
	const FIXEDPRICEDURATIONCREDIT                        = 'FixedPriceDurationCredit';
	const BUYITNOWFEE                                     = 'BuyItNowFee';
	const BUYITNOWCREDIT                                  = 'BuyItNowCredit';
	const FEESCHEDULE                                     = 'FeeSchedule';
	const CREDITSCHEDULE                                  = 'CreditSchedule';
	const SUBSCRIPTIONSMBASIC                             = 'SubscriptionSMBasic';
	const SUBSCRIPTIONSMBASICPRO                          = 'SubscriptionSMBasicPro';
	const CREDITSMBASIC                                   = 'CreditSMBasic';
	const CREDITSMBASICPRO                                = 'CreditSMBasicPro';
	const STORESGTCFEE                                    = 'StoresGTCFee';
	const STORESGTCCREDIT                                 = 'StoresGTCCredit';
	const LISTINGDESIGNERFEE                              = 'ListingDesignerFee';
	const LISTINGDESIGNERCREDIT                           = 'ListingDesignerCredit';
	const EXTENDEDAUCTIONFEE                              = 'ExtendedAuctionFee';
	const EXTENDEDACUTIONCREDIT                           = 'ExtendedAcutionCredit';
	const PAYPALOTPSUCC                                   = 'PayPalOTPSucc';
	const PAYPALOTPPEND                                   = 'PayPalOTPPend';
	const PAYPALFAILED                                    = 'PayPalFailed';
	const PAYPALCHARGEBACK                                = 'PayPalChargeBack';
	const CHARGEBACK                                      = 'ChargeBack';
	const CHARGEBACKREVERSAL                              = 'ChargeBackReversal';
	const PAYPALREFUND                                    = 'PayPalRefund';
	const BONUSPOINTSADDITION                             = 'BonusPointsAddition';
	const BONUSPOINTSREDUCTION                            = 'BonusPointsReduction';
	const BONUSPOINTSPAYMENTAUTOMATIC                     = 'BonusPointsPaymentAutomatic';
	const BONUSPOINTSPAYMENTMANUAL                        = 'BonusPointsPaymentManual';
	const BONUSPOINTSPAYMENTREVERSAL                      = 'BonusPointsPaymentReversal';
	const BONUSPOINTSCASHPAYOUT                           = 'BonusPointsCashPayout';
	const VATCREDIT                                       = 'VATCredit';
	const VATDEBIT                                        = 'VATDebit';
	const VATSTATUSCHANGEPENDING                          = 'VATStatusChangePending';
	const VATSTATUSCHANGEAPPROVED                         = 'VATStatusChangeApproved';
	const VATSTATUSCHANGE_DENIED                          = 'VATStatusChange_Denied';
	const VATSTATUSDELETEDBYCSR                           = 'VATStatusDeletedByCSR';
	const VATSTATUSDELETEDBYUSER                          = 'VATStatusDeletedByUser';
	const SMPROLISTINGDESIGNERFEE                         = 'SMProListingDesignerFee';
	const SMPROLISTINGDESIGNERCREDIT                      = 'SMProListingDesignerCredit';
	const STORESSUCCESSFULLISTINGFEE                      = 'StoresSuccessfulListingFee';
	const STORESSUCCESSFULLISTINGFEECREDIT                = 'StoresSuccessfulListingFeeCredit';
	const STORESREFERRALFEE                               = 'StoresReferralFee';
	const STORESREFERRALCREDIT                            = 'StoresReferralCredit';
	const SUBTITLEFEE                                     = 'SubtitleFee';
	const SUBTITLEFEECREDIT                               = 'SubtitleFeeCredit';
	const EBAYSTOREINVENTORYSUBSCRIPTIONCREDIT            = 'eBayStoreInventorySubscriptionCredit';
	const AUTOPMNTREQEXEMPT                               = 'AutoPmntReqExempt';
	const AUTOPMNTREQREIN                                 = 'AutoPmntReqRein';
	const PICTUREMANAGERSUBSCRIPTIONFEE                   = 'PictureManagerSubscriptionFee';
	const PICTUREMANAGERSUBSCRIPTIONFEECREDIT             = 'PictureManagerSubscriptionFeeCredit';
	const SELLERREPORTSBASICFEE                           = 'SellerReportsBasicFee';
	const SELLERREPORTSBASICCREDIT                        = 'SellerReportsBasicCredit';
	const SELLERREPORTSPLUSFEE                            = 'SellerReportsPlusFee';
	const SELLERREPORTSPLUSCREDIT                         = 'SellerReportsPlusCredit';
	const PAYPALONFILE                                    = 'PaypalOnFile';
	const PAYPALONFILEBYCSR                               = 'PaypalOnFileByCSR';
	const PAYPALOFFFILE                                   = 'PaypalOffFile';
	const BORDERFEE                                       = 'BorderFee';
	const BORDERFEECREDIT                                 = 'BorderFeeCredit';
	const FEESEARCHABLEMOBILEDE                           = 'FeeSearchableMobileDE';
	const SALESREPORTSPLUSFEE                             = 'SalesReportsPlusFee';
	const SALESREPORTSPLUSCREDIT                          = 'SalesReportsPlusCredit';
	const CREDITSEARCHABLEMOBILEDE                        = 'CreditSearchableMobileDE';
	const EMAILMARKETINGFEE                               = 'EmailMarketingFee';
	const EMAILMARKETINGCREDIT                            = 'EmailMarketingCredit';
	const FEEPICTURESHOW                                  = 'FeePictureShow';
	const CREDITPICTURESHOW                               = 'CreditPictureShow';
	const PROPACKBUNDLEFEE                                = 'ProPackBundleFee';
	const PROPACKBUNDLEFEECREDIT                          = 'ProPackBundleFeeCredit';
	const BASICUPGRADEPACKBUNDLEFEE                       = 'BasicUpgradePackBundleFee';
	const BASICUPGRADEPACKBUNDLEFEECREDIT                 = 'BasicUpgradePackBundleFeeCredit';
	const VALUEPACKBUNDLEFEE                              = 'ValuePackBundleFee';
	const VALUEPACKBUNDLEFEECREDIT                        = 'ValuePackBundleFeeCredit';
	const PROPACKPLUSBUNDLEFEE                            = 'ProPackPlusBundleFee';
	const PROPACKPLUSBUNDLEFEECREDIT                      = 'ProPackPlusBundleFeeCredit';
	const FINALENTRY                                      = 'FinalEntry';
	const CUSTOMCODE                                      = 'CustomCode';
	const EXTENDEDDURATIONFEE                             = 'ExtendedDurationFee';
	const EXTENDEDDURATIONFEECREDIT                       = 'ExtendedDurationFeeCredit';
	const INTERNATIONALLISTINGFEE                         = 'InternationalListingFee';
	const INTERNATIONALLISTINGCREDIT                      = 'InternationalListingCredit';
	const MARKETPLACERESEARCHEXPIREDSUBSCRIPTIONFEE       = 'MarketplaceResearchExpiredSubscriptionFee';
	const MARKETPLACERESEARCHEXPIREDSUBSCRIPTIONFEECREDIT = 'MarketplaceResearchExpiredSubscriptionFeeCredit';
	const MARKETPLACERESEARCHBASICSUBSCRIPTIONFEE         = 'MarketplaceResearchBasicSubscriptionFee';
	const MARKETPLACERESEARCHBASICSUBSCRIPTIONFEECREDIT   = 'MarketplaceResearchBasicSubscriptionFeeCredit';
	const MARKETPLACERESEARCHPROSUBSCRIPTIONFEE           = 'MarketplaceResearchProSubscriptionFee';
	const BASICBUNDLEFEE                                  = 'BasicBundleFee';
	const BASICBUNDLEFEECREDIT                            = 'BasicBundleFeeCredit';
	const MARKETPLACERESEARCHPROSUBSCRIPTIONFEECREDIT     = 'MarketplaceResearchProSubscriptionFeeCredit';
	const VEHICLELOCALSUBSCRIPTIONFEE                     = 'VehicleLocalSubscriptionFee';
	const VEHICLELOCALSUBSCRIPTIONFEECREDIT               = 'VehicleLocalSubscriptionFeeCredit';
	const VEHICLELOCALINSERTIONFEE                        = 'VehicleLocalInsertionFee';
	const VEHICLELOCALINSERTIONFEECREDIT                  = 'VehicleLocalInsertionFeeCredit';
	const VEHICLELOCALFINALVALUEFEE                       = 'VehicleLocalFinalValueFee';
	const VEHICLELOCALFINALVALUEFEECREDIT                 = 'VehicleLocalFinalValueFeeCredit';
	const VEHICLELOCALGTCFEE                              = 'VehicleLocalGTCFee';
	const VEHICLELOCALGTCFEECREDIT                        = 'VehicleLocalGTCFeeCredit';
	const EBAYMOTORSPROFEE                                = 'eBayMotorsProFee';
	const CREDITEBAYMOTORSPROFEE                          = 'CrediteBayMotorsProFee';
	const EBAYMOTORSPROFEATUREFEE                         = 'eBayMotorsProFeatureFee';
	const CREDITEBAYMOTORSPROFEATUREFEE                   = 'CrediteBayMotorsProFeatureFee';
	const FEEGALLERYPLUS                                  = 'FeeGalleryPlus';
	const CREDITGALLERYPLUS                               = 'CreditGalleryPlus';
}

/**
 * AccountEntriesType
 * Collection of zero, one, or multiple individual detail account entries. Contains
 * one AccountEntry object for each account entry returned. See the schema        documentation
 * for AccountEntryType for details on its properties. You can uniquely identify        the
 * entries that the GetAccount call returns within the AccountEntries tag.        Specifically,
 * the following fields, returned within the AccountEntries tag,        can be used in combination
 * as a unique key: AccountEntry.Date, AccountEntry.AccountDetailsEntryType,        AccountEntry.ItemID,
 * and AccountEntry.RefNumber.
 */
class AccountEntriesType
{
	/**
	 * @var AccountEntryType | Contains the data for one account entry. (See the schema                documentation for
	 * AccountEntryType for details on its properties.)
	 */
	public $accountentry;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AccountEntryType $val
	 * @throws Exception
	 */
	public function setAccountEntry($val)
	{
        $this->accountentry = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class AccountEntrySortTypeCodeType
{
	const NONE                              = 'None';
	const ACCOUNTENTRYCREATEDTIMEASCENDING  = 'AccountEntryCreatedTimeAscending';
	const ACCOUNTENTRYCREATEDTIMEDESCENDING = 'AccountEntryCreatedTimeDescending';
	const ACCOUNTENTRYITEMNUMBERASCENDING   = 'AccountEntryItemNumberAscending';
	const ACCOUNTENTRYITEMNUMBERDESCENDING  = 'AccountEntryItemNumberDescending';
	const ACCOUNTENTRYFEETYPEASCENDING      = 'AccountEntryFeeTypeAscending';
	const ACCOUNTENTRYFEETYPEDESCENDING     = 'AccountEntryFeeTypeDescending';
	const CUSTOMCODE                        = 'CustomCode';
}

/**
 * AccountEntryType
 * Contains the data for a single account detail entry. Each detail entry is a transaction
 * posted to the account and may be: a credit, a debit, or an administrative action (such as
 * an update putting a credit card on file for the account). You can uniquely identify the
 * entries that the GetAccount call returns within the AccountEntries tag. Specifically, the
 * following fields, returned within the AccountEntries tag, can be used in combination as
 * a unique key: AccountEntry.Date, AccountEntry.AccountDetailsEntryType, AccountEntry.ItemID,
 * and AccountEntry.RefNumber.
 */
class AccountEntryType
{
	/**
	 * @var AccountDetailEntryCodeType | Indicates the type of transaction or reason for the transaction. For example, a value of
	 * FeeGallery indicates a debit for listing an item in the Gallery. Possible values are enumerated
	 * in the AccountDetailEntryCodeType code list.
	 */
	public $accountdetailsentrytype;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var AmountType | Indicates the current balance of the additional account.
	 */
	public $balance;
	/**
	 * @var AmountType | Previous behavior: Credit amount for the entry. Returns 0.00 if the entry is a debit.
	 */
	public $credit;
	/**
	 * @var dateTime | The date the picture was uploaded to the Picture Manager account.
	 */
	public $date;
	/**
	 * @var AmountType | Previous behavior: Debit amount for the entry. Returns 0.00 if the entry is a credit.
	 */
	public $debit;
	/**
	 * @var AmountType | Gross fees that are assessed by eBay (net fees plus VAT, if any). Returned even if VAT
	 * does not apply. With compatibility level 387, the value is positive for debits and negative
	 * for credits, reversing the sign of earlier versions.
	 */
	public $grossdetailamount;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Memo line for the account entry, can be an empty string.
	 */
	public $memo;
	/**
	 * @var AmountType | Net fees that are assessed by eBay, excluding additional surchargesand VAT (if any). Returned
	 * even if VAT does not apply. With compatibility level 387 and higher, the value is positive
	 * for debits (user pays eBay) and negative for credits (eBay pays user), reversing the sign
	 * of earlier versions.
	 */
	public $netdetailamount;
	/**
	 * @var string | eBay reference number for the account entry. May return no value for some account transactions,
	 * such as an administrative action like placing the user's credit card on file.  You can
	 * uniquely identify the entries that the GetAccount call returns within the AccountEntries
	 * tag. Specifically, the following fields, returned within the AccountEntries tag, can be
	 * used in combination as a unique key: AccountEntry.Date, AccountEntry.AccountDetailsEntryType, AccountEntry.ItemID,
	 * and AccountEntry.RefNumber.
	 */
	public $refnumber;
	/**
	 * @var decimal | VAT rate for the item, if any. When the VATPercent is specified, the item's VAT information
	 * appears on the item's listing page. In addition, the seller can choose to print an invoice
	 * that includes the item's net price, VAT percent, VAT amount, and total price. Since VAT
	 * rates vary depending on the item and on the user's country of residence, a seller is responsible
	 * for entering the correct VAT rate; it is not calculated by eBay. To specify a VATPercent,
	 * a seller must have a VAT-ID registered with eBay and must be listing the item on a VAT-enabled
	 * site. Max applicable length is 6 characters, including the decimal (e.g., 12.345). The
	 * scale is 3 decimal places. (If you pass in 12.3456, eBay may round up the value to 12.346.) Note:
	 * The View Item page may display the precision to 2 decimal places with no trailing zeros.
	 * However, the full value you send in is stored.
	 */
	public $vatpercent;
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AccountDetailEntryCodeType $val
	 * @throws Exception
	 */
	public function setAccountDetailsEntryType($val)
	{
        $this->accountdetailsentrytype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBalance($val)
	{
        $this->balance = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setCredit($val)
	{
        $this->credit = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setDate($val)
	{
        $this->date = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setDebit($val)
	{
        $this->debit = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setGrossDetailAmount($val)
	{
        $this->grossdetailamount = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMemo($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Memo');
        }
        $this->memo = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setNetDetailAmount($val)
	{
        $this->netdetailamount = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRefNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RefNumber');
        }
        $this->refnumber = (int)$val;
	}

	/**
	 * @param decimal $val
	 * @throws Exception
	 */
	public function setVATPercent($val)
	{
        $this->vatpercent = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class AccountHistorySelectionCodeType
{
	const LASTINVOICE           = 'LastInvoice';
	const SPECIFIEDINVOICE      = 'SpecifiedInvoice';
	const BETWEENSPECIFIEDDATES = 'BetweenSpecifiedDates';
	const CUSTOMCODE            = 'CustomCode';
}

class AccountStateCodeType
{
	const ACTIVE     = 'Active';
	const PENDING    = 'Pending';
	const INACTIVE   = 'Inactive';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * AccountSummaryType
 * Summary data for the requesting user's seller account as a whole. This includes a balance
 * for the account, any past due amount and date, and defining data for additional accounts
 * (if the user has changed country of residency while having an active eBay account).
 */
class AccountSummaryType
{
	/**
	 * @var AccountStateCodeType | Indicates the current state of the account (such as active or inactive). Possible values
	 * are enumerated in the AccountStateCodeType code list.
	 */
	public $accountstate;
	/**
	 * @var AmountType | Specifies payment made since the previous invoice, but is returned only if AccountHistorySelection
	 * is LastInvoice or Specified Invoice. With compatibility level 387, the value is positive
	 * for debits and negative for credits, reversing the sign of earlier versions.
	 */
	public $invoicepayment;
	/**
	 * @var AmountType | Specifies credits granted since the previous invoice, but is only returned AccountHistorySelection
	 * is LastInvoice or Specified Invoice. With compatibility level 387, the value is positive
	 * for debits and negative for credits, reversing the sign of earlier versions.
	 */
	public $invoicecredit;
	/**
	 * @var AmountType | Specifies fees incurred since the last invoice, including tax if applicable. Returned only
	 * if AccountHistorySelection is LastInvoice or Specified Invoice. With compatibility level
	 * 387, the value is positive for debits and negative for credits, reversing the sign of earlier
	 * versions.
	 */
	public $invoicenewfee;
	/**
	 * @var AdditionalAccountType | Contains the data for one additional account. An AccountSummaryType object
	 *    may return zero, one, or multiple additional accounts. See the schema
	 *  documentation for AdditionalAccountType for details on additional accounts.
	 *      With compatibility level 387, the value is positive for debits                and
	 * negative for credits, reversing the sign of earlier versions.
	 */
	public $additionalaccount;
	/**
	 * @var AmountType | Amount past due, 0.00 if not past due. With compatibility level 387, the value is positive
	 * for debits and negative for credits, reversing the sign of earlier versions.
	 */
	public $amountpastdue;
	/**
	 * @var string | First four digits of the bank account the user associated with the seller account (with
	 * remainder Xed-out). This may be an empty string depending upon the payment type the user
	 * selected for the account (e.g., if no debit-card specified).
	 */
	public $bankaccountinfo;
	/**
	 * @var dateTime | Indicates the date and time BankAccountInfo was last modified, in GMT. (Also see the Data
	 * Types appendix for more information on how GMT dates are handled in SOAP.) This may be
	 * an empty string depending upon the payment type the user selected for the account (e.g.,
	 * if no debit-card specified).
	 */
	public $bankmodifydate;
	/**
	 * @var int | Indicates the billing cycle in which eBay sends a billing invoice to the user. A value
	 * of 0 (zero) indicates an invoice sent on the last day of the month. A value of 15 indicates
	 * an invoice sent on the 15th day of the month.
	 */
	public $billingcycledate;
	/**
	 * @var dateTime | Expiration date for the credit card selected by the user as payment method for the account,
	 * in GMT. (Also see the Data Types appendix for more information on how GMT dates are handled
	 * in SOAP.) Empty string if no credit card is on file or if the account is inactive - even
	 * if there is a credit card on file.
	 */
	public $creditcardexpiration;
	/**
	 * @var string | Last four digits of the credit card the user selected as payment method for the account.
	 * Empty string if no credit is on file.
	 */
	public $creditcardinfo;
	/**
	 * @var dateTime | Indicates the date and time credit card or credit card expiration date was last modified,
	 * in GMT. (Also see the Data Types appendix for more information on how GMT dates are handled
	 * in SOAP.) This may be an empty string depending on the payment method the user selected
	 * for the account (e.g., Empty string if no credit card is on file.)
	 */
	public $creditcardmodifydate;
	/**
	 * @var AmountType | Current balance for the account. Can be 0.00, positive, or negative. With compatibility
	 * level 387, the value is positive for debits and negative for credits, reversing the sign
	 * of earlier versions.
	 */
	public $currentbalance;
	/**
	 * @var string | Email address for the user. You cannot retrieve an email address for any user with whom
	 * you do not have a transactional relationship, regardless of site. Email is only returned
	 * for applicable calls when you are retrieving your own user data OR when you and the other
	 * user are in a transactional relationship and the call is being executed within a certain
	 * amount of time after the transaction is created. Based on Trust and Safety policies, the
	 * time is unspecified and can vary by site. <br><br> Starting Jan 2007, when a bidder's user
	 * info is made anonymous, this tag will be returned only for that bidder, and the seller
	 * of an item that the user is bidding on.
	 */
	public $email;
	/**
	 * @var AmountType | Amount of last invoice. 0.00 if account not yet invoiced. With compatibility level 387,
	 * the value is positive for debits and negative for credits, reversing the sign of earlier
	 * versions.
	 */
	public $invoicebalance;
	/**
	 * @var dateTime | Date of last invoice sent by eBay to the user, in GMT. (Also see the Data Types appendix
	 * for more information on how GMT dates are handled in SOAP.) Empty string if this account
	 * has not been invoiced yet.
	 */
	public $invoicedate;
	/**
	 * @var AmountType | Amount of last payment posted, 0.00 if no payments posted. With compatibility level 387,
	 * the value is positive for debits and negative for credits, reversing the sign of earlier
	 * versions.
	 */
	public $lastamountpaid;
	/**
	 * @var dateTime | Date of last payment by the user to eBay, in GMT. (Also see the Data Types appendix for
	 * more information on how GMT dates are handled in SOAP.) Empty string if no payments have
	 * been posted.
	 */
	public $lastpaymentdate;
	/**
	 * @var boolean | Indicates whether the account has past due amounts outstanding. A value of true indicates
	 * that the account is past due. A value of false indicates the account is current.
	 */
	public $pastdue;
	/**
	 * @var SellerPaymentMethodCodeType | 	 */
	public $paymentmethod;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AccountStateCodeType $val
	 * @throws Exception
	 */
	public function setAccountState($val)
	{
        $this->accountstate = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInvoicePayment($val)
	{
        $this->invoicepayment = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInvoiceCredit($val)
	{
        $this->invoicecredit = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInvoiceNewFee($val)
	{
        $this->invoicenewfee = (int)$val;
	}

	/**
	 * @param AdditionalAccountType $val
	 * @throws Exception
	 */
	public function setAdditionalAccount($val)
	{
        $this->additionalaccount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountPastDue($val)
	{
        $this->amountpastdue = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBankAccountInfo($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BankAccountInfo');
        }
        $this->bankaccountinfo = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setBankModifyDate($val)
	{
        $this->bankmodifydate = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBillingCycleDate($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->billingcycledate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreditCardExpiration($val)
	{
        $this->creditcardexpiration = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCreditCardInfo($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CreditCardInfo');
        }
        $this->creditcardinfo = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreditCardModifyDate($val)
	{
        $this->creditcardmodifydate = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setCurrentBalance($val)
	{
        $this->currentbalance = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEmail($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Email');
        }
        $this->email = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInvoiceBalance($val)
	{
        $this->invoicebalance = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setInvoiceDate($val)
	{
        $this->invoicedate = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setLastAmountPaid($val)
	{
        $this->lastamountpaid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastPaymentDate($val)
	{
        $this->lastpaymentdate = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPastDue($val)
	{
        $this->pastdue = (int)$val;
	}

	/**
	 * @param SellerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethod($val)
	{
        $this->paymentmethod = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class AdFormatEnabledCodeType
{
	const DISABLED            = 'Disabled';
	const ENABLED             = 'Enabled';
	const ONLY                = 'Only';
	const CLASSIFIEDADENABLED = 'ClassifiedAdEnabled';
	const CLASSIFIEDADONLY    = 'ClassifiedAdOnly';
}

/**
 * AdFormatEnabledDefinitionType
 * Defines the AdFormatEnabled feature. If the field is present, the corresponding feature
 * applies to the category. The field is returned as an empty element (e.g., a boolean value
 * is not returned).
 */
class AdFormatEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AdFormatLeadType
 * Contains prospective buyer contact information and other details associated with a lead
 * for an ad format listing.
 */
class AdFormatLeadType
{
	/**
	 * @var string | Message sent from the prospective buyer to the seller.
	 */
	public $additionalinformation;
	/**
	 * @var AddressType | Address information for the prospective buyer. Not returned if information is unavailable.
	 */
	public $address;
	/**
	 * @var string | The time of day when the prospective buyer prefers to be contacted by the seller. Not returned
	 * if information is unavailable.
	 */
	public $besttimetocall;
	/**
	 * @var string | Email address for the user. You cannot retrieve an email address for any user with whom
	 * you do not have a transactional relationship, regardless of site. Email is only returned
	 * for applicable calls when you are retrieving your own user data OR when you and the other
	 * user are in a transactional relationship and the call is being executed within a certain
	 * amount of time after the transaction is created. Based on Trust and Safety policies, the
	 * time is unspecified and can vary by site. <br><br> Starting Jan 2007, when a bidder's user
	 * info is made anonymous, this tag will be returned only for that bidder, and the seller
	 * of an item that the user is bidding on.
	 */
	public $email;
	/**
	 * @var string | First name of the prospective buyer.
	 */
	public $firstname;
	/**
	 * @var string | Last name of the prospective buyer.
	 */
	public $lastname;
	/**
	 * @var string | User's primary phone number. This may return a value of "Invalid Request" if you are not
	 * authorized to see the user's phone number. Also applicable to Half.com (for GetOrders).
	 */
	public $phone;
	/**
	 * @var dateTime | Date and time (in GMT) that the lead was submitted.
	 */
	public $submittedtime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAdditionalInformation($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AdditionalInformation');
        }
        $this->additionalinformation = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setAddress($val)
	{
        $this->address = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBestTimeToCall($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BestTimeToCall');
        }
        $this->besttimetocall = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEmail($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Email');
        }
        $this->email = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFirstName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FirstName');
        }
        $this->firstname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLastName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LastName');
        }
        $this->lastname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhone($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Phone');
        }
        $this->phone = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setSubmittedTime($val)
	{
        $this->submittedtime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AddMemberMessagesAAQToBidderRequestContainerType
 * Holds the content of the request.
 */
class AddMemberMessagesAaQtoBidderRequestContainerType
{
	/**
	 * @var string | Unique key to distinguish between recommendations for each item.              Matches a
	 * correlation ID you defined in the request, if any.
	 */
	public $correlationid;
	/**
	 * @var string | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var MemberMessageType | Holds the content of the message.
	 */
	public $membermessage;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCorrelationID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CorrelationID');
        }
        $this->correlationid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ItemID');
        }
        $this->itemid = (int)$val;
	}

	/**
	 * @param MemberMessageType $val
	 * @throws Exception
	 */
	public function setMemberMessage($val)
	{
        $this->membermessage = (int)$val;
	}
}

/**
 * AddMemberMessagesAAQToBidderResponseContainerType
 * Contains the response information.
 */
class AddMemberMessagesAaQtoBidderResponseContainerType
{
	/**
	 * @var string | Unique key to distinguish between recommendations for each item.              Matches a
	 * correlation ID you defined in the request, if any.
	 */
	public $correlationid;
	/**
	 * @var AckCodeType | Indicates the response status (e.g., success).
	 */
	public $ack;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCorrelationID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CorrelationID');
        }
        $this->correlationid = (int)$val;
	}

	/**
	 * @param AckCodeType $val
	 * @throws Exception
	 */
	public function setAck($val)
	{
        $this->ack = (int)$val;
	}
}

/**
 * AdditionalAccountType
 * Contains the data for one additional account. An additional account is            created
 * when the user has an active account and changes country of            registry (i.e., registers
 * with the eBay site for the new country). A            new account is created and the old
 * account becomes inactive as an            additional account. A user who never changes country
 * of residency while            having an account will never have any additional accounts.
 */
class AdditionalAccountType
{
	/**
	 * @var AmountType | Indicates the current balance of the additional account.
	 */
	public $balance;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var string | Indicates the unique identifier for the additional account (the account ID).
	 */
	public $accountcode;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBalance($val)
	{
        $this->balance = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAccountCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AccountCode');
        }
        $this->accountcode = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class AddressOwnerCodeType
{
	const PAYPAL     = 'PayPal';
	const EBAY       = 'eBay';
	const CUSTOMCODE = 'CustomCode';
}

class AddressRecordTypeCodeType
{
	const RESIDENTIAL = 'Residential';
	const BUSINESS    = 'Business';
	const CUSTOMCODE  = 'CustomCode';
}

class AddressStatusCodeType
{
	const NONE        = 'None';
	const CONFIRMED   = 'Confirmed';
	const UNCONFIRMED = 'Unconfirmed';
	const CUSTOMCODE  = 'CustomCode';
}

/**
 * AddressType
 * Contains the data for one user address. This is the base type for a number of user addresses,
 * including seller payment address, buyer shipping address and buyer and seller registration
 * address.
 */
class AddressType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | A concatenation of Street1 and Street2, primarily for RegistrationAddress. Not applicable
	 * to Half.com.
	 */
	public $street;
	/**
	 * @var string | Line 1 of the user's street address. Also applicable to Half.com (for GetOrders).
	 */
	public $street1;
	/**
	 * @var string | Line 2 of the user's address (such as an apartment number). Returned if the user specified
	 * a second street value for their address. Also applicable to Half.com (for GetOrders).
	 */
	public $street2;
	/**
	 * @var string | The name of the user's city. Also applicable to Half.com (for GetOrders).
	 */
	public $cityname;
	/**
	 * @var string | County information for the user. This field applies to Classified Ad format listings only. Not
	 * applicable to Half.com.
	 */
	public $county;
	/**
	 * @var string | The region of the user's address. Also applicable to Half.com (for GetOrders).
	 */
	public $stateorprovince;
	/**
	 * @var CountryCodeType | Two-letter ISO 3166 country code. In some calls, used with the Location field to indicate
	 * the city and country where the item is located. Also applicable as input to AddItem and
	 * related calls when you list items to Half.com (specify US). <br> <br> In GetSearchResultsExpress,
	 * only returned when ItemDetails is set to Fine.
	 */
	public $country;
	/**
	 * @var string | The name of the user's country. Also applicable to Half.com (for GetOrders).
	 */
	public $countryname;
	/**
	 * @var string | User's primary phone number. This may return a value of "Invalid Request" if you are not
	 * authorized to see the user's phone number. Also applicable to Half.com (for GetOrders).
	 */
	public $phone;
	/**
	 * @var CountryCodeType | Standard ISO code for the country of the user's primay telephone phone number. For Classifed
	 * Ad format listings, this code is used to look up the country's international calling prefix.
	 * Both the ISO code and country phone prefix are stored with listings of this type. This
	 * field applies to Classified Ad format listings only.
	 */
	public $phonecountrycode;
	/**
	 * @var string | Country Prefix of the secondary phone number. This value is derived from inputs supplied
	 * for PhoneCountryCode. This field applies to Classified Ad format listings only.
	 */
	public $phonecountryprefix;
	/**
	 * @var string | Area or City Code of a user's primary phone number. This field applies to Classified Ad
	 * format listings only.
	 */
	public $phoneareaorcitycode;
	/**
	 * @var string | The local number portion of the user's primary phone number. This field applies to Classified
	 * Ad format listings only.
	 */
	public $phonelocalnumber;
	/**
	 * @var CountryCodeType | Standard ISO code for the country of a user's secondary telephone phone number. For Classifed
	 * Ad format listings, this code is used to look up the country's international calling prefix.
	 * Both the ISO code and country phone prefix are stored with listings of this type. This
	 * field applies to Classified Ad format listings only.
	 */
	public $phone2countrycode;
	/**
	 * @var string | Country prefix of a user's secondary phone number. This value is derived from inputs supplied
	 * for Phone2CountryCode. This field applies to Classified Ad format listings only.
	 */
	public $phone2countryprefix;
	/**
	 * @var string | Area or City Code of a user's secondary phone number. This field applies to Classified
	 * Ad format listings only.
	 */
	public $phone2areaorcitycode;
	/**
	 * @var string | The local number portion of the user's secondary phone number. This field applies to Classified
	 * Ad format listings only.
	 */
	public $phone2localnumber;
	/**
	 * @var string | The postal code to use as the basis for the proximity search.
	 */
	public $postalcode;
	/**
	 * @var string | ID assigned to the address in the eBay database. For GetOrders, applies only to Half.com.
	 */
	public $addressid;
	/**
	 * @var AddressOwnerCodeType | The realm to which the address belongs (e.g. eBay vs PayPal). For GetOrders, applies only
	 * to Half.com.
	 */
	public $addressowner;
	/**
	 * @var AddressStatusCodeType | PayPal address status. Not applicable to Half.com.
	 */
	public $addressstatus;
	/**
	 * @var string | ID assigned to the address by the owner of the address (fitting only if the address is
	 * owned by PayPal; see AddressOwner). Also applicable to Half.com (for GetOrders).
	 */
	public $externaladdressid;
	/**
	 * @var string | Seller's international name that is associated with the payment address. Only applicable
	 * to SellerPaymentAddress. Not applicable to Half.com.
	 */
	public $internationalname;
	/**
	 * @var string | International state and city for the seller's payment address. Only applicable to SellerPaymentAddress. Not
	 * applicable to Half.com.
	 */
	public $internationalstateandcity;
	/**
	 * @var string | Seller's international street address that is associated with the payment address. Only
	 * applicable to SellerPaymentAddress. Not applicable to Half.com.
	 */
	public $internationalstreet;
	/**
	 * @var string | User's company name. Only returned if available. Not applicable to Half.com.
	 */
	public $companyname;
	/**
	 * @var AddressRecordTypeCodeType | Indicates the nature of the address (e.g., residential or business). Not applicable to
	 * Half.com.
	 */
	public $addressrecordtype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStreet($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Street');
        }
        $this->street = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStreet1($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Street1');
        }
        $this->street1 = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStreet2($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Street2');
        }
        $this->street2 = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCityName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CityName');
        }
        $this->cityname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCounty($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for County');
        }
        $this->county = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStateOrProvince($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for StateOrProvince');
        }
        $this->stateorprovince = (int)$val;
	}

	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setCountry($val)
	{
        $this->country = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCountryName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CountryName');
        }
        $this->countryname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhone($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Phone');
        }
        $this->phone = (int)$val;
	}

	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setPhoneCountryCode($val)
	{
        $this->phonecountrycode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhoneCountryPrefix($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PhoneCountryPrefix');
        }
        $this->phonecountryprefix = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhoneAreaOrCityCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PhoneAreaOrCityCode');
        }
        $this->phoneareaorcitycode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhoneLocalNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PhoneLocalNumber');
        }
        $this->phonelocalnumber = (int)$val;
	}

	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setPhone2CountryCode($val)
	{
        $this->phone2countrycode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhone2CountryPrefix($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Phone2CountryPrefix');
        }
        $this->phone2countryprefix = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhone2AreaOrCityCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Phone2AreaOrCityCode');
        }
        $this->phone2areaorcitycode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPhone2LocalNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Phone2LocalNumber');
        }
        $this->phone2localnumber = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PostalCode');
        }
        $this->postalcode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAddressID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AddressID');
        }
        $this->addressid = (int)$val;
	}

	/**
	 * @param AddressOwnerCodeType $val
	 * @throws Exception
	 */
	public function setAddressOwner($val)
	{
        $this->addressowner = (int)$val;
	}

	/**
	 * @param AddressStatusCodeType $val
	 * @throws Exception
	 */
	public function setAddressStatus($val)
	{
        $this->addressstatus = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExternalAddressID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ExternalAddressID');
        }
        $this->externaladdressid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setInternationalName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for InternationalName');
        }
        $this->internationalname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setInternationalStateAndCity($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for InternationalStateAndCity');
        }
        $this->internationalstateandcity = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setInternationalStreet($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for InternationalStreet');
        }
        $this->internationalstreet = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCompanyName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CompanyName');
        }
        $this->companyname = (int)$val;
	}

	/**
	 * @param AddressRecordTypeCodeType $val
	 * @throws Exception
	 */
	public function setAddressRecordType($val)
	{
        $this->addressrecordtype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AffiliateTrackingDetailsType
 * Container for fields related to affiliate tracking. For additional information, see the
 * annotations to the elements in this type.
 */
class AffiliateTrackingDetailsType
{
	/**
	 * @var string | Specifies an ID to identify you to your tracking partner (tracking provider). The value
	 * you specify is obtained from your tracking partner. For example, in the case of Commission
	 * Junction, the TrackingID is the PID given to you by Commission Junction.
	 */
	public $trackingid;
	/**
	 * @var string | Specifies the third party, e.g. Commission Junction, who is your tracking partner (tracking
	 * provider). Required if you specify a TrackingID. Depending on your tracking partner, specify
	 * one of the following values. Not all partners are valid for all sites. <br>1 = Commission
	 * Junction <br>2 = Be Free <br>3 = Affilinet <br>4 = TradeDoubler <br>5 = Mediaplex <br>6
	 * = DoubleClick <br>7 = Allyes <br>8 = BJMT
	 */
	public $trackingpartnercode;
	/**
	 * @var ApplicationDeviceTypeCodeType | Reserved for future use.
	 */
	public $applicationdevicetype;
	/**
	 * @var string | Optional value that depends on your tracking partner (tracking provider). For example,
	 * if you specify a TrackingPartnerCode of 1 for Commission Junction, the AffiliateUserID
	 * is your Commission Junction Shopper ID (SID).
	 */
	public $affiliateuserid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTrackingID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TrackingID');
        }
        $this->trackingid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTrackingPartnerCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TrackingPartnerCode');
        }
        $this->trackingpartnercode = (int)$val;
	}

	/**
	 * @param ApplicationDeviceTypeCodeType $val
	 * @throws Exception
	 */
	public function setApplicationDeviceType($val)
	{
        $this->applicationdevicetype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAffiliateUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AffiliateUserID');
        }
        $this->affiliateuserid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AmountType
 * Basic type for specifying monetary amounts. A double value (e.g., 1.00 or 1.0) is meaningful
 * as a monetary amount when accompanied by a specification of the currency, in which case
 * the value specifies the amount in that currency. An AmountType expresses both the value (a
 * double) and the currency. Details such as prices, fees, costs, and payments are specified
 * as amount types.
 */
class AmountType
{
	/**
	 * @var double
	 */
	public $_;
	/**
	 * @var CurrencyCodeType
	 */
	public $currencyid;
	/**
	 * @param double $val
	 * @throws Exception
	 */
	public function set($val)
	{
        $this->_ = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrencyID($val)
	{
        $this->currencyid = (int)$val;
	}
}

/**
 * ApiAccessRuleType
 * Contains the definition of a rule that governs the number of times your application can
 * access the eBay API (invoke a call) on an hourly, daily, or periodic basis.
 */
class ApiAccessRuleType
{
	/**
	 * @var string | The name of the call that has an access rule. Can be a call name (e.g., AddItem), ApplicationAggregate
	 * (returns totals for all calls), PasswordAuthenticationLimiter (dummy call), or NonUTF8UsageLimiter.
	 */
	public $callname;
	/**
	 * @var boolean | Whether use of this call counts toward the application's aggregate limit for all calls.
	 */
	public $countstowardaggregate;
	/**
	 * @var long | The number of calls per day that your application can make to this call before being refused. The
	 * day starts at midnight, 00:00:00 PST (not GMT).
	 */
	public $dailyhardlimit;
	/**
	 * @var long | The number of calls per day that your application can make to this call before you receive
	 * a warning. The day starts at midnight, 00:00:00 PST.
	 */
	public $dailysoftlimit;
	/**
	 * @var long | The number of times your application has used this call today.
	 */
	public $dailyusage;
	/**
	 * @var long | The number of calls that your application can make per hour to this call before being refused.
	 * Each count begins on the hour (e.g. 1:00:00).
	 */
	public $hourlyhardlimit;
	/**
	 * @var long | The number of calls that your application can make to this call per hour before you receive
	 * a warning. Each count begins on the hour (e.g. 1:00:00).
	 */
	public $hourlysoftlimit;
	/**
	 * @var long | The number of times your application has executed this call during this hour.
	 */
	public $hourlyusage;
	/**
	 * @var int | The length of time before your application's perodic usage counter restarts for this call.
	 * If the number of calls you make exceeds the periodic hard limit before the current period
	 * ends, further calls will be refused until the next period starts. Possible values: -1 (Periodic
	 * limit not enforced, could be any negative integer), 0 (Calendar month), 30 (Number of days,
	 * could be any positive integer). If the period is based on the calendar month, the usage counters
	 * restart on the same day of every month, regardless of the number of days in the month.
	 */
	public $period;
	/**
	 * @var long | Number of calls per period that your application may make before a call is refused, if
	 * the periodic limit is enforced. The length of the period is specified in Period.
	 */
	public $periodichardlimit;
	/**
	 * @var long | Number of calls per period that your application may make before you receive a warning,
	 * if the periodic limit is enforced. The length of the period is specified in Period.
	 */
	public $periodicsoftlimit;
	/**
	 * @var long | Number of calls that your application has already made this period. Returns 0 if the periodic
	 * access rule has not been configured for the application. The length of the period is specified
	 * in Period. The start date of the period is specified in PeriodicStartDate.
	 */
	public $periodicusage;
	/**
	 * @var dateTime | The time (in GMT) when this access rule's period started. The period starts at midnight
	 * Pacific time. For example, if the period begins on June 29 in 2005 when California is on
	 * Pacific Daylight Time, the GMT value returned would be 2005-06-29T07:00:00.000Z If the
	 * period begins on December 29 in 2005 when California is on Pacific Standard Time, the GMT
	 * value returned would be 2005-12-29T08:00:00.000Z. Only returned when the eBay Developers
	 * Program has configured the start date for the access rule. The start date can vary per application
	 * and per call name (i.e., per access rule).
	 */
	public $periodicstartdate;
	/**
	 * @var dateTime | The date and time this access rule was last modified by eBay.
	 */
	public $modtime;
	/**
	 * @var AccessRuleCurrentStatusCodeType | Your application's current status for this rule, including whether the rule is set for
	 * your application and whether the application has exceeded its daily or hourly limit.
	 */
	public $rulecurrentstatus;
	/**
	 * @var AccessRuleStatusCodeType | The status of the access rule, including whether the rule is turned on or off and whether
	 * the application is currently blocked from using this call. No effect if RuleCurrentStatus
	 * is set to NotSet.
	 */
	public $rulestatus;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCallName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CallName');
        }
        $this->callname = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCountsTowardAggregate($val)
	{
        $this->countstowardaggregate = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setDailyHardLimit($val)
	{
        $this->dailyhardlimit = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setDailySoftLimit($val)
	{
        $this->dailysoftlimit = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setDailyUsage($val)
	{
        $this->dailyusage = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setHourlyHardLimit($val)
	{
        $this->hourlyhardlimit = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setHourlySoftLimit($val)
	{
        $this->hourlysoftlimit = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setHourlyUsage($val)
	{
        $this->hourlyusage = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPeriod($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->period = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setPeriodicHardLimit($val)
	{
        $this->periodichardlimit = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setPeriodicSoftLimit($val)
	{
        $this->periodicsoftlimit = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setPeriodicUsage($val)
	{
        $this->periodicusage = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setPeriodicStartDate($val)
	{
        $this->periodicstartdate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setModTime($val)
	{
        $this->modtime = (int)$val;
	}

	/**
	 * @param AccessRuleCurrentStatusCodeType $val
	 * @throws Exception
	 */
	public function setRuleCurrentStatus($val)
	{
        $this->rulecurrentstatus = (int)$val;
	}

	/**
	 * @param AccessRuleStatusCodeType $val
	 * @throws Exception
	 */
	public function setRuleStatus($val)
	{
        $this->rulestatus = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ApplicationDeliveryPreferencesType
 * Specifies preferences describing how notifications are delivered to an application. Note
 * that notifications are subject to Anti-Spam rules. See Anti-Spam Rules in the eBay Web Services
 * Guide for more information about these rules.
 */
class ApplicationDeliveryPreferencesType
{
	/**
	 * @var anyURI | The URL where eBay delivers all notifications sent to the application. For delivery to
	 * a server, the URL begins with http:// or https:// and must be well formed. Use a URL that
	 * is functional at the time of the call. For delivery to an email address, the URL begins with
	 * mailto: and specifies a valid email address.
	 */
	public $applicationurl;
	/**
	 * @var EnableCodeType | A token indicating whether notifications are enabled or disabled. If you disable notifications, the
	 * application does not receive them, but notification preferences are not erased.
	 */
	public $applicationenable;
	/**
	 * @var anyURI | The email address where eBay sends all application markup and markdown event notifications.
	 * When setting the email address, input must be in the format mailto://youremailaddress@yoursite.com
	 * (with the mailto:// prefix). The application has to subscribe to recieve these events using
	 * the AlertEnable field.
	 */
	public $alertemail;
	/**
	 * @var EnableCodeType | A token indicating whether markup and markdown alerts are enabled or disabled.
	 */
	public $alertenable;
	/**
	 * @var NotificationPayloadTypeCodeType | If this field is specified, the value must be eBLSchemaSOAP.
	 */
	public $notificationpayloadtype;
	/**
	 * @var DeviceTypeCodeType | The means of receipt of notification. In most cases, it is Platform (typical API calls
	 * and web interaction), so this is the default, if not specified. For wireless applications,
	 * use SMS.
	 */
	public $devicetype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setApplicationURL($val)
	{
        $this->applicationurl = (int)$val;
	}

	/**
	 * @param EnableCodeType $val
	 * @throws Exception
	 */
	public function setApplicationEnable($val)
	{
        $this->applicationenable = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setAlertEmail($val)
	{
        $this->alertemail = (int)$val;
	}

	/**
	 * @param EnableCodeType $val
	 * @throws Exception
	 */
	public function setAlertEnable($val)
	{
        $this->alertenable = (int)$val;
	}

	/**
	 * @param NotificationPayloadTypeCodeType $val
	 * @throws Exception
	 */
	public function setNotificationPayloadType($val)
	{
        $this->notificationpayloadtype = (int)$val;
	}

	/**
	 * @param DeviceTypeCodeType $val
	 * @throws Exception
	 */
	public function setDeviceType($val)
	{
        $this->devicetype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ApplicationDeviceTypeCodeType
{
	const BROWSER     = 'Browser';
	const WIRELESS    = 'Wireless';
	const DESKTOP     = 'Desktop';
	const SETTOPTVBOX = 'SetTopTVBox';
	const CUSTOMCODE  = 'CustomCode';
}

/**
 * AttributeArrayType
 * Reserved for future use.
 */
class AttributeArrayType
{
	/**
	 * @var AttributeType | A salient aspect or feature of an item in a given category.            Attributes are known
	 * as "Item Specifics" in the eBay Web site.            Use attributes to describe an item
	 * in a standard way so that buyers can find it more easily.            For example, "Publication
	 * Year" is a standard attribute for books.            In item-listing requests, multiple
	 * attributes can be specified.            Some categories (e.g., Tickets) always require
	 * certain attributes to be specified.            Therefore, in item-listing requests you
	 * need to at least specify "editable" attributes            (EditType 0 and EditType 2 attributes)
	 * if they are identified as required            in the attribute meta-data. See the eBay
	 * Web Services guide for information            about attrribute meta-data, how to determine
	 * the valid attributes for a category,            and how to determine whether attributes
	 * are required.            <br><br>            If you are revising or relisting an item,
	 * you don't need to pass in attributes            that were already specified in the original
	 * listing.            To remove an optional attribute, set all its value IDs to "-100". If
	 * the item has bids            (or items have been sold) but there are more than 12 hours
	 * remaining until the listing ends,            you can add Attribute nodes but you cannot
	 * remove or modify data in previously            specified Attribute nodes. If the item has
	 * bids and the listing ends within 12 hours,            you cannot add or remove Attribute
	 * nodes or modify the contents of previously            specified Attribute nodes.
	 *      <br><br>            For GetCategoryListings, this returns the item condition only
	 * (and it is            only returned if IncludeCondition = true in the request).
	 *     Not applicable to Half.com.
	 */
	public $attribute;
	/**
	 * @param AttributeType $val
	 * @throws Exception
	 */
	public function setAttribute($val)
	{
        $this->attribute = (int)$val;
	}
}

/**
 * AttributeRecommendationsType
 * Item Specifics data returned from the Suggested Attributes engine.
 */
class AttributeRecommendationsType
{
	/**
	 * @var AttributeSetArrayType | Reserved for future use.
	 */
	public $attributesetarray;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AttributeSetArrayType $val
	 * @throws Exception
	 */
	public function setAttributeSetArray($val)
	{
        $this->attributesetarray = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * AttributeSetArrayType
 * Applicable for listings that include eBay's Item Specifics or Pre-filled Item Information
 * features.      A list of attribute sets. An attribute set contains a list of attributes
 *      that describe category-specific aspects or features of an item in a standardized way.
 *      See the Developer's Guide for more information. In item-listing requests,      this
 * property is required if attributes are identified as required in the      characteristics
 * set meta-data.      See the Developer's Guide for information about characteristics meta-data
 * and how to      determine when attributes are required.
 */
class AttributeSetArrayType
{
	/**
	 * @var AttributeSetType | A result containing a set of one or more product families. For GetProductSearchResults,
	 * if QueryKeywords and multiple characteristic set IDs were specified in the request, multiple
	 * AttributeSet objects can be returned. Each AttributeSet corresponds to a characteristic
	 * set ID specified in the request. See the eBay Web Services guide for more information about
	 * working with this data. For GetProductSearchResults, only returned with request version
	 * 387 and higher. For GetProductFamilyMembers, only returned with request version 415 and
	 * higher.
	 */
	public $attributeset;
	/**
	 * @param AttributeSetType $val
	 * @throws Exception
	 */
	public function setAttributeSet($val)
	{
        $this->attributeset = (int)$val;
	}
}

/**
 * AttributeSetType
 * (in/out) A set of salient aspects or features that describe an item in a standardized way.
 *      Most commonly used in the Item Specifics section of a listing.      See the Developer's
 * Guide information on      working with Item Specifics and Pre-filled Item Information.
 *     See the Developer's Guide for information about      characteristics meta-data and how
 * to determine when attributes are required.
 */
class AttributeSetType
{
	/**
	 * @var AttributeType | A salient aspect or feature of an item in a given category.            Attributes are known
	 * as "Item Specifics" in the eBay Web site.            Use attributes to describe an item
	 * in a standard way so that buyers can find it more easily.            For example, "Publication
	 * Year" is a standard attribute for books.            In item-listing requests, multiple
	 * attributes can be specified.            Some categories (e.g., Tickets) always require
	 * certain attributes to be specified.            Therefore, in item-listing requests you
	 * need to at least specify "editable" attributes            (EditType 0 and EditType 2 attributes)
	 * if they are identified as required            in the attribute meta-data. See the eBay
	 * Web Services guide for information            about attrribute meta-data, how to determine
	 * the valid attributes for a category,            and how to determine whether attributes
	 * are required.            <br><br>            If you are revising or relisting an item,
	 * you don't need to pass in attributes            that were already specified in the original
	 * listing.            To remove an optional attribute, set all its value IDs to "-100". If
	 * the item has bids            (or items have been sold) but there are more than 12 hours
	 * remaining until the listing ends,            you can add Attribute nodes but you cannot
	 * remove or modify data in previously            specified Attribute nodes. If the item has
	 * bids and the listing ends within 12 hours,            you cannot add or remove Attribute
	 * nodes or modify the contents of previously            specified Attribute nodes.
	 *      <br><br>            For GetCategoryListings, this returns the item condition only
	 * (and it is            only returned if IncludeCondition = true in the request).
	 *     Not applicable to Half.com.
	 */
	public $attribute;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var int
	 */
	public $attributesetid;
	/**
	 * @var string
	 */
	public $attributesetversion;
	/**
	 * @param AttributeType $val
	 * @throws Exception
	 */
	public function setAttribute($val)
	{
        $this->attribute = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSetVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for attributeSetVersion');
        }
        $this->attributesetversion = (int)$val;
	}
}

/**
 * AttributeType
 * A salient aspect or feature of an item. On eBay.com, this information is used in the Item
 * Specifics section of a listing to describe an item in a standard way so that buyers can
 * find it more easily.
 */
class AttributeType
{
	/**
	 * @var ValType | Specifies the value for the property.
	 */
	public $value;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var int
	 */
	public $attributeid;
	/**
	 * @var string
	 */
	public $attributelabel;
	/**
	 * @param ValType $val
	 * @throws Exception
	 */
	public function setValue($val)
	{
        $this->value = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributeid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeLabel($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for attributeLabel');
        }
        $this->attributelabel = (int)$val;
	}
}

/**
 * AuthenticationEntryArrayType
 * Container for a list of AuthenticationEntries. Can contain zero, one, or multiple AuthenticationEntryType
 * objects.
 */
class AuthenticationEntryArrayType
{
	/**
	 * @var AuthenticationEntryType | Contains the data properties that define one authentication entry.            Multiple
	 * AuthenticationEntry fields can be returned.
	 */
	public $authenticationentry;
	/**
	 * @param AuthenticationEntryType $val
	 * @throws Exception
	 */
	public function setAuthenticationEntry($val)
	{
        $this->authenticationentry = (int)$val;
	}
}

/**
 * AuthenticationEntryType
 * A set of application-level authentication preferences and related data that you configure
 * to support the user authentication and authorization process.
 */
class AuthenticationEntryType
{
	/**
	 * @var anyURI | A URL that you set up in order to determine when a            user's authentication and
	 * authorization process succeeded.            After a user signs into eBay and authorizes
	 * your application            to execute secure calls on their behalf, eBay redirects the
	 *            user's browser to this URL and, if TokenReturnMethod is set            to Redirect,
	 * appends the user's authentication token plus            other data that you specified to
	 * identify the user.
	 */
	public $accepturl;
	/**
	 * @var anyURI | Your privacy policy URL, which is shown to end users on the eBay sign-in page.
	 */
	public $privacypolicyurl;
	/**
	 * @var anyURI | A URL that you set up in order to determine when a            user's authentication and
	 * authorization process did not succeed.            After a user signs into eBay but chooses
	 * NOT to authorize your application            to execute secure calls on their behalf, eBay
	 * redirects the            user's browser to this URL and appends data that you specified
	 *            to identify the user (but does not return an authentication token).
	 */
	public $rejecturl;
	/**
	 * @var string | A unique identifier associated with application and the combination            of URLs
	 * within this authentication entry.            Unique across all applications that execute
	 * eBay Web Services calls.            For convenience, you can call GetRuName to generate
	 * a unique value.
	 */
	public $runame;
	/**
	 * @var TokenReturnMethodCodeType | Specifies whether to return the token in the HTTP response stream            sent to the
	 * accept URL, or to make it available for retrieval via FetchToken.
	 */
	public $tokenreturnmethod;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setAcceptURL($val)
	{
        $this->accepturl = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setPrivacyPolicyURL($val)
	{
        $this->privacypolicyurl = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setRejectURL($val)
	{
        $this->rejecturl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRuName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RuName');
        }
        $this->runame = (int)$val;
	}

	/**
	 * @param TokenReturnMethodCodeType $val
	 * @throws Exception
	 */
	public function setTokenReturnMethod($val)
	{
        $this->tokenreturnmethod = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BasicUpgradePackEnabledDefinitionType
 * Defines the BasicUpgradePack feature (a feature pack). If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned). Australia site (site ID 15, abbreviation AU) only.
 */
class BasicUpgradePackEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class BestOfferActionCodeType
{
	const ACCEPT     = 'Accept';
	const DECLINE    = 'Decline';
	const COUNTER    = 'Counter';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * BestOfferArrayType
 * A collection of Best Offers. Empty if there are no best offers.
 */
class BestOfferArrayType
{
	/**
	 * @var BestOfferType | (GetMyeBayBuying only) Indicates the latest BestOffer the user has provided for the item
	 * .
	 */
	public $bestoffer;
	/**
	 * @param BestOfferType $val
	 * @throws Exception
	 */
	public function setBestOffer($val)
	{
        $this->bestoffer = (int)$val;
	}
}

/**
 * BestOfferAutoDeclineEnabledDefinitionType
 * Defines the BestOfferAutoDeclineEnabled feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class BestOfferAutoDeclineEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BestOfferCounterEnabledDefinitionType
 * Defines the BestOfferCounterEnabled feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class BestOfferCounterEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BestOfferDetailsType
 * Container for BestOffer properties associated with the item.
 */
class BestOfferDetailsType
{
	/**
	 * @var int | The number of items the user has made best offers on.
	 */
	public $bestoffercount;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow best offers. True means
	 * best offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $bestofferenabled;
	/**
	 * @var AmountType | (GetMyeBayBuying only) Indicates the latest BestOffer the user has provided for the item
	 * .
	 */
	public $bestoffer;
	/**
	 * @var BestOfferStatusCodeType | (GetMyeBayBuying only) Indicates the status of the latest BestOffer the user has provided
	 * for the item .
	 */
	public $bestofferstatus;
	/**
	 * @var BestOfferTypeCodeType | Indicates the best offer type of the latest BestOffer the user has provided for the item
	 * .
	 */
	public $bestoffertype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBestOfferCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bestoffercount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferEnabled($val)
	{
        $this->bestofferenabled = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBestOffer($val)
	{
        $this->bestoffer = (int)$val;
	}

	/**
	 * @param BestOfferStatusCodeType $val
	 * @throws Exception
	 */
	public function setBestOfferStatus($val)
	{
        $this->bestofferstatus = (int)$val;
	}

	/**
	 * @param BestOfferTypeCodeType $val
	 * @throws Exception
	 */
	public function setBestOfferType($val)
	{
        $this->bestoffertype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BestOfferEnabledDefinitionType
 * Defines the BestOfferEnabled feature. If the field is present, the corresponding feature
 * applies to the category. The field is returned as an empty element (i.e., a boolean value
 * is not returned).
 */
class BestOfferEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class BestOfferIdType
{}

class BestOfferStatusCodeType
{
	const PENDING    = 'Pending';
	const ACCEPTED   = 'Accepted';
	const DECLINED   = 'Declined';
	const EXPIRED    = 'Expired';
	const RETRACTED  = 'Retracted';
	const ADMINENDED = 'AdminEnded';
	const ACTIVE     = 'Active';
	const COUNTERED  = 'Countered';
	const ALL        = 'All';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * BestOfferType
 * Details about a best offer.
 */
class BestOfferType
{
	/**
	 * @var BestOfferIDType | An id to distinguish this best offer from other best offers made on the item.
	 */
	public $bestofferid;
	/**
	 * @var dateTime | Date and time when this notification will be removed from the eBay system.
	 */
	public $expirationtime;
	/**
	 * @var UserType | Contains the data for the transaction's buyer. See UserType for its child elements. Not
	 * applicable to Half.com except for GetOrders.
	 */
	public $buyer;
	/**
	 * @var AmountType | The amount of the best offer.
	 */
	public $price;
	/**
	 * @var BestOfferStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var int | Specifies the number of items from the specified listing the user tendering the offer intends
	 * to purchase or bid on. For Chinese auctions and other listing formats that only allow one
	 * item per listing, value may not exceed one. For multi-item listings, must be greater than
	 * zero and not exceeding the number of items offered for sale in the listing.
	 */
	public $quantity;
	/**
	 * @var string | Display message from buyer. This field holds transient data that is only being returned
	 * in the notification flow. This field is only returned in the Checkout related notifications. Not
	 * applicable to Half.com.
	 */
	public $buyermessage;
	/**
	 * @var string | Text response to buyer from seller.
	 */
	public $sellermessage;
	/**
	 * @var BestOfferTypeCodeType | The best offer type.
	 */
	public $bestoffercodetype;
	/**
	 * @var string | The status of the call, either Success or Failure.
	 */
	public $callstatus;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param BestOfferIDType $val
	 * @throws Exception
	 */
	public function setBestOfferID($val)
	{
        $this->bestofferid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setExpirationTime($val)
	{
        $this->expirationtime = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setBuyer($val)
	{
        $this->buyer = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setPrice($val)
	{
        $this->price = (int)$val;
	}

	/**
	 * @param BestOfferStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantity($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantity = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBuyerMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BuyerMessage');
        }
        $this->buyermessage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerMessage');
        }
        $this->sellermessage = (int)$val;
	}

	/**
	 * @param BestOfferTypeCodeType $val
	 * @throws Exception
	 */
	public function setBestOfferCodeType($val)
	{
        $this->bestoffercodetype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCallStatus($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CallStatus');
        }
        $this->callstatus = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class BestOfferTypeCodeType
{
	const BUYERBESTOFFER     = 'BuyerBestOffer';
	const BUYERCOUNTEROFFER  = 'BuyerCounterOffer';
	const SELLERCOUNTEROFFER = 'SellerCounterOffer';
	const CUSTOMCODE         = 'CustomCode';
}

class BidActionCodeType
{
	const UNKNOWN        = 'Unknown';
	const BID            = 'Bid';
	const NOTUSED        = 'NotUsed';
	const RETRACTION     = 'Retraction';
	const AUTORETRACTION = 'AutoRetraction';
	const CANCELLED      = 'Cancelled';
	const AUTOCANCEL     = 'AutoCancel';
	const ABSENTEE       = 'Absentee';
	const BUYITNOW       = 'BuyItNow';
	const PURCHASE       = 'Purchase';
	const CUSTOMCODE     = 'CustomCode';
}

/**
 * BidApprovalArrayType
 * Mulitple bidders can be approved with one call.
 */
class BidApprovalArrayType
{
	/**
	 * @var BidApprovalType | Contains data for an item listing found by a search.            Output only.
	 */
	public $liveauctionbid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param BidApprovalType $val
	 * @throws Exception
	 */
	public function setLiveAuctionBid($val)
	{
        $this->liveauctionbid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BidApprovalType
 * Information that a Live Auction seller selects when approving or denying a user who wants
 * to bid on items in the seller's Live Auctions catalog.
 */
class BidApprovalType
{
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var AmountType | Amount that has been approved by the seller. If the seller has not yet approved, return
	 * value "Pending"
	 */
	public $approvedbiddinglimit;
	/**
	 * @var string | Comments entered by the seller when it declined an approval request, if any.
	 */
	public $declinedcomment;
	/**
	 * @var BidderStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setApprovedBiddingLimit($val)
	{
        $this->approvedbiddinglimit = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDeclinedComment($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DeclinedComment');
        }
        $this->declinedcomment = (int)$val;
	}

	/**
	 * @param BidderStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BidderDetailArrayType
 * A collection of Bidder Detail.
 */
class BidderDetailArrayType
{
	/**
	 * @var BidderDetailType | Details about a Live Auctions bidder. Returned if at least one bidder has requested approval.
	 */
	public $bidderdetail;
	/**
	 * @param BidderDetailType $val
	 * @throws Exception
	 */
	public function setBidderDetail($val)
	{
        $this->bidderdetail = (int)$val;
	}
}

/**
 * BidderDetailType
 * Contains the data for a user who is interested in bidding on items in a Live Auctions catalog.
 */
class BidderDetailType
{
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var string | Email address for the user. You cannot retrieve an email address for any user with whom
	 * you do not have a transactional relationship, regardless of site. Email is only returned
	 * for applicable calls when you are retrieving your own user data OR when you and the other
	 * user are in a transactional relationship and the call is being executed within a certain
	 * amount of time after the transaction is created. Based on Trust and Safety policies, the
	 * time is unspecified and can vary by site. <br><br> Starting Jan 2007, when a bidder's user
	 * info is made anonymous, this tag will be returned only for that bidder, and the seller
	 * of an item that the user is bidding on.
	 */
	public $email;
	/**
	 * @var int | The aggregate feedback score for a user. A user's feedback score is the net positive feedback
	 * minus the net negative feedback left for the user. Feedback scores are a quantitative expression
	 * of the desirability of dealing with a user as a buyer or a seller in transactions. Each
	 * transaction can result in one feedback entry for a given user (the buyer can leave feedback
	 * for the seller, and the seller can leave feedback for the buyer.). That one feedback can
	 * be positive, negative, or neutral. The aggregated feedback counts for a particular user
	 * represent that user's overall feedback score (referred to as a "feedback rating" on the
	 * eBay site). If the user has chosen to make their feedback private and that user is not
	 * the user identified in the request's authentication token, FeedbackScore is not returned
	 * and FeedbackPrivate is returned with a value of true.<br> <br> To be eligible to list on
	 * Express, a seller's feedback score needs to be 100 or higher. See "eBay Express" in the
	 * eBay Web Services guide. In GetSearchResultsExpress, only returned when ItemDetails is
	 * set to Fine.<br> <br> In GetSearchResults and GetCategoryListings, feedback information
	 * is only returned if IncludeFeedback = true in the request. <br><br> Starting Jan 2007,
	 * when a bidder's user info is made anonymous, the real feedback score will be returned only
	 * for that bidder, and the seller of an item that the user is bidding on. For all other users,
	 * the value -99 is returned.
	 */
	public $feedbackscore;
	/**
	 * @var int | Total count of negative feedback entries from unique (distinct) users.
	 */
	public $uniquenegativefeedbackcount;
	/**
	 * @var int | Total count of positive feedback entries from unique (distinct) users. Contains the aggregate
	 * feedback score for a user. A member's feedback score is the net positive feedback minus
	 * the net negative feedback left for the member. Feedback scores are a quantitative expression
	 * of the desirability of dealing with that person as a Buyer or a Seller in auction transactions.
	 * Each auction transaction can result in one feedback entry for a given user (the buyer can leave
	 * feedback for the seller, and the seller can leave feedback for the buyer.). That one feedback
	 * can be positive, negative, or neutral. The aggregated feedback counts for a particular
	 * user represent that user's overall feedback score (referred to as a "feedback rating" on
	 * the eBay site). This rating is commonly expressed as the eBay Feedback score for the user.
	 */
	public $uniquepositivefeedbackcount;
	/**
	 * @var LiveAuctionBidType | Contains the bidder details that match the bidder query passed in the request. Always returned
	 * when bidder search results are found.
	 */
	public $liveauctionbidresult;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEmail($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Email');
        }
        $this->email = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbackscore = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUniqueNegativeFeedbackCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->uniquenegativefeedbackcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUniquePositiveFeedbackCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->uniquepositivefeedbackcount = (int)$val;
	}

	/**
	 * @param LiveAuctionBidType $val
	 * @throws Exception
	 */
	public function setLiveAuctionBidResult($val)
	{
        $this->liveauctionbidresult = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BidderNoticePreferencesType
 * Contains a seller's preferences for receiving bidder notices.
 */
class BidderNoticePreferencesType
{
	/**
	 * @var boolean | If true, sends the seller a notice containing the contact information for unsuccessful
	 *  bidders.
	 */
	public $unsuccessfulbiddernoticeincludemyitems;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUnsuccessfulBidderNoticeIncludeMyItems($val)
	{
        $this->unsuccessfulbiddernoticeincludemyitems = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class BidderStatusCodeType
{
	const APPROVED   = 'Approved';
	const DENIED     = 'Denied';
	const PENDING    = 'Pending';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * BiddingDetailsType
 * Detailed information about a bid.
 */
class BiddingDetailsType
{
	/**
	 * @var AmountType | Converted value of the value in MaxBid, in the currency indicated by SiteCurrency. For
	 * active items, refresh the listing's data every 24 hours to pick up the current conversion
	 * rates. Under conditions where this value would be N/A on the eBay site, this element is
	 * not returned at all.
	 */
	public $convertedmaxbid;
	/**
	 * @var AmountType | Amount of the offer placed. For competitive-bidding listings, the amount bid on the item
	 * (subject to outbid by other buyers). For fixed-price listings, the fixed sale price at
	 * which the item is purchased. For competitive-bidding listings with an active Buy It Now
	 * option, this amount will be either the Buy It Now price for purchase or the amount of a
	 * bid, depending on the offer type (as specified in Action). For PlaceOffer, the currencyID
	 * attribute is ignored if provided.
	 */
	public $maxbid;
	/**
	 * @var int | Number of items from the listing the user agreed to purchase with a bid. For single-item
	 * listings, always 1. For multi-item listings, will be between 1 and the number of items
	 * offered in the auction. Number of items purchased so far.
	 */
	public $quantitybid;
	/**
	 * @var int | Used mainly for Dutch auction. For an active listing, number of items the user stands to
	 * win if the user is a current winning bidder. For an ended listing, number of items the
	 * user actually won. In both cases, the number may be less than that returned in QuantityBid
	 * as the lowest winning bidder in a Dutch auction might not win the number of items the user
	 * has bid on.
	 */
	public $quantitywon;
	/**
	 * @var boolean | (GetMyeBay only) Indicates whether the user is the current high bidder in a currently active
	 * listing.
	 */
	public $winning;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedMaxBid($val)
	{
        $this->convertedmaxbid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMaxBid($val)
	{
        $this->maxbid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantityBid($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantitybid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantityWon($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantitywon = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setWinning($val)
	{
        $this->winning = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BiddingSummaryType
 * Contains bidding summary information of a bidder to an item.
 */
class BiddingSummaryType
{
	/**
	 * @var int | The number of days included in the summary. Currently always set to 30 days.
	 */
	public $summarydays;
	/**
	 * @var int | The total number of bids that the bidder has placed.
	 */
	public $totalbids;
	/**
	 * @var int | Percentage of the bidder's total bids that the bidder placed on items that the seller is
	 * offering.
	 */
	public $bidactivitywithseller;
	/**
	 * @var int | Number of unique sellers whose items the bidder has placed bids on.
	 */
	public $bidstouniquesellers;
	/**
	 * @var int | For items that the bidder has bid on, the number of unique categories that they belong
	 * to.
	 */
	public $bidstouniquecategories;
	/**
	 * @var int | The total number of bids that the bidder has retracted.
	 */
	public $bidretractions;
	/**
	 * @var ItemBidDetailsType | Detail bidding information on the items that the bidder has bid on.
	 */
	public $itembiddetails;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSummaryDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->summarydays = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalBids($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalbids = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidActivityWithSeller($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidactivitywithseller = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidsToUniqueSellers($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidstouniquesellers = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidsToUniqueCategories($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidstouniquecategories = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidRetractions($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidretractions = (int)$val;
	}

	/**
	 * @param ItemBidDetailsType $val
	 * @throws Exception
	 */
	public function setItemBidDetails($val)
	{
        $this->itembiddetails = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class BuyerProtectionCodeType
{
	const ITEMINELIGIBLE       = 'ItemIneligible';
	const ITEMELIGIBLE         = 'ItemEligible';
	const ITEMMARKEDINELIGIBLE = 'ItemMarkedIneligible';
	const ITEMMARKEDELIGIBLE   = 'ItemMarkedEligible';
	const CUSTOMCODE           = 'CustomCode';
}

/**
 * BuyerRequirementsType
 * Container for all buyer requirements in listing calls.
 */
class BuyerRequirementsType
{
	/**
	 * @var boolean | If true, blocks bidders who are registered in countries to which the seller has specified
	 * he will not shipo. Ignored as input if the application uses version 451 or older.
	 */
	public $shiptoregistrationcountry;
	/**
	 * @var boolean | If true, blocks bidders with a feedback score of 0 who attempt to bid on Buy It Now items
	 * worth 100 RMB or more. Ignored as input if the application uses version 451 or older. This
	 * requirement is only enabled for the CN site.
	 */
	public $zerofeedbackscore;
	/**
	 * @var int | This field is ignored unless VerifiedUser is true. If this field is present, the user's
	 * feedback score is also considered: a user is blocked from bidding if the user's feedback
	 * score is less than or equal to the value of this field.
	 */
	public $minimumfeedbackscore;
	/**
	 * @var boolean | If true, blocks bidders who have received two unpaid item strikes in the last 30 days. Ignored
	 * as input if the application uses version 451 or older.
	 */
	public $maximumunpaiditemstrikes;
	/**
	 * @var MaximumItemRequirementsType | A means of limiting unpaying, low feedback bidders. Ignored as input if the application
	 * uses version 451 or older.
	 */
	public $maximumitemrequirements;
	/**
	 * @var boolean | If true, only bidders with PayPal accounts linked to eBay may bid. The MyeBay setting is
	 * automatically picked up on AddItem only if the compatibility level is greater than or equal
	 * to 453. For lower compatibility levels, you must send in explicit BuyerRequirement input
	 * even if you have your "global" MyeBay setting set to require this.
	 */
	public $linkedpaypalaccount;
	/**
	 * @var VerifiedUserRequirementsType | A means of limiting unverified bidders. Ignored as input if the application uses version
	 * 451 or older.
	 */
	public $verifieduserrequirements;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShipToRegistrationCountry($val)
	{
        $this->shiptoregistrationcountry = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setZeroFeedbackScore($val)
	{
        $this->zerofeedbackscore = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMinimumFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->minimumfeedbackscore = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMaximumUnpaidItemStrikes($val)
	{
        $this->maximumunpaiditemstrikes = (int)$val;
	}

	/**
	 * @param MaximumItemRequirementsType $val
	 * @throws Exception
	 */
	public function setMaximumItemRequirements($val)
	{
        $this->maximumitemrequirements = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLinkedPayPalAccount($val)
	{
        $this->linkedpaypalaccount = (int)$val;
	}

	/**
	 * @param VerifiedUserRequirementsType $val
	 * @throws Exception
	 */
	public function setVerifiedUserRequirements($val)
	{
        $this->verifieduserrequirements = (int)$val;
	}
}

/**
 * BuyerType
 * Contains information about a user as a buyer.
 */
class BuyerType
{
	/**
	 * @var AddressType | The address to which the item is to be shipped.
	 */
	public $shippingaddress;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setShippingAddress($val)
	{
        $this->shippingaddress = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BuyingGuideDetailsType
 * Information about zero or more buying guides and the site's buying guide hub.          Buying
 * guides contain content about particular product areas, categories, or subjects
 * to help buyers decide which type of item to purchase based on their particular interests.
 *          Multiple buying guides can be returned. See the eBay Web Services Guide for additional
 * information.
 */
class BuyingGuideDetailsType
{
	/**
	 * @var BuyingGuideType | Information that identifies a buying guide. A buying guide contains content about particular
	 *            product areas, categories, or subjects to help buyers decide which type of item
	 *            to purchase based on their particular interests.            Buying guides are
	 * useful to buyers who do not have a specific product in mind.            For example, a
	 * digital camera buying guide could help a buyer determine what kind of            digital
	 * camera is right for them.
	 */
	public $buyingguide;
	/**
	 * @var anyURI | URL of the buying guide home page for the site being searched.            Your application
	 * can present this URL as a link. Optionally,            you can use a value like "See all
	 * buying guides" as the link's display name.
	 */
	public $buyingguidehub;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param BuyingGuideType $val
	 * @throws Exception
	 */
	public function setBuyingGuide($val)
	{
        $this->buyingguide = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setBuyingGuideHub($val)
	{
        $this->buyingguidehub = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * BuyingGuideType
 * Information that identifies a buying guide. A buying guide provides content about particular product
 * areas, categories, or subjects to help buyers decide which type of item to purchase based
 * on their particular interests. Buying guides are useful to buyers who do not have a specific
 * product in mind. For example, a digital camera buying guide could help a buyer determine
 * what kind of digital camera is right for them.
 */
class BuyingGuideType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var int | Numeric identifier for a buy-side product finder. A product finder defines how to
	 *        search for Item Specifics in listings (e.g., how to search against a particular
	 * shoe size).            See the eBay Web Services guide for details about product finders.
	 *            You need to specify a product finder ID when you are searching against a listing's
	 *             Item Specifics (i.e., when you use SearchAttributes). A few categories, such
	 * as US Event Tickets and US eBay Motors, can also return a subset of Item Specifics (e.g.,
	 * the event venue, section, and row for a ticket listing) in the search results. To retrieve
	 * this data, you must specify the product finder ID, and also specify a detail level of ItemReturnAttributes
	 * or ReturnAll. Use GetProductFinder to determine valid product finder IDs.
	 */
	public $productfinderid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductFinderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productfinderid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class BuyingSummaryType
{
	/**
	 * @var int | The number of items the user has bid on.
	 */
	public $biddingcount;
	/**
	 * @var int | The number of items the user has bid on and is winning, but that have not yet ended.
	 */
	public $winningcount;
	/**
	 * @var AmountType | The total cost of items the user is presently winning.
	 */
	public $totalwinningcost;
	/**
	 * @var int | The number of items the user has bid on and won.
	 */
	public $woncount;
	/**
	 * @var AmountType | The total cost of items the user has bid on and won.
	 */
	public $totalwoncost;
	/**
	 * @var int | The time period for which won items are displayed. Default is 31 days.
	 */
	public $wondurationindays;
	/**
	 * @var int | The number of items the user has made best offers on.
	 */
	public $bestoffercount;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBiddingCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->biddingcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWinningCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->winningcount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalWinningCost($val)
	{
        $this->totalwinningcost = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWonCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->woncount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalWonCost($val)
	{
        $this->totalwoncost = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWonDurationInDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->wondurationindays = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBestOfferCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bestoffercount = (int)$val;
	}
}

class CalculatedShippingChargeOptionCodeType
{
	const CHARGEEACHITEM    = 'ChargeEachItem';
	const CHARGEENTIREORDER = 'ChargeEntireOrder';
	const CUSTOMCODE        = 'CustomCode';
}

/**
 * CalculatedShippingPreferencesType
 * Calculated shipping preferences for the user.
 */
class CalculatedShippingPreferencesType
{
	/**
	 * @var AmountType | The calculated shipping amount for the entire order.
	 */
	public $calculatedshippingamountforentireorder;
	/**
	 * @var CalculatedShippingChargeOptionCodeType | Specifies whether to charge the actual shipping and handling cost for the entire order or
	 * for each item.
	 */
	public $calculatedshippingchargeoption;
	/**
	 * @var CalculatedShippingRateOptionCodeType | Specifies whether to calculate the actual rate shipping based on the combined item weight or
	 * the individual item weight.
	 */
	public $calculatedshippingrateoption;
	/**
	 * @var InsuranceOptionCodeType | Whether the seller offers shipping insurance and, if so, whether the insurance is optional
	 * or required. Flat and calculated shipping. Optional as input and only allowed if ChangePaymentInstructions
	 * is true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express.
	 */
	public $insuranceoption;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setCalculatedShippingAmountForEntireOrder($val)
	{
        $this->calculatedshippingamountforentireorder = (int)$val;
	}

	/**
	 * @param CalculatedShippingChargeOptionCodeType $val
	 * @throws Exception
	 */
	public function setCalculatedShippingChargeOption($val)
	{
        $this->calculatedshippingchargeoption = (int)$val;
	}

	/**
	 * @param CalculatedShippingRateOptionCodeType $val
	 * @throws Exception
	 */
	public function setCalculatedShippingRateOption($val)
	{
        $this->calculatedshippingrateoption = (int)$val;
	}

	/**
	 * @param InsuranceOptionCodeType $val
	 * @throws Exception
	 */
	public function setInsuranceOption($val)
	{
        $this->insuranceoption = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CalculatedShippingRateOptionCodeType
{
	const COMBINEDITEMWEIGHT   = 'CombinedItemWeight';
	const INDIVIDUALITEMWEIGHT = 'IndividualItemWeight';
	const CUSTOMCODE           = 'CustomCode';
}

/**
 * CalculatedShippingRateType
 * Details pertinent to one or more items for which calculated shipping has been offered by
 * the seller, such as package dimension and weight and packaging/handling costs. Also returned with
 * the data for an item's transaction.
 */
class CalculatedShippingRateType
{
	/**
	 * @var string | Postal code for the location from which the package will be shipped. For calculated shipping
	 * only. Use Item.PostalCode to specify the location of the item and where it will be shipped
	 * from. The value of Item.PostalCode overrides any value specified with OriginatingPostalCode,
	 * and will be used to calculate shipping costs.
	 */
	public $originatingpostalcode;
	/**
	 * @var MeasureType | Depth dimension of the package needed to ship the item after it is sold.            For
	 * calculated shipping only.
	 */
	public $packagedepth;
	/**
	 * @var MeasureType | Length dimension of the package needed to ship the item after it is sold.            For
	 * calculated shipping only.
	 */
	public $packagelength;
	/**
	 * @var MeasureType | Width dimension of the package needed to ship the item after it is sold.            For
	 * calculated shipping only.
	 */
	public $packagewidth;
	/**
	 * @var AmountType | Fees a seller might assess for the shipping of the item (in addition to whatever the shipping
	 * service might charge). Any packaging/handling cost specified on input is added to each
	 * shipping service on output. When UPS is one of the shipping services offered by the seller, package
	 * dimensions are required on list/relist/revise. For calculated shipping only.
	 */
	public $packaginghandlingcosts;
	/**
	 * @var boolean | Whether a package is irregular and therefore cannot go through the stamping machine at
	 * the shipping service office and thus requires special or fragile handling. For calculated shipping
	 * only.
	 */
	public $shippingirregular;
	/**
	 * @var ShippingPackageCodeType | The size of the package used to ship the item(s). See ShippingPackageCodeType
	 *   for its possible values. Input.
	 */
	public $shippingpackage;
	/**
	 * @var MeasureType | See the documentation regarding "Working with Item Weights".            The 'unit' attribute
	 * can have a value of lbs.
	 */
	public $weightmajor;
	/**
	 * @var MeasureType | See the documentation regarding "Working with Item Weights". The 'unit' attribute is optional
	 * and assumed to be the minor compared to the value of 'unit' in WeightMajor.
	 */
	public $weightminor;
	/**
	 * @var AmountType | Fees a seller might assess for the shipping of the item (in addition to whatever the shipping
	 * service might charge). Any packaging/handling cost specified on input is added  to each
	 * shipping service on output. For international calculated shipping only.
	 */
	public $internationalpackaginghandlingcosts;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setOriginatingPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for OriginatingPostalCode');
        }
        $this->originatingpostalcode = (int)$val;
	}

	/**
	 * @param MeasureType $val
	 * @throws Exception
	 */
	public function setPackageDepth($val)
	{
        $this->packagedepth = (int)$val;
	}

	/**
	 * @param MeasureType $val
	 * @throws Exception
	 */
	public function setPackageLength($val)
	{
        $this->packagelength = (int)$val;
	}

	/**
	 * @param MeasureType $val
	 * @throws Exception
	 */
	public function setPackageWidth($val)
	{
        $this->packagewidth = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setPackagingHandlingCosts($val)
	{
        $this->packaginghandlingcosts = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingIrregular($val)
	{
        $this->shippingirregular = (int)$val;
	}

	/**
	 * @param ShippingPackageCodeType $val
	 * @throws Exception
	 */
	public function setShippingPackage($val)
	{
        $this->shippingpackage = (int)$val;
	}

	/**
	 * @param MeasureType $val
	 * @throws Exception
	 */
	public function setWeightMajor($val)
	{
        $this->weightmajor = (int)$val;
	}

	/**
	 * @param MeasureType $val
	 * @throws Exception
	 */
	public function setWeightMinor($val)
	{
        $this->weightminor = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInternationalPackagingHandlingCosts($val)
	{
        $this->internationalpackaginghandlingcosts = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CancelOfferType
 * Container for a list of offers. May contain zero, one, or multiple        OfferType objects,
 * each of which represents one offer extended by        a user on a listing.
 */
class CancelOfferType
{
	/**
	 * @var OfferType | Contains the data for one offer. This includes: data for the user making the
	 *  offer, the amount of the offer, the quantity of items being bought from the
	 *  listing, the type of offer being made, and more.
	 */
	public $offer;
	/**
	 * @var string | 	 */
	public $explanation;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param OfferType $val
	 * @throws Exception
	 */
	public function setOffer($val)
	{
        $this->offer = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExplanation($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Explanation');
        }
        $this->explanation = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CategoryArrayType
 * Container for a list of categories.
 */
class CategoryArrayType
{
	/**
	 * @var CategoryType | Describes a category that contains items that match the query.
	 */
	public $category;
	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setCategory($val)
	{
        $this->category = (int)$val;
	}
}

/**
 * CategoryFeatureType
 * A container node that identifies a category that has one of the features specified in FeatureID
 * (in GetCategoryFeaturesRequest).
 */
class CategoryFeatureType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var ListingDurationReferenceType | Specifies the ID of a set of default durations for a certain type of listing. The actual
	 * duration values are returned within the FeatureDefinitions node. The type of listing is
	 * named in the type attribute.
	 */
	public $listingduration;
	/**
	 * @var boolean | Specifies the default site setting for whether sellers are required to specify a shipping
	 * service and its associated cost when listing items. True means the shipping terms are required unless
	 * a specific category overrides this setting.
	 */
	public $shippingtermsrequired;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow best offers. True means
	 * best offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $bestofferenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow DutchBIN. True means best
	 * offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $dutchbinenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether a bidder must consent to the bid by confirming
	 * that he or she read and agrees to the terms in eBay's privacy policy.
	 */
	public $userconsentrequired;
	/**
	 * @var boolean | Indicates whether or not it is possible to enhance a listing by putting it into a rotation
	 * for display on a special area of the eBay home page. Support for this feature varies by
	 * site. Item or feedback restrictions may apply.
	 */
	public $homepagefeaturedenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the ProPack feature (a
	 * feature pack). True means ProPack is allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $propackenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the BasicUpgradePack feature
	 * (a feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Australia site (site ID 15, abbreviation AU) only. Effective beginning February
	 * 22, 2006.
	 */
	public $basicupgradepackenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the ValuePack feature (a
	 * feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Effective beginning February 22, 2006.
	 */
	public $valuepackenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the ProPackPlus feature
	 * (a feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Effective beginning February 22, 2006.
	 */
	public $propackplusenabled;
	/**
	 * @var AdFormatEnabledCodeType | Specifies the default site setting for whether categories allow the Ad Format feature.
	 * True means the feature is allowed site-wide, unless a specific category overrides the setting.
	 */
	public $adformatenabled;
	/**
	 * @var DigitalDeliveryEnabledCodeType | eBay enables you to list and sell digital files (such as Adobe PDF files) or information
	 * that buyers can access online or have delivered electronically. This flag specifies whether
	 * most categories on the site allow digitally delivered items (i.e., the default setting
	 * for the site's categories).<br><br> If true, digitally delivered items are allowed site-wide,
	 * but specific categories can override the setting if they don't support it.<br> If false,
	 * digitally delivered items are not normally allowed for the site, but some categories may
	 * override the setting.<br><br> If a category supports digital listings, it means that you
	 * have the option to list digital items in that category (i.e., Item.DigitalDeliveryDetails
	 * can be specified in your listing request). It does not mean the category requires you to
	 * list items digitally. If you list in two categories, an item can only specify this option
	 * if both categories support digital listings. Digital listings are not eligible for eBay
	 * Express.
	 */
	public $digitaldeliveryenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow counter offers for best
	 * offers. True means counter offers are allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $bestoffercounterenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow auto decline for best offers.
	 * True means auto decline is allowed site-wide, unless a specific category overrides the
	 * setting.
	 */
	public $bestofferautodeclineenabled;
	/**
	 * @var boolean | Specifies the default site setting for  whether LocalMarketSpecialitySubscription feature
	 * is supported for this category.
	 */
	public $localmarketspecialitysubscription;
	/**
	 * @var boolean | Specifies the default site setting for whether LocalMarketRegularSubscription feature is
	 * supported for this category.
	 */
	public $localmarketregularsubscription;
	/**
	 * @var boolean | Specifies the default site setting for whether LocalMarketPremiumSubscription feature is
	 * supported for this category.
	 */
	public $localmarketpremiumsubscription;
	/**
	 * @var boolean | Specifies the default site setting for whether LocalMarketNonSubscription feature is supported
	 * for this category.
	 */
	public $localmarketnonsubscription;
	/**
	 * @var boolean | Specifies whether most categories on the site are eligible for eBay Express. eBay Express
	 * is a specialty site where customers can buy new, fixed-price goods in a more conventional
	 * e-commerce experience.<br><br> If true, items on the site are eligible for Express, but
	 * specific categories can override the setting if they don't support Express. For example,
	 * categories that are not covered by PayPal Buyer Protection (e.g., Live Auctions and Motors
	 * vehicles) are excluded from Express.<br> If false, items on the site are not eligible for
	 * Express, but some categories may override the setting.<br><br> If you list in an Express-enabled
	 * category, it does not necessarily mean that the item will appear in that category when
	 * buyers browse and search Express. It only means that the item can also be included on Express, assuming
	 * all other Express eligibility requirements are met. See "eBay Express" in the eBay Web
	 * Services guide for information about other eligibility requirements.
	 */
	public $expressenabled;
	/**
	 * @var boolean | Specifies whether most categories on the site require a listing to include a picture in
	 * order to qualify for eBay Express.<br><br> If true, items on the site require a picture
	 * in order to qualify for Express, but specific categories can override this requirement.
	 * For example, on the US site, pictures are normally required for Express listings. However,
	 * the Event Tickets category could override this requirement if pictures are not commonly expected
	 * for tickets.<br> If false, items on the site do not require a picture, but some categories
	 * may override the setting.<br><br> Only meaningful if ExpressEnabled is true for the category.
	 */
	public $expresspicturesrequired;
	/**
	 * @var boolean | Specifies whether most categories on the site require a listing to include the Item Condition
	 * attribute in order to qualify for eBay Express. <br><br> If true, items on the site require
	 * the Item Condition in order to qualify for Express, but specific categories can override
	 * this requirement. For example, on the US site, the Item Condition is normally required
	 * for Express listings. However, the Event Tickets category could override this requirement
	 * because there is little need to distinguish between new and used tickets. (People rarely
	 * sell used tickets after an event unless the ticket is also a collectible item.)<br> If
	 * false, items on the site do not require the Item Condition, but some categories may override
	 * the setting.<br><br> Only meaningful if ExpressEnabled is true for the category.
	 */
	public $expressconditionrequired;
	/**
	 * @var double | Specifies the default site setting for whether the Minimum Reserve Price feature is supported
	 * for this category.
	 */
	public $minimumreserveprice;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow seller-level contact information
	 * for Classified Ad format listings. A value of true means seller-level contact information
	 * is available for Classified Ad format listings site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $sellercontactdetailsenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether the Transaction Confirmation Request feature
	 * is supported for this category.
	 */
	public $transactionconfirmationrequestenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the Store Inventory Format
	 * feature. True means the feature is allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $storeinventoryenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the addition of Skype buttons
	 * to listings for transactional formats (e.g., the Chinese auction format).
	 */
	public $skypemetransactionalenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the addition of Skype buttons
	 * to listings for nontransactional formats (e.g., the advertisement format).
	 */
	public $skypemenontransactionalenabled;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param ListingDurationReferenceType $val
	 * @throws Exception
	 */
	public function setListingDuration($val)
	{
        $this->listingduration = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingTermsRequired($val)
	{
        $this->shippingtermsrequired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferEnabled($val)
	{
        $this->bestofferenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDutchBINEnabled($val)
	{
        $this->dutchbinenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUserConsentRequired($val)
	{
        $this->userconsentrequired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHomePageFeaturedEnabled($val)
	{
        $this->homepagefeaturedenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProPackEnabled($val)
	{
        $this->propackenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBasicUpgradePackEnabled($val)
	{
        $this->basicupgradepackenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setValuePackEnabled($val)
	{
        $this->valuepackenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProPackPlusEnabled($val)
	{
        $this->propackplusenabled = (int)$val;
	}

	/**
	 * @param AdFormatEnabledCodeType $val
	 * @throws Exception
	 */
	public function setAdFormatEnabled($val)
	{
        $this->adformatenabled = (int)$val;
	}

	/**
	 * @param DigitalDeliveryEnabledCodeType $val
	 * @throws Exception
	 */
	public function setDigitalDeliveryEnabled($val)
	{
        $this->digitaldeliveryenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferCounterEnabled($val)
	{
        $this->bestoffercounterenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferAutoDeclineEnabled($val)
	{
        $this->bestofferautodeclineenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketSpecialitySubscription($val)
	{
        $this->localmarketspecialitysubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketRegularSubscription($val)
	{
        $this->localmarketregularsubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketPremiumSubscription($val)
	{
        $this->localmarketpremiumsubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketNonSubscription($val)
	{
        $this->localmarketnonsubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressEnabled($val)
	{
        $this->expressenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressPicturesRequired($val)
	{
        $this->expresspicturesrequired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressConditionRequired($val)
	{
        $this->expressconditionrequired = (int)$val;
	}

	/**
	 * @param double $val
	 * @throws Exception
	 */
	public function setMinimumReservePrice($val)
	{
        $this->minimumreserveprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSellerContactDetailsEnabled($val)
	{
        $this->sellercontactdetailsenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setTransactionConfirmationRequestEnabled($val)
	{
        $this->transactionconfirmationrequestenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setStoreInventoryEnabled($val)
	{
        $this->storeinventoryenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSkypeMeTransactionalEnabled($val)
	{
        $this->skypemetransactionalenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSkypeMeNonTransactionalEnabled($val)
	{
        $this->skypemenontransactionalenabled = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CategoryFinanceOfferArrayType
 * A set of financing offers, each valid within one particular category.
 */
class CategoryFinanceOfferArrayType
{
	/**
	 * @var CategoryFinanceOfferType | A financing offer valid within a particular category.
	 */
	public $categoryfinanceoffer;
	/**
	 * @param CategoryFinanceOfferType $val
	 * @throws Exception
	 */
	public function setCategoryFinanceOffer($val)
	{
        $this->categoryfinanceoffer = (int)$val;
	}
}

/**
 * CategoryFinanceOfferType
 * A financing offer valid within a particular category.
 */
class CategoryFinanceOfferType
{
	/**
	 * @var string | Specifies a promotional offer that allow the buyer to purchase items on credit.
	 */
	public $financeofferid;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFinanceOfferID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FinanceOfferID');
        }
        $this->financeofferid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CategoryListingsOrderCodeType
{
	const NOFILTER        = 'NoFilter';
	const ITEMSBY24HR     = 'ItemsBy24Hr';
	const ITEMSENDTODAY   = 'ItemsEndToday';
	const ITEMSENDIN5HR   = 'ItemsEndIn5Hr';
	const SORTBYPRICEASC  = 'SortByPriceAsc';
	const SORTBYPRICEDESC = 'SortByPriceDesc';
	const BESTMATCHSORT   = 'BestMatchSort';
	const DISTANCESORT    = 'DistanceSort';
	const CUSTOMCODE      = 'CustomCode';
}

class CategoryListingsSearchCodeType
{
	const FEATURED      = 'Featured';
	const SUPERFEATURED = 'SuperFeatured';
	const CUSTOMCODE    = 'CustomCode';
}

/**
 * CategoryMappingType
 * Mapping between an old category ID and an active category ID.
 */
class CategoryMappingType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var string
	 */
	public $oldid;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setOldID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for oldID');
        }
        $this->oldid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setId($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for id');
        }
        $this->id = (int)$val;
	}
}

/**
 * CategoryType
 * Container for data on one listing category.
 */
class CategoryType
{
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow best offers. True means
	 * best offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $bestofferenabled;
	/**
	 * @var boolean | If true, indicates that the category supports immediate payment. If false or not present,
	 * the category does not support immediate payment.
	 */
	public $autopayenabled;
	/**
	 * @var boolean | If true, the category supports business-to-business (B2B) VAT listings. Applicable to the
	 * eBay Germany (DE), Austria (AT), and Switzerland CH) sites only. If false or not present, the
	 * category does not support this feature.
	 */
	public $b2bvatenabled;
	/**
	 * @var boolean | If true, the category is associated with catalog content and the corresponding catalog
	 * is identified by the characteristic set ID. See CharacteristicsSets. As the Pre-filled
	 * Item Information feature uses the Item Specifics feature, the set of catalog-enabled categories is
	 * a subset of the categories that are mapped to characteristic sets. Not returned if false.
	 */
	public $catalogenabled;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var int | The level where the category fits in the site's category hierarchy. For example, if this
	 * field has a value of 2, then the category is two levels below the root category in the
	 * site's category hierarchy. For the GetSearchResults response, NumOfItems indicates the
	 * total quantity of matching items in a category. Matching categories at the same level (i.e.,
	 * in sibling categories) are sorted by NumOfItems, descending order.
	 */
	public $categorylevel;
	/**
	 * @var string | Display name of the category as it would appear on the eBay Web site. In GetItem, this
	 * is a fully qualified category name (e.g., Collectibles:Decorative Collectibles:Hummel,
	 * Goebel).
	 */
	public $categoryname;
	/**
	 * @var string | Category ID identifying a category that is an ancestor of the category indicated in CategoryID. For
	 * GetCategories, returns the same value as CategoryID if the CategoryLevel is 1. For GetSuggestedCategories,
	 * multiple CategoryParentID fields can be returned in sequence, starting with the root category and
	 * ending with the category that is the direct parent of the category specified in CategoryID. Use
	 * these parent fields and the CategoryID field to build the fully qualified category browse
	 * path or "breadcrumbs" (e.g., 58058:3516:3517). For GetPopularKeywords, -1 represents the
	 * root category.
	 */
	public $categoryparentid;
	/**
	 * @var string | Display name of the category indicated in CategoryParentID. For GetSuggestedCategories,
	 * multiple CategoryParentName fields can be returned in sequence, starting with the root
	 * category and ending with the category that is the direct parent of the category specified
	 * in CategoryName. Use these parent fields and the CategoryName field to build the fully
	 * qualified category browse path or "breadcrumbs" (e.g., Computers & Networking > Technology
	 * Books > Certification).
	 */
	public $categoryparentname;
	/**
	 * @var int | Numeric identifier for a buy-side product finder. A product finder defines how to
	 *        search for Item Specifics in listings (e.g., how to search against a particular
	 * shoe size).            See the eBay Web Services guide for details about product finders.
	 *            You need to specify a product finder ID when you are searching against a listing's
	 *             Item Specifics (i.e., when you use SearchAttributes). A few categories, such
	 * as US Event Tickets and US eBay Motors, can also return a subset of Item Specifics (e.g.,
	 * the event venue, section, and row for a ticket listing) in the search results. To retrieve
	 * this data, you must specify the product finder ID, and also specify a detail level of ItemReturnAttributes
	 * or ReturnAll. Use GetProductFinder to determine valid product finder IDs.
	 */
	public $productfinderid;
	/**
	 * @var boolean | Returned from GetCategory2CS calls. Supports listing with Pre-filled Item Information. If
	 * the category supports single-attribute search, this field returns a value of true. Otherwise
	 * this field not returned or returned as false.
	 */
	public $productsearchpageavailable;
	/**
	 * @var boolean | Previous behavior: Supports listing with Pre-filled Item Information. If the category supports
	 * a product finder-based search, this field returns a value of true. Otherwise this field
	 * returns null or false.
	 */
	public $productfinderavailable;
	/**
	 * @var ExtendedProductFinderIDType | Returned from GetCategory2CS calls with compatibility level 369 and higher. Supports listing
	 * with Pre-filled Item Information. Specifies the buy-side and/or sell-side product finder
	 * IDs associated with this category, if any.
	 */
	public $productfinderids;
	/**
	 * @var CharacteristicsSetType | Returned from GetCategory2CS calls. A list of one or more characteristics sets mapped to
	 * the category. Use this information when working with Item Specifics (Attributes) and Pre-filled
	 * Item Information (Catalogs) functionality. Output only.
	 */
	public $characteristicssets;
	/**
	 * @var boolean | If true, indicates a category that has expired and to which items may not be listed.
	 */
	public $expired;
	/**
	 * @var boolean | If true, indicates that the category is a fixed-fee category. Use this information to identify
	 * categories are not eligible for eBay Stores Inventory format listings. You cannot list
	 * eBay Store Inventory format listings in fixed-fee categories on international sites. Output
	 * only.
	 */
	public $intlautosfixedcat;
	/**
	 * @var boolean | If true, indicates that the category indicated in CategoryID is a leaf category, in which
	 * items may be listed (if the category is not also expired or virtual).
	 */
	public $leafcategory;
	/**
	 * @var boolean | If true, indicates the that category indicated in CategoryID is a virtual category, to
	 * which items may not be listed.
	 */
	public $virtual;
	/**
	 * @var int | The total quantity of matching items in the category. In the GetSearchResults response,
	 * matching categories at the same level (i.e., sibling categories) are sorted by this value.
	 * That is, if the request specifies that fewer categories or subcategories should be returned, the
	 * ones with the most matching items are returned first. See the Developer's guide for more
	 * information.
	 */
	public $numofitems;
	/**
	 * @var boolean | Indicates whether this category is eligible for Motors Seller Guarantee program. This tag
	 * is emitted for eligible categories only on the eBay Motors site.
	 */
	public $sellerguaranteeeligible;
	/**
	 * @var boolean | Indicates whether the category (and its subcategories) allows or disallows listing with
	 * a reserve price, depending on the prevailing site configuration indicated by ReservePriceAllowed. ORPA
	 * (override reserve price allowed) indicates when the category is an exception to the site's
	 * ReservePriceAllowed policy.<br> <br> If ORPA is true, the category overrides (toggles or
	 * reverses) the site's ReservePriceAllowed setting. In other words:<br> - If ReservePriceAllowed
	 * is true, reserve price is not allowed in this category.<br> - If ReservePriceAllowed is
	 * false, reserve price is allowed in this category.<br><br> If ORPA is not present (or false),
	 * there is no override. That is, the category's setting is the same as the site's ReservePriceAllowed
	 * setting.<br> <br> This toggling logic is designed to reduce the size of the GetCategories response
	 * by only returning ORPA when the category's policy is different from the site's policy.
	 * (If ORPA is true for a category, you can assume its subcategories inherit the same setting
	 * unless otherwise specified.)
	 */
	public $orpa;
	/**
	 * @var boolean | Indicates whether the category (and its subcategories) allows or disallows reducing a listing's
	 * reserve price, depending on the prevailing site configuration indicated by ReduceReserveAllowed. ORRA
	 * (override reduce reserve allowed) indicates when the category is an exception to the site's
	 * ReduceReserveAllowed policy.<br><br> If ORRA is true, the category overrides (toggles or
	 * reverses) the site's ReduceReserveAllowed setting. In other words:<br> - If ReduceReserveAllowed
	 * is true, reserve price reduction is not allowed in this category.<br> - If ReduceReserveAllowed
	 * is false, reserve price reduction is allowed in this category.<br><br> If ORRA is not present
	 * (false), there is no override. That is, the category's setting is the same as the site's
	 * ReduceReserveAllowed setting.<br> <br> This toggling logic is designed to reduce the size
	 * of the GetCategories response by only returning ORRA when the category's policy is different from
	 * the site's policy.  (If ORRA is true for a category, you can assume its subcategories inherit
	 * the same setting unless otherwise specified.)
	 */
	public $orra;
	/**
	 * @var boolean | Item.LotSize is not permitted when you list in this category. If true, indicates that lot
	 * sizes are disabled in the specified category.
	 */
	public $lsd;
	/**
	 * @var string | The list of keywords returned by GetPopularKeywords.
	 */
	public $keywords;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferEnabled($val)
	{
        $this->bestofferenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAutoPayEnabled($val)
	{
        $this->autopayenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setB2BVATEnabled($val)
	{
        $this->b2bvatenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCatalogEnabled($val)
	{
        $this->catalogenabled = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCategoryLevel($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->categorylevel = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryName');
        }
        $this->categoryname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryParentID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryParentID');
        }
        $this->categoryparentid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryParentName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryParentName');
        }
        $this->categoryparentname = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductFinderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productfinderid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProductSearchPageAvailable($val)
	{
        $this->productsearchpageavailable = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProductFinderAvailable($val)
	{
        $this->productfinderavailable = (int)$val;
	}

	/**
	 * @param ExtendedProductFinderIDType $val
	 * @throws Exception
	 */
	public function setProductFinderIDs($val)
	{
        $this->productfinderids = (int)$val;
	}

	/**
	 * @param CharacteristicsSetType $val
	 * @throws Exception
	 */
	public function setCharacteristicsSets($val)
	{
        $this->characteristicssets = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpired($val)
	{
        $this->expired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIntlAutosFixedCat($val)
	{
        $this->intlautosfixedcat = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLeafCategory($val)
	{
        $this->leafcategory = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setVirtual($val)
	{
        $this->virtual = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNumOfItems($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->numofitems = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSellerGuaranteeEligible($val)
	{
        $this->sellerguaranteeeligible = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setORPA($val)
	{
        $this->orpa = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setORRA($val)
	{
        $this->orra = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLSD($val)
	{
        $this->lsd = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setKeywords($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Keywords');
        }
        $this->keywords = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CharacteristicSetIDsType
 * (in) A list of one or more characteristic set IDs. In GetProductSearchResults, these IDs
 * indicate which characteristic sets to search in. If not specified, the search is conducted
 * across all characteristic sets. Only applicable when QueryKeywords is specified.
 */
class CharacteristicSetIdsType
{
	/**
	 * @var string | Key you specified in ProductSearchID in the search request to distinguish between query
	 * results. Primarily useful when conducting multiple searches in the same call. If no ProductSearchID
	 * value was specified in the request, returns the array index of the search result (beginning
	 * with 0). Not applicable to GetProductFamilyMembers.
	 */
	public $id;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ID');
        }
        $this->id = (int)$val;
	}
}

/**
 * CharacteristicType
 * A salient aspect or feature of an item. Used to describe an item in a        standard way
 * so that buyers can find it more easily. An individual,        standardized characteristic
 * that is common to all items within the        specified characteristics set. Applicable
 * when working with Item        Specifics (Attributes) and Pre-filled Item Information (Catalogs) functionality.
 * See the eBay Web Services guide for more information.
 */
class CharacteristicType
{
	/**
	 * @var int | Unique identifier for the attribute within the characteristic set.            Required
	 * if SearchAttributes is specified.
	 */
	public $attributeid;
	/**
	 * @var string | Applicable when working with Pre-filled Item Information (Catalogs) functionality.
	 *        Returned if the characteristic is a Date data type. Specifies the pattern
	 *      to use when presenting the date to a user. Possible values:            Day/Month/Year,
	 * Month/Year, Year Only.            For example, the Year Only format would indicate that
	 * the date            should be a value like 1999.            Output only.
	 */
	public $dateformat;
	/**
	 * @var string | The suggested order in which the characteristic should be presented to the user in a list.
	 * Indicates the relative position of the sort key in the list of characteristics. The characteristic
	 * with the lowest display sequence is considered the default sort key in calls to GetProductSearchResults.
	 * Aside from that, usage of this display sequence information is optional. For example, in
	 * an application with a graphical user interface, a characteristic with a display sequence
	 * of 2 could be presented before one with a display sequence of 3 in a drop-down list. If
	 * multiple sort characteristics are returned for a characteristic set, compare their display
	 * sequence values to determine the lowest available value (usually 0) and the overall sequence.
	 */
	public $displaysequence;
	/**
	 * @var string | Applicable when working with Pre-filled Item Information (Catalogs) functionality. The
	 * unit of measure (e.g., Inch) to use when the characteristic is numeric indicates a measurement. Not
	 * returned if not applicable. Output only.
	 */
	public $displayuom;
	/**
	 * @var LabelType | Applicable when working with Pre-filled Item Information (Catalogs) functionality.
	 *        The label to display when presenting the attribute to a user.            Not necessarily
	 * the same as the attribute's label as defined in the characteristic set (i.e., the label
	 * could be overridden by the catalog).
	 */
	public $label;
	/**
	 * @var SortOrderCodeType | Applicable when working with Pre-filled Item Information (Catalogs) functionality. Indicates
	 * the order in which eBay's search engine will sort the results if you            pass this
	 * characteristic as a sort attribute in GetProductSearchResults. You cannot change the sort
	 * order of a characteristic when you perform a search. (Of course, you can change the sort
	 * order when you present results in your own application.) In GetProductSearchPage, if SortOrder
	 * is not returned at all, it means the results will be returned in the order in which they
	 * are stored on eBay (which can be useful for international sites that use ideographic characters). Output
	 * only.
	 */
	public $sortorder;
	/**
	 * @var ValType | Container for the list of one or more valid values that the user has selected for the searchable
	 * attribute. If multiple values are specified, the search engine applies "OR" logic to the
	 * query (i.e., at least one of the specified values must match). Required if SearchAttributes
	 * is specified.
	 */
	public $valuelist;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributeid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDateFormat($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DateFormat');
        }
        $this->dateformat = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDisplaySequence($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DisplaySequence');
        }
        $this->displaysequence = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDisplayUOM($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DisplayUOM');
        }
        $this->displayuom = (int)$val;
	}

	/**
	 * @param LabelType $val
	 * @throws Exception
	 */
	public function setLabel($val)
	{
        $this->label = (int)$val;
	}

	/**
	 * @param SortOrderCodeType $val
	 * @throws Exception
	 */
	public function setSortOrder($val)
	{
        $this->sortorder = (int)$val;
	}

	/**
	 * @param ValType $val
	 * @throws Exception
	 */
	public function setValueList($val)
	{
        $this->valuelist = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CharacteristicsSearchCodeType
{
	const SINGLE     = 'Single';
	const MULTI      = 'Multi';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * CharacteristicsSetType
 * A level in the eBay category hierarchy at which a particular group of items can share a
 * common set of attributes. A set of characteristics that can be used to describe similar
 * kinds of items in a standardized way.
 */
class CharacteristicsSetType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @var string | Version of the characteristics set. Not to be confused with AttributeSystemVersion, which
	 * can be used to retrieve changes to attribute meta-data. In item-listing requests, if you
	 * specify the version of the attribute set that you have stored locally, eBay will compare
	 * it to the current version on the site and return a warning if the versions do not match. If
	 * an error occurs due to invalid attribute data, this warning can be useful to help determine
	 * if you might be sending outdated data. The current value of version is not necessarily
	 * "greater than" the previous value.
	 */
	public $attributesetversion;
	/**
	 * @var CharacteristicType | A salient aspect or feature of an item. Used to describe an item in a standard way so that
	 * buyers can find it more easily. An individual, standardized characteristic that is common
	 * to all items within the specified characteristic set. In the context of GetProductSearchPage,
	 * each characteristic identifies a single searchable attribute. A searchable attribute is
	 * a product aspect or feature that can be used as a criterion in a search for catalog content.
	 * For example, "Title" might be a criterion for searching the book catalog for Pre- filled
	 * Item Information related to books. See the eBay Web Services guide for more information.
	 */
	public $characteristics;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAttributeSetVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for AttributeSetVersion');
        }
        $this->attributesetversion = (int)$val;
	}

	/**
	 * @param CharacteristicType $val
	 * @throws Exception
	 */
	public function setCharacteristics($val)
	{
        $this->characteristics = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CharityAffiliationType
 * Defines the affiliation status for a nonprofit charity organization registered with the
 * dedicated eBay Giving Works provider.
 */
class CharityAffiliationType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var CharityAffiliationTypeCodeType
	 */
	public $type;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setId($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for id');
        }
        $this->id = (int)$val;
	}

	/**
	 * @param CharityAffiliationTypeCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}
}

class CharityAffiliationTypeCodeType
{
	const COMMUNITY  = 'Community';
	const DIRECT     = 'Direct';
	const REMOVE     = 'Remove';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * CharityAffiliationsType
 * Lists the nonprofit charity organization affiliations for a specified user.
 */
class CharityAffiliationsType
{
	/**
	 * @var CharityIDType | A unique identification number assigned by eBay to registered nonprofit charity organizations.
	 * Required input when listing Giving Works items.
	 */
	public $charityid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CharityIDType $val
	 * @throws Exception
	 */
	public function setCharityID($val)
	{
        $this->charityid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CharityIDType
 * Defines the affiliation status for a nonprofit charity organization registered with the
 * eBay Giving Works provider.
 */
class CharityIdType
{
	/**
	 * @var string
	 */
	public $_;
	/**
	 * @var CharityAffiliationTypeCodeType
	 */
	public $type;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function set($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for _');
        }
        $this->_ = (int)$val;
	}

	/**
	 * @param CharityAffiliationTypeCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}
}

/**
 * CharityInfoType
 * Contains information about a nonprofit charity organization.
 */
class CharityInfoType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | The stated mission of the nonprofit charity organization. This mission is displayed in
	 * the Giving Works item listing.
	 */
	public $mission;
	/**
	 * @var anyURI | The URL of the logo to include in the customized email.
	 */
	public $logourl;
	/**
	 * @var CharityStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var string | Keyword string to be used for search purposes.
	 */
	public $searchablestring;
	/**
	 * @var int | Region that the nonprofit charity organization is associated with. A specific nonprofit
	 * charity organization may be associated with only one region. Meaning of input values differs
	 * depending on the site. See GetCharities in the API Developer's Guide for the meaning of
	 * each input/output value. CharityRegion input value must be valid for that SiteID.
	 */
	public $charityregion;
	/**
	 * @var int | Domain (mission area) that a nonprofit charity organization belongs to. Nonprofit charity
	 * organizations may belong to multiple mission areas. Meaning of input values differs depending
	 * on the site. See GetCharities in the API Developer's Guide for the meaning of each input/output
	 * value. CharityDomain input value must be valid for that SiteID.
	 */
	public $charitydomain;
	/**
	 * @var string | A unique identification number assigned by eBay to registered nonprofit charity organizations.
	 * Required input when listing Giving Works items.
	 */
	public $charityid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMission($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Mission');
        }
        $this->mission = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setLogoURL($val)
	{
        $this->logourl = (int)$val;
	}

	/**
	 * @param CharityStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSearchableString($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SearchableString');
        }
        $this->searchablestring = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCharityRegion($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->charityregion = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCharityDomain($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->charitydomain = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCharityID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CharityID');
        }
        $this->charityid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setId($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for id');
        }
        $this->id = (int)$val;
	}
}

class CharitySellerStatusCodeType
{
	const SUSPENDED                           = 'Suspended';
	const REGISTERED                          = 'Registered';
	const CLOSED                              = 'Closed';
	const CREDITCARDEXPIRED                   = 'CreditCardExpired';
	const TOKENEXPIRED                        = 'TokenExpired';
	const CREDITCARDABOUTTOEXPIRE             = 'CreditCardAboutToExpire';
	const REGISTEREDNOCREDITCARD              = 'RegisteredNoCreditCard';
	const NOTREGISTEREDLOSTDIRECTSELLERSTATUS = 'NotRegisteredLostDirectSellerStatus';
	const DIRECTDEBITREJECTED                 = 'DirectDebitRejected';
	const CUSTOMCODE                          = 'CustomCode';
}

/**
 * CharitySellerType
 * Contains information about one seller with a eBay Giving Works provider charity seller account.
 */
class CharitySellerType
{
	/**
	 * @var CharitySellerStatusCodeType | Indicates the status of the seller's charity seller account.
	 */
	public $charitysellerstatus;
	/**
	 * @var CharityAffiliationType | Indicates the affiliation status for nonprofit charity organizations registered with the
	 * dedicated eBay Giving Works provider.
	 */
	public $charityaffiliation;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CharitySellerStatusCodeType $val
	 * @throws Exception
	 */
	public function setCharitySellerStatus($val)
	{
        $this->charitysellerstatus = (int)$val;
	}

	/**
	 * @param CharityAffiliationType $val
	 * @throws Exception
	 */
	public function setCharityAffiliation($val)
	{
        $this->charityaffiliation = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CharityStatusCodeType
{
	const VALID         = 'Valid';
	const NOLONGERVALID = 'NoLongerValid';
	const CUSTOMCODE    = 'CustomCode';
}

/**
 * CharityType
 * Identifies a Giving Works listing and benefiting nonprofit charity organization. Currently
 * supported through the US and eBay Motors sites only. The Ad Format and Mature Audiences
 * categories are not supported. Not applicable for US eBay Motors, international, Real Estate,
 * and Tickets.
 */
class CharityType
{
	/**
	 * @var string | The name of the benefiting nonprofit charity organization selected by the charity seller.
	 */
	public $charityname;
	/**
	 * @var int | A unique identification number assigned to a nonprofit charity organization by the dedicated
	 * provider of eBay Giving Works. Being superseded by CharityID. Max 10 digits.
	 */
	public $charitynumber;
	/**
	 * @var float | The percentage of the purchase price that the seller chooses to donate to the selected
	 * nonprofit organization. This percentage is displayed in the Giving Works item listing.
	 * Possible values: 10.0 to 100.0. Percentages must increment by 5.0. Minimum donation percentages
	 * may be required for Giving Works listings, see http://pages.ebay.com/help/sell/selling-nonprofit.html
	 * for details. DonationPercent is required input when listing Giving Works items.
	 */
	public $donationpercent;
	/**
	 * @var string | A unique identification number assigned by eBay to registered nonprofit charity organizations.
	 * Required input when listing Giving Works items.
	 */
	public $charityid;
	/**
	 * @var string | The stated mission of the nonprofit charity organization. This mission is displayed in
	 * the Giving Works item listing.
	 */
	public $mission;
	/**
	 * @var string | The URL of the logo to include in the customized email.
	 */
	public $logourl;
	/**
	 * @var CharityStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var boolean | If true, indicates that the seller has chosen to use eBay Giving Works to donate a percentage
	 * of the item's purchase price to a selected nonprofit organization.
	 */
	public $charitylisting;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCharityName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CharityName');
        }
        $this->charityname = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCharityNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->charitynumber = (int)$val;
	}

	/**
	 * @param float $val
	 * @throws Exception
	 */
	public function setDonationPercent($val)
	{
        $this->donationpercent = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCharityID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CharityID');
        }
        $this->charityid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMission($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Mission');
        }
        $this->mission = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLogoURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LogoURL');
        }
        $this->logourl = (int)$val;
	}

	/**
	 * @param CharityStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCharityListing($val)
	{
        $this->charitylisting = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CheckoutMethodCodeType
{
	const OTHER              = 'Other';
	const THIRDPARTYCHECKOUT = 'ThirdPartyCheckout';
	const CUSTOMCODE         = 'CustomCode';
}

class CheckoutStatusCodeType
{
	const CHECKOUTCOMPLETE   = 'CheckoutComplete';
	const CHECKOUTINCOMPLETE = 'CheckoutIncomplete';
	const BUYERREQUESTSTOTAL = 'BuyerRequestsTotal';
	const SELLERRESPONDED    = 'SellerResponded';
	const CUSTOMCODE         = 'CustomCode';
}

class CheckoutStatusType
{
	/**
	 * @var PaymentStatusCodeType | Indicates the success or failure of the buyer's online payment for a transaction. Only
	 * applicable if the buyer chose PayPal as the payment method for the transaction. If the
	 * payment failed, the value returned indicates the reason for the failure. Output only.
	 */
	public $ebaypaymentstatus;
	/**
	 * @var dateTime | The time the status was last modified. Also applicable to Half.com (for GetOrders).
	 */
	public $lastmodifiedtime;
	/**
	 * @var BuyerPaymentMethodCodeType | 	 */
	public $paymentmethod;
	/**
	 * @var CompleteStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param PaymentStatusCodeType $val
	 * @throws Exception
	 */
	public function setEBayPaymentStatus($val)
	{
        $this->ebaypaymentstatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastModifiedTime($val)
	{
        $this->lastmodifiedtime = (int)$val;
	}

	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethod($val)
	{
        $this->paymentmethod = (int)$val;
	}

	/**
	 * @param CompleteStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CombinedPaymentOptionCodeType
{
	const NOCOMBINEDPAYMENT    = 'NoCombinedPayment';
	const DISCOUNTSPECIFIED    = 'DiscountSpecified';
	const SPECIFYDISCOUNTLATER = 'SpecifyDiscountLater';
	const CUSTOMCODE           = 'CustomCode';
}

class CombinedPaymentPeriodCodeType
{
	const DAYS_3     = 'Days_3';
	const DAYS_5     = 'Days_5';
	const DAYS_7     = 'Days_7';
	const DAYS_14    = 'Days_14';
	const DAYS_30    = 'Days_30';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * CombinedPaymentPreferencesType
 * Defines a seller's preferences for allowing buyers to combine more than one purchase into
 * one payment.
 */
class CombinedPaymentPreferencesType
{
	/**
	 * @var CalculatedShippingPreferencesType | Contains a seller's preferences for having shipping costs calculated by eBay.
	 */
	public $calculatedshippingpreferences;
	/**
	 * @var CombinedPaymentOptionCodeType | Specifies whether or not a seller wants to allow buyers to combine purchases in order to
	 * receive a discount.
	 */
	public $combinedpaymentoption;
	/**
	 * @var CombinedPaymentPeriodCodeType | Specifies the period in which the user will allow buyers to combine purchases in order
	 * to receive a discount.
	 */
	public $combinedpaymentperiod;
	/**
	 * @var FlatShippingPreferencesType | Specifies a seller's preferences for flat-rate shipping.
	 */
	public $flatshippingpreferences;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CalculatedShippingPreferencesType $val
	 * @throws Exception
	 */
	public function setCalculatedShippingPreferences($val)
	{
        $this->calculatedshippingpreferences = (int)$val;
	}

	/**
	 * @param CombinedPaymentOptionCodeType $val
	 * @throws Exception
	 */
	public function setCombinedPaymentOption($val)
	{
        $this->combinedpaymentoption = (int)$val;
	}

	/**
	 * @param CombinedPaymentPeriodCodeType $val
	 * @throws Exception
	 */
	public function setCombinedPaymentPeriod($val)
	{
        $this->combinedpaymentperiod = (int)$val;
	}

	/**
	 * @param FlatShippingPreferencesType $val
	 * @throws Exception
	 */
	public function setFlatShippingPreferences($val)
	{
        $this->flatshippingpreferences = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CommentTypeCodeType
{
	const POSITIVE               = 'Positive';
	const NEUTRAL                = 'Neutral';
	const NEGATIVE               = 'Negative';
	const WITHDRAWN              = 'Withdrawn';
	const INDEPENDENTLYWITHDRAWN = 'IndependentlyWithdrawn';
	const CUSTOMCODE             = 'CustomCode';
}

class CompleteStatusCodeType
{
	const INCOMPLETE = 'Incomplete';
	const COMPLETE   = 'Complete';
	const PENDING    = 'Pending';
	const CUSTOMCODE = 'CustomCode';
}

class ConditionSelectionCodeType
{
	const ALL        = 'All';
	const _NEW       = '_New';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * ContextSearchAssetType
 * Score and rank for a keyword identified for a web page.
 */
class ContextSearchAssetType
{
	/**
	 * @var string | Related keyword.
	 */
	public $keyword;
	/**
	 * @var CategoryType | Describes a category that contains items that match the query.
	 */
	public $category;
	/**
	 * @var int | The ranking of this keyword and category relative to other keywords and categories (when
	 * scores are sorted).
	 */
	public $ranking;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setKeyword($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Keyword');
        }
        $this->keyword = (int)$val;
	}

	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setCategory($val)
	{
        $this->category = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setRanking($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->ranking = (int)$val;
	}
}

class CountryCodeType
{
	const AF         = 'AF';
	const AL         = 'AL';
	const DZ         = 'DZ';
	const _AS        = '_AS';
	const AD         = 'AD';
	const AO         = 'AO';
	const AI         = 'AI';
	const AQ         = 'AQ';
	const AG         = 'AG';
	const AR         = 'AR';
	const AM         = 'AM';
	const AW         = 'AW';
	const AU         = 'AU';
	const AT         = 'AT';
	const AZ         = 'AZ';
	const BS         = 'BS';
	const BH         = 'BH';
	const BD         = 'BD';
	const BB         = 'BB';
	const BY         = 'BY';
	const BE         = 'BE';
	const BZ         = 'BZ';
	const BJ         = 'BJ';
	const BM         = 'BM';
	const BT         = 'BT';
	const BO         = 'BO';
	const BA         = 'BA';
	const BW         = 'BW';
	const BV         = 'BV';
	const BR         = 'BR';
	const IO         = 'IO';
	const BN         = 'BN';
	const BG         = 'BG';
	const BF         = 'BF';
	const BI         = 'BI';
	const KH         = 'KH';
	const CM         = 'CM';
	const CA         = 'CA';
	const CV         = 'CV';
	const KY         = 'KY';
	const CF         = 'CF';
	const TD         = 'TD';
	const CL         = 'CL';
	const CN         = 'CN';
	const CX         = 'CX';
	const CC         = 'CC';
	const CO         = 'CO';
	const KM         = 'KM';
	const CG         = 'CG';
	const CD         = 'CD';
	const CK         = 'CK';
	const CR         = 'CR';
	const CI         = 'CI';
	const HR         = 'HR';
	const CU         = 'CU';
	const CY         = 'CY';
	const CZ         = 'CZ';
	const DK         = 'DK';
	const DJ         = 'DJ';
	const DM         = 'DM';
	const _DO        = '_DO';
	const TP         = 'TP';
	const EC         = 'EC';
	const EG         = 'EG';
	const SV         = 'SV';
	const GQ         = 'GQ';
	const ER         = 'ER';
	const EE         = 'EE';
	const ET         = 'ET';
	const FK         = 'FK';
	const FO         = 'FO';
	const FJ         = 'FJ';
	const FI         = 'FI';
	const FR         = 'FR';
	const GF         = 'GF';
	const PF         = 'PF';
	const TF         = 'TF';
	const GA         = 'GA';
	const GM         = 'GM';
	const GE         = 'GE';
	const DE         = 'DE';
	const GH         = 'GH';
	const GI         = 'GI';
	const GR         = 'GR';
	const GL         = 'GL';
	const GD         = 'GD';
	const GP         = 'GP';
	const GU         = 'GU';
	const GT         = 'GT';
	const GN         = 'GN';
	const GW         = 'GW';
	const GY         = 'GY';
	const HT         = 'HT';
	const HM         = 'HM';
	const VA         = 'VA';
	const HN         = 'HN';
	const HK         = 'HK';
	const HU         = 'HU';
	const IS         = 'IS';
	const IN         = 'IN';
	const ID         = 'ID';
	const IR         = 'IR';
	const IQ         = 'IQ';
	const IE         = 'IE';
	const IL         = 'IL';
	const IT         = 'IT';
	const JM         = 'JM';
	const JP         = 'JP';
	const JO         = 'JO';
	const KZ         = 'KZ';
	const KE         = 'KE';
	const KI         = 'KI';
	const KP         = 'KP';
	const KR         = 'KR';
	const KW         = 'KW';
	const KG         = 'KG';
	const LA         = 'LA';
	const LV         = 'LV';
	const LB         = 'LB';
	const LS         = 'LS';
	const LR         = 'LR';
	const LY         = 'LY';
	const LI         = 'LI';
	const LT         = 'LT';
	const LU         = 'LU';
	const MO         = 'MO';
	const MK         = 'MK';
	const MG         = 'MG';
	const MW         = 'MW';
	const MY         = 'MY';
	const MV         = 'MV';
	const ML         = 'ML';
	const MT         = 'MT';
	const MH         = 'MH';
	const MQ         = 'MQ';
	const MR         = 'MR';
	const MU         = 'MU';
	const YT         = 'YT';
	const MX         = 'MX';
	const FM         = 'FM';
	const MD         = 'MD';
	const MC         = 'MC';
	const MN         = 'MN';
	const MS         = 'MS';
	const MA         = 'MA';
	const MZ         = 'MZ';
	const MM         = 'MM';
	const NA         = 'NA';
	const NR         = 'NR';
	const NP         = 'NP';
	const NL         = 'NL';
	const AN         = 'AN';
	const NC         = 'NC';
	const NZ         = 'NZ';
	const NI         = 'NI';
	const NE         = 'NE';
	const NG         = 'NG';
	const NU         = 'NU';
	const NF         = 'NF';
	const MP         = 'MP';
	const NO         = 'NO';
	const OM         = 'OM';
	const PK         = 'PK';
	const PW         = 'PW';
	const PS         = 'PS';
	const PA         = 'PA';
	const PG         = 'PG';
	const PY         = 'PY';
	const PE         = 'PE';
	const PH         = 'PH';
	const PN         = 'PN';
	const PL         = 'PL';
	const PT         = 'PT';
	const PR         = 'PR';
	const QA         = 'QA';
	const RE         = 'RE';
	const RO         = 'RO';
	const RU         = 'RU';
	const RW         = 'RW';
	const SH         = 'SH';
	const KN         = 'KN';
	const LC         = 'LC';
	const PM         = 'PM';
	const VC         = 'VC';
	const WS         = 'WS';
	const SM         = 'SM';
	const ST         = 'ST';
	const SA         = 'SA';
	const SN         = 'SN';
	const SC         = 'SC';
	const SL         = 'SL';
	const SG         = 'SG';
	const SK         = 'SK';
	const SI         = 'SI';
	const SB         = 'SB';
	const SO         = 'SO';
	const ZA         = 'ZA';
	const GS         = 'GS';
	const ES         = 'ES';
	const LK         = 'LK';
	const SD         = 'SD';
	const SR         = 'SR';
	const SJ         = 'SJ';
	const SZ         = 'SZ';
	const SE         = 'SE';
	const CH         = 'CH';
	const SY         = 'SY';
	const TW         = 'TW';
	const TJ         = 'TJ';
	const TZ         = 'TZ';
	const TH         = 'TH';
	const TG         = 'TG';
	const TK         = 'TK';
	const TO         = 'TO';
	const TT         = 'TT';
	const TN         = 'TN';
	const TR         = 'TR';
	const TM         = 'TM';
	const TC         = 'TC';
	const TV         = 'TV';
	const UG         = 'UG';
	const UA         = 'UA';
	const AE         = 'AE';
	const GB         = 'GB';
	const US         = 'US';
	const UM         = 'UM';
	const UY         = 'UY';
	const UZ         = 'UZ';
	const VU         = 'VU';
	const VE         = 'VE';
	const VN         = 'VN';
	const VG         = 'VG';
	const VI         = 'VI';
	const WF         = 'WF';
	const EH         = 'EH';
	const YE         = 'YE';
	const YU         = 'YU';
	const ZM         = 'ZM';
	const ZW         = 'ZW';
	const AA         = 'AA';
	const QM         = 'QM';
	const QN         = 'QN';
	const QO         = 'QO';
	const QP         = 'QP';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * CountryDetailsType
 * Details about a specific country.
 */
class CountryDetailsType
{
	/**
	 * @var CountryCodeType | Two-letter ISO 3166 country code. In some calls, used with the Location field to indicate
	 * the city and country where the item is located. Also applicable as input to AddItem and
	 * related calls when you list items to Half.com (specify US). <br> <br> In GetSearchResultsExpress,
	 * only returned when ItemDetails is set to Fine.
	 */
	public $country;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setCountry($val)
	{
        $this->country = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CrossPromotionPreferencesType
 * Contains preferences describing how items similar to the one the user is  presently viewing
 * are promoted.
 */
class CrossPromotionPreferencesType
{
	/**
	 * @var boolean | (For eBay store owners only) Specifies whether cross-promotions are enabled for the seller's
	 * listings.
	 */
	public $crosspromotionenabled;
	/**
	 * @var ItemFormatSortFilterCodeType | (For eBay store owners only) Specifies which items should be shown in cross-sell promotions
	 * (such as Buy It Now or Store Inventory items) and in which sequence.
	 */
	public $crosssellitemformatsortfilter;
	/**
	 * @var GallerySortFilterCodeType | (For eBay store owners only) Specifies whether to display only items with gallery images
	 * and whether they should precede other items in cross-sell promotions.
	 */
	public $crosssellgallerysortfilter;
	/**
	 * @var ItemSortFilterCodeType | (For eBay store owners only) Specifies how to sort items displayed in a cross-sell promotion.
	 */
	public $crosssellitemsortfilter;
	/**
	 * @var ItemFormatSortFilterCodeType | (For eBay store owners only) Specifies which items (such as Buy It Now or Store Inventory
	 * items) should be shown in upsell promotions and in which sequence.
	 */
	public $upsellitemformatsortfilter;
	/**
	 * @var GallerySortFilterCodeType | (For eBay store owners only) Specifies whether to display only items with gallery images
	 * in upsell promotions and whether they should precede other items.
	 */
	public $upsellgallerysortfilter;
	/**
	 * @var ItemSortFilterCodeType | (For eBay store owners only) Specifies how to sort items used in an upsell promotion.
	 */
	public $upsellitemsortfilter;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCrossPromotionEnabled($val)
	{
        $this->crosspromotionenabled = (int)$val;
	}

	/**
	 * @param ItemFormatSortFilterCodeType $val
	 * @throws Exception
	 */
	public function setCrossSellItemFormatSortFilter($val)
	{
        $this->crosssellitemformatsortfilter = (int)$val;
	}

	/**
	 * @param GallerySortFilterCodeType $val
	 * @throws Exception
	 */
	public function setCrossSellGallerySortFilter($val)
	{
        $this->crosssellgallerysortfilter = (int)$val;
	}

	/**
	 * @param ItemSortFilterCodeType $val
	 * @throws Exception
	 */
	public function setCrossSellItemSortFilter($val)
	{
        $this->crosssellitemsortfilter = (int)$val;
	}

	/**
	 * @param ItemFormatSortFilterCodeType $val
	 * @throws Exception
	 */
	public function setUpSellItemFormatSortFilter($val)
	{
        $this->upsellitemformatsortfilter = (int)$val;
	}

	/**
	 * @param GallerySortFilterCodeType $val
	 * @throws Exception
	 */
	public function setUpSellGallerySortFilter($val)
	{
        $this->upsellgallerysortfilter = (int)$val;
	}

	/**
	 * @param ItemSortFilterCodeType $val
	 * @throws Exception
	 */
	public function setUpSellItemSortFilter($val)
	{
        $this->upsellitemsortfilter = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * CrossPromotionsType
 * Contains one or more items cross-promoted with the display or purchase of a referring item.
 */
class CrossPromotionsType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var PromotionSchemeCodeType | The primary cross-promotion rule scheme that was applied to return the cross-promoted item.
	 */
	public $primaryscheme;
	/**
	 * @var PromotionMethodCodeType | The type of cross promotion, CrossSell or UpSell.
	 */
	public $promotionmethod;
	/**
	 * @var string | The eBay ID of the seller who listed the item. <br><br> Starting Jan 2007, when a bidder's
	 * user info is made anonymous, this tag will be returned with the anonymous value "Seller
	 * X", where X indicates where the seller falls in the sequence of sellers that the user has
	 * purchased items from. For example, if the seller is the third seller that the user has
	 * purchased items from, the value "Seller 3" is returned.
	 */
	public $sellerid;
	/**
	 * @var boolean | Whether a shipping discount is offered by the seller when the cross-promoted item is purchased.
	 */
	public $shippingdiscount;
	/**
	 * @var string | The key of the seller who is promoting the item.
	 */
	public $sellerkey;
	/**
	 * @var string | The name of the seller's eBay Store.
	 */
	public $storename;
	/**
	 * @var PromotedItemType | The unique item ID of the cross-promoted item. Use for an ItemToItem rule.
	 */
	public $promoteditem;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param PromotionSchemeCodeType $val
	 * @throws Exception
	 */
	public function setPrimaryScheme($val)
	{
        $this->primaryscheme = (int)$val;
	}

	/**
	 * @param PromotionMethodCodeType $val
	 * @throws Exception
	 */
	public function setPromotionMethod($val)
	{
        $this->promotionmethod = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerID');
        }
        $this->sellerid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingDiscount($val)
	{
        $this->shippingdiscount = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerKey($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerKey');
        }
        $this->sellerkey = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStoreName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for StoreName');
        }
        $this->storename = (int)$val;
	}

	/**
	 * @param PromotedItemType $val
	 * @throws Exception
	 */
	public function setPromotedItem($val)
	{
        $this->promoteditem = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class CurrencyCodeType
{
	const AFA        = 'AFA';
	const ALL        = 'ALL';
	const DZD        = 'DZD';
	const ADP        = 'ADP';
	const AOA        = 'AOA';
	const ARS        = 'ARS';
	const AMD        = 'AMD';
	const AWG        = 'AWG';
	const AZM        = 'AZM';
	const BSD        = 'BSD';
	const BHD        = 'BHD';
	const BDT        = 'BDT';
	const BBD        = 'BBD';
	const BYR        = 'BYR';
	const BZD        = 'BZD';
	const BMD        = 'BMD';
	const BTN        = 'BTN';
	const INR        = 'INR';
	const BOV        = 'BOV';
	const BOB        = 'BOB';
	const BAM        = 'BAM';
	const BWP        = 'BWP';
	const BRL        = 'BRL';
	const BND        = 'BND';
	const BGL        = 'BGL';
	const BGN        = 'BGN';
	const BIF        = 'BIF';
	const KHR        = 'KHR';
	const CAD        = 'CAD';
	const CVE        = 'CVE';
	const KYD        = 'KYD';
	const XAF        = 'XAF';
	const CLF        = 'CLF';
	const CLP        = 'CLP';
	const CNY        = 'CNY';
	const COP        = 'COP';
	const KMF        = 'KMF';
	const CDF        = 'CDF';
	const CRC        = 'CRC';
	const HRK        = 'HRK';
	const CUP        = 'CUP';
	const CYP        = 'CYP';
	const CZK        = 'CZK';
	const DKK        = 'DKK';
	const DJF        = 'DJF';
	const DOP        = 'DOP';
	const TPE        = 'TPE';
	const ECV        = 'ECV';
	const ECS        = 'ECS';
	const EGP        = 'EGP';
	const SVC        = 'SVC';
	const ERN        = 'ERN';
	const EEK        = 'EEK';
	const ETB        = 'ETB';
	const FKP        = 'FKP';
	const FJD        = 'FJD';
	const GMD        = 'GMD';
	const GEL        = 'GEL';
	const GHC        = 'GHC';
	const GIP        = 'GIP';
	const GTQ        = 'GTQ';
	const GNF        = 'GNF';
	const GWP        = 'GWP';
	const GYD        = 'GYD';
	const HTG        = 'HTG';
	const HNL        = 'HNL';
	const HKD        = 'HKD';
	const HUF        = 'HUF';
	const ISK        = 'ISK';
	const IDR        = 'IDR';
	const IRR        = 'IRR';
	const IQD        = 'IQD';
	const ILS        = 'ILS';
	const JMD        = 'JMD';
	const JPY        = 'JPY';
	const JOD        = 'JOD';
	const KZT        = 'KZT';
	const KES        = 'KES';
	const AUD        = 'AUD';
	const KPW        = 'KPW';
	const KRW        = 'KRW';
	const KWD        = 'KWD';
	const KGS        = 'KGS';
	const LAK        = 'LAK';
	const LVL        = 'LVL';
	const LBP        = 'LBP';
	const LSL        = 'LSL';
	const LRD        = 'LRD';
	const LYD        = 'LYD';
	const CHF        = 'CHF';
	const LTL        = 'LTL';
	const MOP        = 'MOP';
	const MKD        = 'MKD';
	const MGF        = 'MGF';
	const MWK        = 'MWK';
	const MYR        = 'MYR';
	const MVR        = 'MVR';
	const MTL        = 'MTL';
	const EUR        = 'EUR';
	const MRO        = 'MRO';
	const MUR        = 'MUR';
	const MXN        = 'MXN';
	const MXV        = 'MXV';
	const MDL        = 'MDL';
	const MNT        = 'MNT';
	const XCD        = 'XCD';
	const MZM        = 'MZM';
	const MMK        = 'MMK';
	const ZAR        = 'ZAR';
	const NAD        = 'NAD';
	const NPR        = 'NPR';
	const ANG        = 'ANG';
	const XPF        = 'XPF';
	const NZD        = 'NZD';
	const NIO        = 'NIO';
	const NGN        = 'NGN';
	const NOK        = 'NOK';
	const OMR        = 'OMR';
	const PKR        = 'PKR';
	const PAB        = 'PAB';
	const PGK        = 'PGK';
	const PYG        = 'PYG';
	const PEN        = 'PEN';
	const PHP        = 'PHP';
	const PLN        = 'PLN';
	const USD        = 'USD';
	const QAR        = 'QAR';
	const ROL        = 'ROL';
	const RUB        = 'RUB';
	const RUR        = 'RUR';
	const RWF        = 'RWF';
	const SHP        = 'SHP';
	const WST        = 'WST';
	const STD        = 'STD';
	const SAR        = 'SAR';
	const SCR        = 'SCR';
	const SLL        = 'SLL';
	const SGD        = 'SGD';
	const SKK        = 'SKK';
	const SIT        = 'SIT';
	const SBD        = 'SBD';
	const SOS        = 'SOS';
	const LKR        = 'LKR';
	const SDD        = 'SDD';
	const SRG        = 'SRG';
	const SZL        = 'SZL';
	const SEK        = 'SEK';
	const SYP        = 'SYP';
	const TWD        = 'TWD';
	const TJS        = 'TJS';
	const TZS        = 'TZS';
	const THB        = 'THB';
	const XOF        = 'XOF';
	const TOP        = 'TOP';
	const TTD        = 'TTD';
	const TND        = 'TND';
	const TRL        = 'TRL';
	const TMM        = 'TMM';
	const UGX        = 'UGX';
	const UAH        = 'UAH';
	const AED        = 'AED';
	const GBP        = 'GBP';
	const USS        = 'USS';
	const USN        = 'USN';
	const UYU        = 'UYU';
	const UZS        = 'UZS';
	const VUV        = 'VUV';
	const VEB        = 'VEB';
	const VND        = 'VND';
	const MAD        = 'MAD';
	const YER        = 'YER';
	const YUM        = 'YUM';
	const ZMK        = 'ZMK';
	const ZWD        = 'ZWD';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * CurrencyDetailsType
 * Details about a currency.
 */
class CurrencyDetailsType
{
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * DataElementSetType
 * Container for a set of data elements (see below) that are applicable for a set of products
 * that were returned within the same response. The data elements contain supplemental information
 * that can help end users understand product search results. Usage of this information is
 * optional and may require developers to inspect the information to determine how it can be
 * applied in an application. Output only.
 */
class DataElementSetType
{
	/**
	 * @var string | An HTML snippet that specifies hints for the user, help links, help graphics, and other
	 * supplemental information that varies per characteristic set. In GetProductSearchPage, one
	 * DataElement value contains a hint (including an empty HTML achor element), one DataElement
	 * value may contain a URL to insert into the HTML anchor as the href value, and one DataElement
	 * value may contain a URL that eBay uses as a help graphic. If no value is available in the
	 * meta-data, a dash ("--") is returned instead. Usage of this information is optional and
	 * may require developers to inspect the information to determine how it can be applied in
	 * an application. Because this is returned as a string, the HTML markup elements are escaped
	 * with character entity references (e.g.,&lt;a href=""&gt;&lt;Attributes&gt;...). See the
	 * appendices in the eBay Web Services guide for general information about string data types.
	 */
	public $dataelement;
	/**
	 * @var int | Identifier for a data element. This is primarily for internal use by eBay. Developers can
	 * choose to inspect this information and determine how it can be applied in their applications.
	 */
	public $dataelementid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var int
	 */
	public $attributesetid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDataElement($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DataElement');
        }
        $this->dataelement = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDataElementID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->dataelementid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}
}

class DateSpecifierCodeType
{
	const M          = 'M';
	const D          = 'D';
	const Y          = 'Y';
	const CUSTOMCODE = 'CustomCode';
}

class DepositTypeCodeType
{
	const NONE        = 'None';
	const OTHERMETHOD = 'OtherMethod';
	const FASTDEPOSIT = 'FastDeposit';
	const CUSTOMCODE  = 'CustomCode';
}

class DescriptionReviseModeCodeType
{
	const REPLACE    = 'Replace';
	const PREPEND    = 'Prepend';
	const APPEND     = 'Append';
	const CUSTOMCODE = 'CustomCode';
}

class DescriptionTemplateCodeType
{
	const LAYOUT     = 'Layout';
	const THEME      = 'Theme';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * DescriptionTemplateType
 * The information for one Theme or one Layout.
 */
class DescriptionTemplateType
{
	/**
	 * @var int | Unique identifier for this theme group.
	 */
	public $groupid;
	/**
	 * @var int | Key you specified in ProductSearchID in the search request to distinguish between query
	 * results. Primarily useful when conducting multiple searches in the same call. If no ProductSearchID
	 * value was specified in the request, returns the array index of the search result (beginning
	 * with 0). Not applicable to GetProductFamilyMembers.
	 */
	public $id;
	/**
	 * @var anyURI | The image associated with the department, aisle, or product, if any. All domains should
	 * be associated with an image. However, there may be rare cases when an image is not available.
	 */
	public $imageurl;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | XML defining the template. Elements you must include in your XML: ThemeTop, ThemeUserCellTop,
	 * ThemeUserContent, ThemeUserCellBottom, ThemeBottom. Not returned for Layouts.
	 */
	public $templatexml;
	/**
	 * @var DescriptionTemplateCodeType | Returns the notification type. Possible values include: AskSellerQuestion, AuctionCheckoutComplete,
	 * BestOffer, CheckoutBuyerRequestTotal, EndOfAuction, Feedback, FixedPriceEndOfTransaction,
	 * FixedPriceTransaction, ItemNotReceived, MyMessages, OutBid, SecondChanceOffer, UPIBuyerResponseDispute,
	 * UPISellerClosedDispute, UPISellerOpenedDispute, and UPISellerRespondedToDispute.
	 */
	public $type;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setGroupID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->groupid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->id = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setImageURL($val)
	{
        $this->imageurl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTemplateXML($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TemplateXML');
        }
        $this->templatexml = (int)$val;
	}

	/**
	 * @param DescriptionTemplateCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DetailNameCodeType
{
	const COUNTRYDETAILS          = 'CountryDetails';
	const CURRENCYDETAILS         = 'CurrencyDetails';
	const PAYMENTOPTIONDETAILS    = 'PaymentOptionDetails';
	const REGIONDETAILS           = 'RegionDetails';
	const SHIPPINGLOCATIONDETAILS = 'ShippingLocationDetails';
	const SHIPPINGSERVICEDETAILS  = 'ShippingServiceDetails';
	const SITEDETAILS             = 'SiteDetails';
	const TAXJURISDICTION         = 'TaxJurisdiction';
	const URLDETAILS              = 'URLDetails';
	const CUSTOMCODE              = 'CustomCode';
	const DISPATCHTIMEMAXDETAILS  = 'DispatchTimeMaxDetails';
}

class DeviceTypeCodeType
{
	const PLATFORM   = 'Platform';
	const SMS        = 'SMS';
	const CUSTOMCODE = 'CustomCode';
}

class DigitalDeliveryDetailsType
{
	/**
	 * @var string | File type, operating system specifications, or other requirements for using the digital
	 * item. In this section, specify the following information about your digital item, if applicable:<br> -
	 * Type of file (file format). Examples include MP3, MOV, etc.<br> - Any computer hardware
	 * or software requirements. For example, is your file compatible with both PCs and Macintosh
	 * computers? Will it work with all operating systems (Windows XP, Windows 2000, Mac OS X,
	 * etc.)? Does the buyer need a specific software program, such as Microsoft Word, to use
	 * the item?<br> - Any other requirements. For example, does the buyer need to provide an
	 * email address where you will send the item?<br> For example: "Adobe PDF (Portable Document
	 * Format) file; buyer will need Adobe Acrobat Reader 5.0 or higher and 5MB of available hard-disk
	 * space." Be as specific as possible so that buyers know exactly what they need to access
	 * and use the item successfully. This information will appear in your listing so that buyers
	 * can make an informed purchase decision.
	 */
	public $requirements;
	/**
	 * @var DigitalDeliveryMethodCodeType | The digital download method.
	 */
	public $method;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var string | Text instructions for accessing the digital item. For example, if no delivery URL is provided,
	 * the seller may ask the buyer to specify an email address when they pay for the item so
	 * that the seller can send the file to the buyer. If a Web address is specified in URL, the
	 * seller may provide instructions on using the Web address. The text will be displayed as
	 * is (so do not pass in HTML or Javascript). The information will be displayed to the buyer
	 * only after payment has been confirmed. Required if Method value is AlternateDeliveryInstructions. Optional
	 * if Method value is DownloadURL and a DownloadURL value is specified. Ignored if Method
	 * value is None.
	 */
	public $instructions;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRequirements($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Requirements');
        }
        $this->requirements = (int)$val;
	}

	/**
	 * @param DigitalDeliveryMethodCodeType $val
	 * @throws Exception
	 */
	public function setMethod($val)
	{
        $this->method = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setInstructions($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Instructions');
        }
        $this->instructions = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DigitalDeliveryEnabledCodeType
{
	const DISABLED   = 'Disabled';
	const ENABLED    = 'Enabled';
	const PROMOTED   = 'Promoted';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * DigitalDeliveryEnabledDefinitionType
 * If the field is present, the digital delivery feature applies to the category. If applicable,
 * the field is returned as an empty element (i.e., a boolean value is not returned).
 */
class DigitalDeliveryEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DigitalDeliveryMethodCodeType
{
	const NONE                          = 'None';
	const DOWNLOADURL                   = 'DownloadURL';
	const ALTERNATEDELIVERYINSTRUCTIONS = 'AlternateDeliveryInstructions';
	const CUSTOMCODE                    = 'CustomCode';
}

/**
 * DispatchTimeMaxDetailsType
 * Details about a specific maximum dispatch time, the maximum number of business days required
 * to ship an item to domestic buyers after receiving a cleared payment.
 */
class DispatchTimeMaxDetailsType
{
	/**
	 * @var int | Specifies the maximum number of business days the seller commits to for shipping an item
	 * to domestic buyers after receiving a cleared payment. The seller sets this to an integer
	 * value (1, 2, 3, 4, 5, 10, 15, or 20) corresponding to the number of days. To add Get It
	 * Fast to listings, in addition to setting GetItFast to true, DispatchTimeMax must be set
	 * to 1 and the seller must specify at least one qualifying expedited shipping service. GetItem
	 * returns DispatchTimeMax only when shipping service options are specified for the item.
	 */
	public $dispatchtimemax;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDispatchTimeMax($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->dispatchtimemax = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class DisplayPayNowButtonCodeType
{
	const SHOWPAYNOWBUTTONFORALLPAYMENTMETHODS = 'ShowPayNowButtonForAllPaymentMethods';
	const SHOWPAYNOWBUTTONFORPAYPALONLY        = 'ShowPayNowButtonForPayPalOnly';
	const CUSTOMCODE                           = 'CustomCode';
}

/**
 * DisputeArrayType
 * Represents a list of disputes. Can hold zero or more Dispute types, each of which describes
 * a dispute.
 */
class DisputeArrayType
{
	/**
	 * @var DisputeType | The information that describes a dispute, including the buyer's name, the transaction ID,
	 * the dispute state and status, whether the dispute is resolved, and any messages posted
	 * to the dispute.
	 */
	public $dispute;
	/**
	 * @param DisputeType $val
	 * @throws Exception
	 */
	public function setDispute($val)
	{
        $this->dispute = (int)$val;
	}
}

/**
 * DisputeType
 * Contains all information describing a dispute.
 */
class DisputeType
{
	/**
	 * @var DisputeIDType | The unique identifier of a dispute, returned by the eBay site when the dispute is created.
	 */
	public $disputeid;
	/**
	 * @var DisputeRecordTypeCodeType | The type of dispute.
	 */
	public $disputerecordtype;
	/**
	 * @var DisputeStateCodeType | The internal state of the dispute. The value determines which values of DisputeActivity
	 * are valid when responding to a dispute.
	 */
	public $disputestate;
	/**
	 * @var DisputeStatusCodeType | The status of the dispute, which provides additional information about the dispute state.
	 */
	public $disputestatus;
	/**
	 * @var TradingRoleCodeType | The role of the person involved in the dispute who is not taking action or requesting information.
	 * The role is either Buyer or Seller.
	 */
	public $otherpartyrole;
	/**
	 * @var string | The user name of the person involved in the dispute who is not taking action or requesting
	 * information. The role is either Buyer or Seller.
	 */
	public $otherpartyname;
	/**
	 * @var TradingRoleCodeType | The role of the person involved in the dispute who is taking action or  requesting information.
	 * The role is either Buyer or Seller.
	 */
	public $userrole;
	/**
	 * @var UserIDType | User ID of the order's buyer. Not applicable to Half.com.
	 */
	public $buyeruserid;
	/**
	 * @var UserIDType | The eBay user ID of the seller involved in the dispute.
	 */
	public $selleruserid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var DisputeReasonCodeType | The top-level reason for the dispute. The value of DisputeReason determines which values
	 * of DisputeExplanation are valid. See DisputeExplanationCodeList for details.
	 */
	public $disputereason;
	/**
	 * @var DisputeExplanationCodeType | The detailed explanation for the dispute. Valid values depend on the value of DisputeReason.
	 * See DisputeExplanationCodeList for details.
	 */
	public $disputeexplanation;
	/**
	 * @var DisputeCreditEligibilityCodeType | Whether the dispute is currently eligible for Final Value Fee credit. The value is usually
	 * Ineligible until 7 days after the dispute was created, unless a fee exception applies.
	 */
	public $disputecrediteligibility;
	/**
	 * @var dateTime | The date and time the dispute was created, in GMT.
	 */
	public $disputecreatedtime;
	/**
	 * @var dateTime | The date and time the dispute was modified, in GMT.
	 */
	public $disputemodifiedtime;
	/**
	 * @var DisputeResolutionType | The action resulting from the dispute resolution. The action might include a Final Value
	 * Fee credit to the seller, a strike to the buyer, a reversal, or an appeal.
	 */
	public $disputeresolution;
	/**
	 * @var DisputeMessageType | A response or message posted to a dispute, either by an application or by a user on the
	 * eBay site.
	 */
	public $disputemessage;
	/**
	 * @var boolean | Whether the buyer can close a dispute unhappy and escalate it to the eBay Standard Purchase
	 * Protection Program. To escalate, the buyer must be eligible for the PPP. Used in Item Not
	 * Received disputes.
	 */
	public $escalation;
	/**
	 * @var boolean | Whether the buyer is eligible for the eBay Standard Purchase Protection Program. The eligibility
	 * rules are described in the eBay site online help. Used in Item Not Received disputes.
	 */
	public $purchaseprotection;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param DisputeIDType $val
	 * @throws Exception
	 */
	public function setDisputeID($val)
	{
        $this->disputeid = (int)$val;
	}

	/**
	 * @param DisputeRecordTypeCodeType $val
	 * @throws Exception
	 */
	public function setDisputeRecordType($val)
	{
        $this->disputerecordtype = (int)$val;
	}

	/**
	 * @param DisputeStateCodeType $val
	 * @throws Exception
	 */
	public function setDisputeState($val)
	{
        $this->disputestate = (int)$val;
	}

	/**
	 * @param DisputeStatusCodeType $val
	 * @throws Exception
	 */
	public function setDisputeStatus($val)
	{
        $this->disputestatus = (int)$val;
	}

	/**
	 * @param TradingRoleCodeType $val
	 * @throws Exception
	 */
	public function setOtherPartyRole($val)
	{
        $this->otherpartyrole = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setOtherPartyName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for OtherPartyName');
        }
        $this->otherpartyname = (int)$val;
	}

	/**
	 * @param TradingRoleCodeType $val
	 * @throws Exception
	 */
	public function setUserRole($val)
	{
        $this->userrole = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setBuyerUserID($val)
	{
        $this->buyeruserid = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setSellerUserID($val)
	{
        $this->selleruserid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param DisputeReasonCodeType $val
	 * @throws Exception
	 */
	public function setDisputeReason($val)
	{
        $this->disputereason = (int)$val;
	}

	/**
	 * @param DisputeExplanationCodeType $val
	 * @throws Exception
	 */
	public function setDisputeExplanation($val)
	{
        $this->disputeexplanation = (int)$val;
	}

	/**
	 * @param DisputeCreditEligibilityCodeType $val
	 * @throws Exception
	 */
	public function setDisputeCreditEligibility($val)
	{
        $this->disputecrediteligibility = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setDisputeCreatedTime($val)
	{
        $this->disputecreatedtime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setDisputeModifiedTime($val)
	{
        $this->disputemodifiedtime = (int)$val;
	}

	/**
	 * @param DisputeResolutionType $val
	 * @throws Exception
	 */
	public function setDisputeResolution($val)
	{
        $this->disputeresolution = (int)$val;
	}

	/**
	 * @param DisputeMessageType $val
	 * @throws Exception
	 */
	public function setDisputeMessage($val)
	{
        $this->disputemessage = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEscalation($val)
	{
        $this->escalation = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPurchaseProtection($val)
	{
        $this->purchaseprotection = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * DistanceType
 * DistanceType used in proximity search
 */
class DistanceType
{
	/**
	 * @var int | The measurement used in a proximity search distance calculation.
	 */
	public $distancemeasurement;
	/**
	 * @var string | The unit used in a proximity search distance calculation.
	 */
	public $distanceunit;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDistanceMeasurement($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->distancemeasurement = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDistanceUnit($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DistanceUnit');
        }
        $this->distanceunit = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * DomainHistogramType
 * Container for a list of Express departments, aisles, and/or products. Can contain zero,
 * one, or multiple ExpressHistogramDepartmentType objects.
 */
class DomainHistogramType
{
	/**
	 * @var ExpressHistogramDepartmentType | Contains item and product counts for a department, aisles, and/or Express product types. Only
	 * returned when HistogramDetails is configured to retrieve histogram data. Multiple Department
	 * nodes can be returned.
	 */
	public $department;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ExpressHistogramDepartmentType $val
	 * @throws Exception
	 */
	public function setDepartment($val)
	{
        $this->department = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * DutchBINEnabledDefinitionType
 * Defines the DutchBINEnabled feature. If the field is present, the corresponding feature
 * applies to the category. The field is returned as an empty element (i.e., a boolean value
 * is not returned).
 */
class DutchBiNenabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class EbaySubscriptionTypeCodeType
{
	const SELLERASSISTANT      = 'SellerAssistant';
	const SELLERASSISTANTPRO   = 'SellerAssistantPro';
	const EBAYSTOREBASIC       = 'EBayStoreBasic';
	const EBAYSTOREFEATURED    = 'EBayStoreFeatured';
	const EBAYSTOREANCHOR      = 'EBayStoreAnchor';
	const SELLINGMANAGER       = 'SellingManager';
	const SELLINGMANAGERPRO    = 'SellingManagerPro';
	const PICTUREMANAGERLEVEL1 = 'PictureManagerLevel1';
	const PICTUREMANAGERLEVEL2 = 'PictureManagerLevel2';
	const PICTUREMANAGERLEVEL3 = 'PictureManagerLevel3';
	const PICTUREMANAGERLEVEL4 = 'PictureManagerLevel4';
	const PICTUREMANAGERLEVEL5 = 'PictureManagerLevel5';
	const PICTUREMANAGERLEVEL6 = 'PictureManagerLevel6';
	const PICTUREMANAGERLEVEL7 = 'PictureManagerLevel7';
	const SELLERREPORTSBASIC   = 'SellerReportsBasic';
	const SELLERREPORTSPLUS    = 'SellerReportsPlus';
	const FILEEXCHANGE         = 'FileExchange';
	const LOCALMARKETSPECIALTY = 'LocalMarketSpecialty';
	const LOCALMARKETREGULAR   = 'LocalMarketRegular';
	const LOCALMARKETPREMIUM   = 'LocalMarketPremium';
	const CUSTOMCODE           = 'CustomCode';
}

class EnableCodeType
{
	const ENABLE     = 'Enable';
	const DISABLE    = 'Disable';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * EndOfAuctionEmailPreferencesType
 * Contains the seller's preferences for the end of auction (EOA) email to the buyer.
 */
class EndOfAuctionEmailPreferencesType
{
	/**
	 * @var string | The text of the custom message for the end of auction (for auctions) or end of transaction
	 * (for Buy It Now) emails.
	 */
	public $templatetext;
	/**
	 * @var anyURI | The URL of the logo to include in the customized email.
	 */
	public $logourl;
	/**
	 * @var EndOfAuctionLogoTypeCodeType | The type of logo to include in the customized email.
	 */
	public $logotype;
	/**
	 * @var boolean | Indicates whether or not the seller wishes to send a customized email to winning buyers.
	 */
	public $emailcustomized;
	/**
	 * @var boolean | Indicates whether or not the text of the customized message will be customized.
	 */
	public $textcustomized;
	/**
	 * @var boolean | Indicates whether or not the seller wishes to include a logo in the customized email.
	 */
	public $logocustomized;
	/**
	 * @var boolean | Indicates whether or not the seller wishes to receive a copy of the customized email sent
	 * to the winning buyer.
	 */
	public $copyemail;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTemplateText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TemplateText');
        }
        $this->templatetext = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setLogoURL($val)
	{
        $this->logourl = (int)$val;
	}

	/**
	 * @param EndOfAuctionLogoTypeCodeType $val
	 * @throws Exception
	 */
	public function setLogoType($val)
	{
        $this->logotype = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEmailCustomized($val)
	{
        $this->emailcustomized = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setTextCustomized($val)
	{
        $this->textcustomized = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLogoCustomized($val)
	{
        $this->logocustomized = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCopyEmail($val)
	{
        $this->copyemail = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class EndOfAuctionLogoTypeCodeType
{
	const WINNINGBIDDERNOTICE = 'WinningBidderNotice';
	const STORE               = 'Store';
	const CUSTOMIZED          = 'Customized';
	const CUSTOMCODE          = 'CustomCode';
	const NONE                = 'None';
}

class EndReasonCodeType
{
	const LOSTORBROKEN      = 'LostOrBroken';
	const NOTAVAILABLE      = 'NotAvailable';
	const INCORRECT         = 'Incorrect';
	const OTHERLISTINGERROR = 'OtherListingError';
	const CUSTOMCODE        = 'CustomCode';
	const SELLTOHIGHBIDDER  = 'SellToHighBidder';
}

/**
 * ExpansionArrayType
 * Container for items returned with an expanded search.
 */
class ExpansionArrayType
{
	/**
	 * @var SearchResultItemType | Item that is the result of an expanded search. If, in a GetSearchResults request, you specify
	 * true for ExpandSearch, the search is expanded when a small result set is returned. For
	 * example, on the US site (site ID 0), if a search would normally result in fewer than 10
	 * items, then the search results are expanded. Specifically, the search returns items (if
	 * there are matches) in one or more of the following containers: InternationalExpansionArray
	 * (for items available from international sellers), FilterRemovedExpansionArray (items that
	 * would be returned if filters such as PriceRangeFilter are removed), StoreExpansionArray
	 * (for items listed in the Store Inventory Format), and AllCategoriesExpansionArray (for
	 * items available if category filters are removed). The maximum number of items returned
	 * in each container is 6 to 10.
	 */
	public $expansionitem;
	/**
	 * @var int | The total number of My eBay Second Chance Offers available.
	 */
	public $totalavailable;
	/**
	 * @param SearchResultItemType $val
	 * @throws Exception
	 */
	public function setExpansionItem($val)
	{
        $this->expansionitem = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalavailable = (int)$val;
	}
}

/**
 * ExpressConditionRequiredDefinitionType
 * For the US and Germany sites, an eBay item must meet a number of eligibility requirements
 * in order to also be included on eBay Express. One requirement is that the item must include
 * the Item Condition attribute (using Item Specifics). Some categories may waive this requirement. Currently,
 * this type defines no special meta-data. (An empty element is returned.)
 */
class ExpressConditionRequiredDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ExpressDetailLevelCodeType
{
	const COARSE     = 'Coarse';
	const FINE       = 'Fine';
	const NONE       = 'None';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * ExpressDetailsType
 * Item details that are only applicable to listings on Express (not the main eBay site).
 */
class ExpressDetailsType
{
	/**
	 * @var anyURI | Large gallery image that appears in the "Grid View" in search results on the Express site. The
	 * longest dimension is 140 pixels. Only returned when ItemDetails is set to Fine.<br> <br> Express
	 * generates the image based on pictures that the seller includes in the listing. For details
	 * about Express listing criteria, see the eBay Web Services Guide link below.<br> <br> If
	 * the item was listed in an eBay category that does not require pictures for Express (like
	 * Tickets), a generic image may be returned instead.
	 */
	public $expresslargeimage;
	/**
	 * @var anyURI | Small gallery image that appears in the "List View" in search results on the Express site. The
	 * longest dimension is 96 pixels. Only returned when ItemDetails is set to Fine.<br> <br> Express
	 * generates the image based on pictures that the seller includes in the listing. For details
	 * about Express listing criteria, see the eBay Web Services Guide link below.<br> <br> If
	 * the item was listed in an eBay category that does not require pictures for Express (like
	 * Tickets), a generic image may be returned instead.
	 */
	public $expresssmallimage;
	/**
	 * @var string | The item condition, if any. On Express US, this is often a value like "New", "Used", or
	 * "Refurbished", but the exact value can vary based on the Item Condition data that the seller
	 * used in the listing.<br> For example, in some eBay categories, the condition can have a
	 * value like "New: With Tags" instead. (At the time of this writing, GetSearchResultsExpress
	 * mapped all conditions to "New" and "Used". However, this could change in the future.) By
	 * default, only new items (or the equivalent) are returned from GetSearchResultsExpress. Use
	 * Condition in the request to include used and refurbished items (or the equivalent) as well. Only
	 * returned when ItemDetails is set to Fine.<br> <br> Not applicable to calls that browse
	 * or search items on the main eBay site.
	 */
	public $condition;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setExpressLargeImage($val)
	{
        $this->expresslargeimage = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setExpressSmallImage($val)
	{
        $this->expresssmallimage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCondition($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Condition');
        }
        $this->condition = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExpressEnabledDefinitionType
 * For the US and Germany sites, an eBay item must meet a number of eligibility requirements
 * in order to also be included on eBay Express. One requirement is that the category needs
 * to support Express. Currently, this type defines no special meta-data. (An empty element
 * is returned.)
 */
class ExpressEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExpressHistogramAisleType
 * Details about an Express aisle and matching item and catalog product counts in that aisle,
 * if any.
 */
class ExpressHistogramAisleType
{
	/**
	 * @var ExpressHistogramDomainDetailsType | Identifies an Express product type and provides item and eBay catalog product counts in
	 * that product type. Only returned if a product type matched the request.<br> <br> A product
	 * type domain can stand alone, or it can be grouped with other product types into an aisle
	 * or a department.
	 */
	public $domaindetails;
	/**
	 * @var ExpressHistogramProductType | Contains item and catalog product counts for an Express product type. Only returned when
	 * HistogramDetails is configured to return product types.<br> <br> An Aisle node can contain
	 * multiple ProductType nodes.
	 */
	public $producttype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ExpressHistogramDomainDetailsType $val
	 * @throws Exception
	 */
	public function setDomainDetails($val)
	{
        $this->domaindetails = (int)$val;
	}

	/**
	 * @param ExpressHistogramProductType $val
	 * @throws Exception
	 */
	public function setProductType($val)
	{
        $this->producttype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExpressHistogramDepartmentType
 * Details about an Express department and matching item and catalog product counts in that
 * department, if any.
 */
class ExpressHistogramDepartmentType
{
	/**
	 * @var ExpressHistogramDomainDetailsType | Identifies an Express product type and provides item and eBay catalog product counts in
	 * that product type. Only returned if a product type matched the request.<br> <br> A product
	 * type domain can stand alone, or it can be grouped with other product types into an aisle
	 * or a department.
	 */
	public $domaindetails;
	/**
	 * @var ExpressHistogramAisleType | Contains item and catalog product counts for an aisle (if any) and may contain a list of
	 * product types. Only returned when HistogramDetails is configured to return aisles and/or
	 * product types.<br> <br> A Department node can contain multiple Aisle nodes.
	 */
	public $aisle;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ExpressHistogramDomainDetailsType $val
	 * @throws Exception
	 */
	public function setDomainDetails($val)
	{
        $this->domaindetails = (int)$val;
	}

	/**
	 * @param ExpressHistogramAisleType $val
	 * @throws Exception
	 */
	public function setAisle($val)
	{
        $this->aisle = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExpressHistogramDomainDetailsType
 * Identifies a domain and provides statistics for items and catalog products found in that
 * domain.
 */
class ExpressHistogramDomainDetailsType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | Specifies whether the bread crumb needs to be displayed above the listing header.
	 */
	public $breadcrumb;
	/**
	 * @var int | Total number of active listings (on the specified Express site) that were pre-filled based
	 * on this eBay catalog product. Only returned when ProductDetails is set to Fine. This does
	 * not necessarily match the number of items returned in ItemArray (if any), because the call
	 * returns deduped items in ItemArray.
	 */
	public $itemcount;
	/**
	 * @var int | The number of matching eBay catalog products that were found in the specified department,
	 * aisle, or product type at the moment when your request was processed.<br> <br> If HistogramDetails==Coarse
	 * and you don't specify DepartmentName, AisleName, or ProductTypeName in the request, Express
	 * only counts catalog products found in matching departments. In this particular case, ProductCount
	 * could be 0 in all domain histogram results when the only matching catalog products are
	 * in stand-alone product types or aisles (because they aren't grouped into departments).
	 */
	public $productcount;
	/**
	 * @var anyURI | The image associated with the department, aisle, or product, if any. All domains should
	 * be associated with an image. However, there may be rare cases when an image is not available.
	 */
	public $imageurl;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBreadCrumb($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BreadCrumb');
        }
        $this->breadcrumb = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productcount = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setImageURL($val)
	{
        $this->imageurl = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExpressHistogramProductType
 * Details about an Express product type and matching item and catalog product counts in that
 * product type, if any.
 */
class ExpressHistogramProductType
{
	/**
	 * @var ExpressHistogramDomainDetailsType | Identifies an Express product type and provides item and eBay catalog product counts in
	 * that product type. Only returned if a product type matched the request.<br> <br> A product
	 * type domain can stand alone, or it can be grouped with other product types into an aisle
	 * or a department.
	 */
	public $domaindetails;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ExpressHistogramDomainDetailsType $val
	 * @throws Exception
	 */
	public function setDomainDetails($val)
	{
        $this->domaindetails = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ExpressHistogramSortCodeType
{
	const ITEMCOUNT    = 'ItemCount';
	const PRODUCTCOUNT = 'ProductCount';
	const ALPHABETICAL = 'Alphabetical';
	const CUSTOMCODE   = 'CustomCode';
}

class ExpressItemRequirementsType
{
	/**
	 * @var boolean | If false, indicates that an item is not Express-eligible because the seller is not Express-eligible.
	 * Only returned if false, and no other settings are returned in this case.
	 */
	public $sellerexpresseligible;
	/**
	 * @var boolean | Preference to opt out an individual fixed price, auction with Buy It Now, or Store Inventory
	 * item from eBay Express. Specify as input when listing an item to indicate that the item should
	 * not be listed on eBay Express. By default, an item is opted in unless the seller has configured
	 * their user preferences to opt all items out of Express (see GetUserPreferences). So, if
	 * the seller and item qualify for eBay Express, the item will be made available on the Express
	 * site unless you set this flag to true to opt out.<br> <br> ExpressOptOut has no effect if
	 * the seller opts out in their user preferences. Also, you cannot set ExpressOptOut to false
	 * to force an ineligible item to be included on Express.<br> <br> This value is ignored when
	 * ListingType=Express.<br> <br> To determine whether an item was listed on Express, call
	 * GetItem and check the value of Item.ListingDetails.ExpressListing. To determine whether
	 * an item sold on Express, use a transaction call like GetItemTransactions (or the Checkout
	 * notification), and check the value of TransactionPlatform.
	 */
	public $expressoptout;
	/**
	 * @var boolean | If true, indicates eBay has marked the seller as eligible for eBay Express based on direct
	 * evaluation. Only returned if true, and no other seller requirement settings are returned
	 * in this case. For example, on the eBay Germany site, sellers need to fill out an application
	 * to become eligible to list on Express Germany. If they are approved, eBay sets ExpressApproved
	 * to true and no other seller requirement settings are relevant.
	 */
	public $expressapproved;
	/**
	 * @var boolean | If true, indicates the item listing format is eligible for Express. If false, the listing
	 * format is ineligible (and the item is therefore ineligible).
	 */
	public $expresseligiblelistingtype;
	/**
	 * @var boolean | If true, the item's primary category is enabled for Express. If false, the primary category
	 * is not enabled for Express (and the item is therefore ineligible).
	 */
	public $expressenabledcategory;
	/**
	 * @var boolean | If true, the seller has an eligible PayPal account for Express. Only returned if the site
	 * assesses this requirement at the seller level.
	 */
	public $eligiblepaypalaccount;
	/**
	 * @var boolean | If true, domestic shipping costs are specified for the item. If false, they aren't specified
	 * (and the item is therefore ineligible).
	 */
	public $domesticshippingcost;
	/**
	 * @var boolean | If true, the item is covered by a return policy that meets the site's requirements for
	 * Express. Only returned for Express Germany. (A return policy is optional for Express US.)
	 */
	public $eligiblereturnpolicy;
	/**
	 * @var boolean | Indicates whether a listing has an image associated with it.
	 */
	public $picture;
	/**
	 * @var boolean | If true, the item specifies an eligible item condition. If false, the item doesn't specify
	 * an eligible item condition. Only returned if the category requires an item condition for
	 * Express. Some categories waive the item condition requirement.
	 */
	public $eligibleitemcondition;
	/**
	 * @var boolean | If true, the price of the item is above the minimum price allowed on Express. That is,
	 * the StartPrice, BuyItNowPrice, or CurrentPrice is above the minimum.)
	 */
	public $priceaboveminimum;
	/**
	 * @var boolean | If true, the price of the item is below the maximum price allowed on Express. (That is,
	 * the StartPrice, BuyItNowPrice, or CurrentPrice is below the maximum.)
	 */
	public $pricebelowmaximum;
	/**
	 * @var boolean | If true, indicates the item meets the site's eBay Express requirements for checkout. (A
	 * common case when this could be false would be when ThirdPartyCheckout is true but ThirdPartyCheckoutIntegration
	 * is false.)
	 */
	public $eligiblecheckout;
	/**
	 * @var boolean | If true, the item has no pre-approved bidder list.
	 */
	public $nopreapprovedbidderlist;
	/**
	 * @var boolean | If true, the item is not an eBay Giving Works item. Only returned if the site does not
	 * allow charity listings on Express. (In other words, if the site excludes charity listings
	 * from Express, then NoCharity=true means the item meets the eligibility requirement.)
	 */
	public $nocharity;
	/**
	 * @var boolean | If true, the item is not a digital listing. That is, the seller did not specify DigitalDeliveryDetails. Only
	 * returned if the site does not allow digital listings on Express. (In other words, if the
	 * site excludes digital listings from Express, then NoDigitalDelivery=true means the item
	 * meets the eligibility requirement.)
	 */
	public $nodigitaldelivery;
	/**
	 * @var boolean | If true, the item offers a combined shipping discount. Only returned if the Express site
	 * has an item-level combined shipping discount requirement. (Some Express sites only require
	 * you to accept combined payments at the seller level, in your My eBay preferences.)
	 */
	public $combinedshippingdiscount;
	/**
	 * @var boolean | If true, the country you specified for the item meets the specified site's shipping origin
	 * requirements for Express.
	 */
	public $shipfromeligiblecountry;
	/**
	 * @var boolean | If true, the seller has a PayPal account that accepts a payment from a buyer with an unconfirmed
	 * address. Only returned if the site assesses this requirement at the seller level.
	 */
	public $paypalaccountacceptsunconfirmedaddress;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSellerExpressEligible($val)
	{
        $this->sellerexpresseligible = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressOptOut($val)
	{
        $this->expressoptout = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressApproved($val)
	{
        $this->expressapproved = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressEligibleListingType($val)
	{
        $this->expresseligiblelistingtype = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressEnabledCategory($val)
	{
        $this->expressenabledcategory = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEligiblePayPalAccount($val)
	{
        $this->eligiblepaypalaccount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDomesticShippingCost($val)
	{
        $this->domesticshippingcost = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEligibleReturnPolicy($val)
	{
        $this->eligiblereturnpolicy = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPicture($val)
	{
        $this->picture = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEligibleItemCondition($val)
	{
        $this->eligibleitemcondition = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPriceAboveMinimum($val)
	{
        $this->priceaboveminimum = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPriceBelowMaximum($val)
	{
        $this->pricebelowmaximum = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEligibleCheckout($val)
	{
        $this->eligiblecheckout = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setNoPreapprovedBidderList($val)
	{
        $this->nopreapprovedbidderlist = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setNoCharity($val)
	{
        $this->nocharity = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setNoDigitalDelivery($val)
	{
        $this->nodigitaldelivery = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCombinedShippingDiscount($val)
	{
        $this->combinedshippingdiscount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShipFromEligibleCountry($val)
	{
        $this->shipfromeligiblecountry = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPayPalAccountAcceptsUnconfirmedAddress($val)
	{
        $this->paypalaccountacceptsunconfirmedaddress = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ExpressItemSortCodeType
{
	const LOWESTTOTALCOST  = 'LowestTotalCost';
	const HIGHESTTOTALCOST = 'HighestTotalCost';
	const RELEVANCE        = 'Relevance';
	const CUSTOMCODE       = 'CustomCode';
}

/**
 * ExpressPicturesRequiredDefinitionType
 * For the US and Germany sites, an eBay item must meet a number of eligibility requirements
 * in order to also be included on eBay Express. One requirement is that the item must include
 * a picture (or gallery image). Currently, this type defines no special meta-data. (An empty
 * element is returned.)
 */
class ExpressPicturesRequiredDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExpressPreferencesType
 * Contains a seller's preferences related to listing items on Express.
 */
class ExpressPreferencesType
{
	/**
	 * @var ExpressSellingPreferenceCodeType | If true, the seller's preferences in My eBay are set to include listings on eBay Express. If
	 * false, the seller prefers not to include listings on Express, so the seller is therefore
	 * ineligible for Express (and no other seller requirement settings are returned in this case).
	 */
	public $expresssellingpreference;
	/**
	 * @var string | For eBay Germany users only. The PayPal account (email address) to use for eBay Express
	 * payments during checkout. If the first item in an order doesn't specify a PayPal account, Express
	 * Germany uses this default PayPal account for the item. (The account specified for the first
	 * item is used for all items in the same order.)<br> <br> This default account is only used
	 * for Express payments during checkout; it has no effect on item data. (To specify a default
	 * PayPal account for items, use the PayPal fields in the SellerPaymentPreferences node.)<br> <br> Only
	 * applicable to sellers who are qualified to list on Express Germany. Call GetUser to determine
	 * the seller's Express eligibility. <br> <br> When you set this value using SetUserPreferences,
	 * eBay validates that the PayPal account qualifies for Express. We check that the account is
	 * in good standing, it is a Business or Premier account, and it does not block unconfirmed
	 * addresses. This means the seller needs to configure their PayPal account correctly before
	 * calling SetUserPreferences.<br> <br> <span class="tablenote"><b>Note:</b> If the PayPal
	 * account becomes ineligible later (e.g., the seller blocks unconfirmed addresses), GetUserPreferences
	 * still returns the specified email address. Therefore, the existence of this preference
	 * in GetUserPreferences does not guarantee that the specified address is valid for Express. When
	 * a PayPal account becomes ineligible, Express reevaluates the eligibility of the seller
	 * and their items, and may remove the seller's items from Express. See the eBay Web Services
	 * guide links below for more information.</span><br> <br> This preference does not control
	 * the seller's eligibility for Express. However, it can control an item's eligibility in
	 * some cases. That is, for a fixed-price or Store Inventory item to be eligible for Express
	 * Germany, either the item or this Express preference must specify a valid PayPal email address.
	 * (For other eligibility requirements, see the eBay Web Services guide.)<br> <br> In GetUserPreferences,
	 * this preference is only returned if a default PayPal account has been specified.
	 */
	public $defaultpaypalaccount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ExpressSellingPreferenceCodeType $val
	 * @throws Exception
	 */
	public function setExpressSellingPreference($val)
	{
        $this->expresssellingpreference = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDefaultPayPalAccount($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DefaultPayPalAccount');
        }
        $this->defaultpaypalaccount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ExpressProductSortCodeType
{
	const LOWESTPRICE  = 'LowestPrice';
	const HIGHESTPRICE = 'HighestPrice';
	const SALESRANK    = 'SalesRank';
	const CUSTOMCODE   = 'CustomCode';
}

/**
 * ExpressProductType
 * Information that eBay Express collects about an eBay catalog product.
 */
class ExpressProductType
{
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @var AmountType | Specifies the lower limit of price range for the automatic search criteria.
	 */
	public $minprice;
	/**
	 * @var AmountType | Specifies the upper limit of price range for the automatic search criteria.
	 */
	public $maxprice;
	/**
	 * @var anyURI | Fully qualified URL for a standard image (if any) that is associated with the product. A
	 * seller includes the stock photo in the listing by setting IncludeStockPhotoURL.
	 */
	public $stockphotourl;
	/**
	 * @var int | Total number of active listings (on the specified Express site) that were pre-filled based
	 * on this eBay catalog product. Only returned when ProductDetails is set to Fine. This does
	 * not necessarily match the number of items returned in ItemArray (if any), because the call
	 * returns deduped items in ItemArray.
	 */
	public $itemcount;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @var long | The global reference ID for the eBay catalog product. Only returned when ProductDetails
	 * is set to Fine.<br> <br> <span class="tablenote"><b>Note:</b> This value is not the same
	 * as the ProductID used in AddItem and related calls. A ProductID represents a particular
	 * version of a catalog product, which is associated with a particular set of Item Specifics
	 * and other details. A ProductReferenceID is a more generic or global reference to a catalog
	 * product, which is useful for buy-side searching. One ProductReferenceID can be associated
	 * with multiple ProductIDs.</span>
	 */
	public $productreferenceid;
	/**
	 * @var NameValueListArrayType | A list of attribute and value pairs that are included in the product's pre-filled Item
	 * Specifics and that are applicable in Express search results. This does not necessarily
	 * include all Item Specifics that are defined for the product in the catalog. Typically,
	 * it returns only the top attributes (as determined by Express). See ExternalProductID for
	 * the ISBN or UPC, if applicable. Only returned when ProductDetails is set to Fine.
	 */
	public $itemspecifics;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinPrice($val)
	{
        $this->minprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMaxPrice($val)
	{
        $this->maxprice = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setStockPhotoURL($val)
	{
        $this->stockphotourl = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setItemCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->itemcount = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setProductReferenceID($val)
	{
        $this->productreferenceid = (int)$val;
	}

	/**
	 * @param NameValueListArrayType $val
	 * @throws Exception
	 */
	public function setItemSpecifics($val)
	{
        $this->itemspecifics = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ExpressSellerRequirementsType
{
	/**
	 * @var boolean | If true, the seller's preferences in My eBay are set to include listings on eBay Express. If
	 * false, the seller prefers not to include listings on Express, so the seller is therefore
	 * ineligible for Express (and no other seller requirement settings are returned in this case).
	 */
	public $expresssellingpreference;
	/**
	 * @var boolean | If true, indicates eBay has marked the seller as eligible for eBay Express based on direct
	 * evaluation. Only returned if true, and no other seller requirement settings are returned
	 * in this case. For example, on the eBay Germany site, sellers need to fill out an application
	 * to become eligible to list on Express Germany. If they are approved, eBay sets ExpressApproved
	 * to true and no other seller requirement settings are relevant.
	 */
	public $expressapproved;
	/**
	 * @var boolean | If true, indicates that the user is in good standing with eBay. (One of the requirements
	 * for listing a new item with Immediate Payment.)
	 */
	public $goodstanding;
	/**
	 * @var FeedbackRequirementsType | The aggregate feedback score for a user. A user's feedback score is the net positive feedback
	 * minus the net negative feedback left for the user. Feedback scores are a quantitative expression
	 * of the desirability of dealing with a user as a buyer or a seller in transactions. Each
	 * transaction can result in one feedback entry for a given user (the buyer can leave feedback
	 * for the seller, and the seller can leave feedback for the buyer.). That one feedback can
	 * be positive, negative, or neutral. The aggregated feedback counts for a particular user
	 * represent that user's overall feedback score (referred to as a "feedback rating" on the
	 * eBay site). If the user has chosen to make their feedback private and that user is not
	 * the user identified in the request's authentication token, FeedbackScore is not returned
	 * and FeedbackPrivate is returned with a value of true.<br> <br> To be eligible to list on
	 * Express, a seller's feedback score needs to be 100 or higher. See "eBay Express" in the
	 * eBay Web Services guide. In GetSearchResultsExpress, only returned when ItemDetails is
	 * set to Fine.<br> <br> In GetSearchResults and GetCategoryListings, feedback information
	 * is only returned if IncludeFeedback = true in the request. <br><br> Starting Jan 2007,
	 * when a bidder's user info is made anonymous, the real feedback score will be returned only
	 * for that bidder, and the seller of an item that the user is bidding on. For all other users,
	 * the value -99 is returned.
	 */
	public $feedbackscore;
	/**
	 * @var FeedbackRequirementsType | Percent of total feedback that is positive. For example, if the member has 50 feedbacks,
	 * where 49 are positive and 1 is neutral or negative, the positive feedback percent could
	 * be 98.0. The value uses a max precision of 4 and a scale of 1. If the user has feedback,
	 * this value can be returned regardless of whether the member has chosen to make their feedback
	 * private. Not returned if the user has no feedback. To be eligible to list on Express, a
	 * seller's feedback percent needs to be 98 or higher. See "eBay Express" in the eBay Web Services
	 * guide. In GetSearchResults and GetCategoryListings, feedback information is only returned
	 * if IncludeFeedback = true in the request.
	 */
	public $positivefeedbackpercent;
	/**
	 * @var FeedbackRequirementsType | If true, indicates that the seller meets the Express site's minimum feedback requirement
	 * (if any) for transactions as a seller (not a buyer).
	 */
	public $feedbackassellerscore;
	/**
	 * @var FeedbackRequirementsType | If true, indicates that the seller meets the Express site's minimum positive feedback requirement
	 * (if any) for transactions as a seller (not a buyer).
	 */
	public $positivefeedbackassellerpercent;
	/**
	 * @var boolean | If true, this indicates that the seller is a business user and intends to use listing features
	 * that are offered to business users only. Applicable only to business sellers residing in
	 * Germany, Austria, or Switzerland who are listing in a B2B VAT- enabled category on the
	 * eBay Germany (DE), Austria (AT), or Switzerland (CH) sites. The seller must have a valid VAT
	 * ID registered with eBay. This must be set to true if RestrictedToBusiness is true. It has
	 * no effect (and it's not returned) if RestrictedToBusiness is false. If an item was not
	 * qualified as a business item when originally listed, but meets the conditions for business
	 * items when the item is revised or relisted, the seller can convert the item to a business
	 * item by specifying the appropriate VAT details. See the eBay Web Services guide for more
	 * information and additional rules.
	 */
	public $businessseller;
	/**
	 * @var boolean | If true, the seller has an eligible PayPal account for Express. Only returned if the site
	 * assesses this requirement at the seller level.
	 */
	public $eligiblepaypalaccount;
	/**
	 * @var boolean | If true, the seller has a PayPal account that accepts a payment from a buyer with an unconfirmed
	 * address. Only returned if the site assesses this requirement at the seller level.
	 */
	public $paypalaccountacceptsunconfirmedaddress;
	/**
	 * @var boolean | If true, the seller accepts combined payments. If false, the seller doesn't accept combined
	 * payments (and the seller is therefore ineligible for Express, if the site requires this
	 * preference).
	 */
	public $combinedpaymentsaccepted;
	/**
	 * @var boolean | If true, the seller's feedback profile is public. If false, the seller's feedback details
	 * are private; that is, User.FeedbackPrivate is true (and the seller is therefore ineligible).
	 */
	public $feedbackpublic;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressSellingPreference($val)
	{
        $this->expresssellingpreference = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressApproved($val)
	{
        $this->expressapproved = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setGoodStanding($val)
	{
        $this->goodstanding = (int)$val;
	}

	/**
	 * @param FeedbackRequirementsType $val
	 * @throws Exception
	 */
	public function setFeedbackScore($val)
	{
        $this->feedbackscore = (int)$val;
	}

	/**
	 * @param FeedbackRequirementsType $val
	 * @throws Exception
	 */
	public function setPositiveFeedbackPercent($val)
	{
        $this->positivefeedbackpercent = (int)$val;
	}

	/**
	 * @param FeedbackRequirementsType $val
	 * @throws Exception
	 */
	public function setFeedbackAsSellerScore($val)
	{
        $this->feedbackassellerscore = (int)$val;
	}

	/**
	 * @param FeedbackRequirementsType $val
	 * @throws Exception
	 */
	public function setPositiveFeedbackAsSellerPercent($val)
	{
        $this->positivefeedbackassellerpercent = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBusinessSeller($val)
	{
        $this->businessseller = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEligiblePayPalAccount($val)
	{
        $this->eligiblepaypalaccount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPayPalAccountAcceptsUnconfirmedAddress($val)
	{
        $this->paypalaccountacceptsunconfirmedaddress = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCombinedPaymentsAccepted($val)
	{
        $this->combinedpaymentsaccepted = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFeedbackPublic($val)
	{
        $this->feedbackpublic = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ExpressSellingPreferenceCodeType
{
	const ALL         = 'All';
	const EXPRESSONLY = 'ExpressOnly';
	const OPTOUT      = 'OptOut';
	const CUSTOMCODE  = 'CustomCode';
}

class ExtendedProductFinderIdType
{
	/**
	 * @var int | Numeric identifier for a buy-side product finder. A product finder defines how to
	 *        search for Item Specifics in listings (e.g., how to search against a particular
	 * shoe size).            See the eBay Web Services guide for details about product finders.
	 *            You need to specify a product finder ID when you are searching against a listing's
	 *             Item Specifics (i.e., when you use SearchAttributes). A few categories, such
	 * as US Event Tickets and US eBay Motors, can also return a subset of Item Specifics (e.g.,
	 * the event venue, section, and row for a ticket listing) in the search results. To retrieve
	 * this data, you must specify the product finder ID, and also specify a detail level of ItemReturnAttributes
	 * or ReturnAll. Use GetProductFinder to determine valid product finder IDs.
	 */
	public $productfinderid;
	/**
	 * @var boolean | If true, the product finder can be used as input to GetSearchResults to search for listings
	 * with Item Specifics on the eBay site. If false or not present, the product finder can be
	 * used as input to GetProductSearchResults to search for catalog data (Pre-filled Item Information) that
	 * a seller might want to include in a listing.
	 */
	public $productfinderbuyside;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductFinderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productfinderid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProductFinderBuySide($val)
	{
        $this->productfinderbuyside = (int)$val;
	}
}

class ExternalProductCodeType
{
	const ISBN       = 'ISBN';
	const UPC        = 'UPC';
	const PRODUCTID  = 'ProductID';
	const EAN        = 'EAN';
	const KEYWORDS   = 'Keywords';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * ExternalProductIDType
 * Contains an ISBN value, EAN value, UPC value, ticket keywords, or eBay catalog product ID,
 * plus other meta-data. For event tickets, this type can contain a set of keywords that uniquely
 * identify the product. Only applicable for certain categories that support Pre-filled Item Information.
 * For items listed to eBay.com, either ExternalProductID or Item.ProductListingDetails can
 * be specified in listing use cases (AddItem or GetItemRecommendations), but do not specify
 * both in the same requst. Either ExternalProductID or ProductID can be specified in a GetSearchResults
 * request, but not both. See the Developer's Guide for information on the categories that
 * support usage of this field in listing and searching use cases. Not applicable when revising
 * and relisting items. For Half.com listing use cases, contains an ISBN, UPC, or EAN value
 * plus other meta-data.
 */
class ExternalProductIdType
{
	/**
	 * @var string | Specifies the value for the property.
	 */
	public $value;
	/**
	 * @var boolean | Applicable for listing use cases only (not buy-side searching). Indicates what eBay should
	 * do if more than one product matches the value passed in Value. Only takes effect when more
	 * than one match is found. If true, the response should include an error and all matching
	 * product IDs. If false, the response should include an error but should not return the matching
	 * product IDs. This field is also applicable when listing Half.com items.
	 */
	public $returnsearchresultonduplicates;
	/**
	 * @var ExternalProductCodeType | Returns the notification type. Possible values include: AskSellerQuestion, AuctionCheckoutComplete,
	 * BestOffer, CheckoutBuyerRequestTotal, EndOfAuction, Feedback, FixedPriceEndOfTransaction,
	 * FixedPriceTransaction, ItemNotReceived, MyMessages, OutBid, SecondChanceOffer, UPIBuyerResponseDispute,
	 * UPISellerClosedDispute, UPISellerOpenedDispute, and UPISellerRespondedToDispute.
	 */
	public $type;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Value');
        }
        $this->value = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReturnSearchResultOnDuplicates($val)
	{
        $this->returnsearchresultonduplicates = (int)$val;
	}

	/**
	 * @param ExternalProductCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ExternalTransactionType
 * Container for external transaction information.
 */
class ExternalTransactionType
{
	/**
	 * @var string | Unique payment transaction ID.
	 */
	public $externaltransactionid;
	/**
	 * @var dateTime | Date on which transaction occurs in PayPal.
	 */
	public $externaltransactiontime;
	/**
	 * @var AmountType | 	 */
	public $feeorcreditamount;
	/**
	 * @var AmountType | If positive, the amount the buyer pays the seller through PayPal on the purchase of items.
	 * If negative, the amount refunded the buyer. Default = 0.
	 */
	public $paymentorrefundamount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExternalTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ExternalTransactionID');
        }
        $this->externaltransactionid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setExternalTransactionTime($val)
	{
        $this->externaltransactiontime = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setFeeOrCreditAmount($val)
	{
        $this->feeorcreditamount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setPaymentOrRefundAmount($val)
	{
        $this->paymentorrefundamount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * FeatureDefinitionsType
 * A container node for definitions of the features specified in FeatureID in the GetCategoryFeatures
 * request. If no feature ID was specified, all definitions are returned.
 */
class FeatureDefinitionsType
{
	/**
	 * @var ListingDurationDefinitionsType | Specifies one or more sets of listing durations. Each set gives durations for listing types
	 * a category could allow. If present, the corresponding feature ID was passed in the request
	 * or all features were requested (i.e., no feature IDs were specified). Use the data provided
	 * in SiteDefaults and Category to determine which listing formats support each listing duration
	 * and whether any categories override the standard settings.
	 */
	public $listingdurations;
	/**
	 * @var ShippingTermRequiredDefinitionType | Specifies the default site setting for whether sellers are required to specify a shipping
	 * service and its associated cost when listing items. True means the shipping terms are required unless
	 * a specific category overrides this setting.
	 */
	public $shippingtermsrequired;
	/**
	 * @var BestOfferEnabledDefinitionType | Specifies the default site setting for whether categories allow best offers. True means
	 * best offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $bestofferenabled;
	/**
	 * @var DutchBINEnabledDefinitionType | Specifies the default site setting for whether categories allow DutchBIN. True means best
	 * offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $dutchbinenabled;
	/**
	 * @var UserConsentRequiredDefinitionType | Specifies the default site setting for whether a bidder must consent to the bid by confirming
	 * that he or she read and agrees to the terms in eBay's privacy policy.
	 */
	public $userconsentrequired;
	/**
	 * @var HomePageFeaturedEnabledDefinitionType | Indicates whether or not it is possible to enhance a listing by putting it into a rotation
	 * for display on a special area of the eBay home page. Support for this feature varies by
	 * site. Item or feedback restrictions may apply.
	 */
	public $homepagefeaturedenabled;
	/**
	 * @var ProPackEnabledDefinitionType | Specifies the default site setting for whether categories allow the ProPack feature (a
	 * feature pack). True means ProPack is allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $propackenabled;
	/**
	 * @var BasicUpgradePackEnabledDefinitionType | Specifies the default site setting for whether categories allow the BasicUpgradePack feature
	 * (a feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Australia site (site ID 15, abbreviation AU) only. Effective beginning February
	 * 22, 2006.
	 */
	public $basicupgradepackenabled;
	/**
	 * @var ValuePackEnabledDefinitionType | Specifies the default site setting for whether categories allow the ValuePack feature (a
	 * feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Effective beginning February 22, 2006.
	 */
	public $valuepackenabled;
	/**
	 * @var ProPackPlusEnabledDefinitionType | Specifies the default site setting for whether categories allow the ProPackPlus feature
	 * (a feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Effective beginning February 22, 2006.
	 */
	public $propackplusenabled;
	/**
	 * @var AdFormatEnabledDefinitionType | Specifies the default site setting for whether categories allow the Ad Format feature.
	 * True means the feature is allowed site-wide, unless a specific category overrides the setting.
	 */
	public $adformatenabled;
	/**
	 * @var DigitalDeliveryEnabledDefinitionType | eBay enables you to list and sell digital files (such as Adobe PDF files) or information
	 * that buyers can access online or have delivered electronically. This flag specifies whether
	 * most categories on the site allow digitally delivered items (i.e., the default setting
	 * for the site's categories).<br><br> If true, digitally delivered items are allowed site-wide,
	 * but specific categories can override the setting if they don't support it.<br> If false,
	 * digitally delivered items are not normally allowed for the site, but some categories may
	 * override the setting.<br><br> If a category supports digital listings, it means that you
	 * have the option to list digital items in that category (i.e., Item.DigitalDeliveryDetails
	 * can be specified in your listing request). It does not mean the category requires you to
	 * list items digitally. If you list in two categories, an item can only specify this option
	 * if both categories support digital listings. Digital listings are not eligible for eBay
	 * Express.
	 */
	public $digitaldeliveryenabled;
	/**
	 * @var BestOfferCounterEnabledDefinitionType | Specifies the default site setting for whether categories allow counter offers for best
	 * offers. True means counter offers are allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $bestoffercounterenabled;
	/**
	 * @var BestOfferAutoDeclineEnabledDefinitionType | Specifies the default site setting for whether categories allow auto decline for best offers.
	 * True means auto decline is allowed site-wide, unless a specific category overrides the
	 * setting.
	 */
	public $bestofferautodeclineenabled;
	/**
	 * @var LocalMarketSpecialitySubscriptionDefinitionType | Specifies the default site setting for  whether LocalMarketSpecialitySubscription feature
	 * is supported for this category.
	 */
	public $localmarketspecialitysubscription;
	/**
	 * @var LocalMarketRegularSubscriptionDefinitionType | Specifies the default site setting for whether LocalMarketRegularSubscription feature is
	 * supported for this category.
	 */
	public $localmarketregularsubscription;
	/**
	 * @var LocalMarketPremiumSubscriptionDefinitionType | Specifies the default site setting for whether LocalMarketPremiumSubscription feature is
	 * supported for this category.
	 */
	public $localmarketpremiumsubscription;
	/**
	 * @var LocalMarketNonSubscriptionDefinitionType | Specifies the default site setting for whether LocalMarketNonSubscription feature is supported
	 * for this category.
	 */
	public $localmarketnonsubscription;
	/**
	 * @var ExpressEnabledDefinitionType | Specifies whether most categories on the site are eligible for eBay Express. eBay Express
	 * is a specialty site where customers can buy new, fixed-price goods in a more conventional
	 * e-commerce experience.<br><br> If true, items on the site are eligible for Express, but
	 * specific categories can override the setting if they don't support Express. For example,
	 * categories that are not covered by PayPal Buyer Protection (e.g., Live Auctions and Motors
	 * vehicles) are excluded from Express.<br> If false, items on the site are not eligible for
	 * Express, but some categories may override the setting.<br><br> If you list in an Express-enabled
	 * category, it does not necessarily mean that the item will appear in that category when
	 * buyers browse and search Express. It only means that the item can also be included on Express, assuming
	 * all other Express eligibility requirements are met. See "eBay Express" in the eBay Web
	 * Services guide for information about other eligibility requirements.
	 */
	public $expressenabled;
	/**
	 * @var ExpressPicturesRequiredDefinitionType | Specifies whether most categories on the site require a listing to include a picture in
	 * order to qualify for eBay Express.<br><br> If true, items on the site require a picture
	 * in order to qualify for Express, but specific categories can override this requirement.
	 * For example, on the US site, pictures are normally required for Express listings. However,
	 * the Event Tickets category could override this requirement if pictures are not commonly expected
	 * for tickets.<br> If false, items on the site do not require a picture, but some categories
	 * may override the setting.<br><br> Only meaningful if ExpressEnabled is true for the category.
	 */
	public $expresspicturesrequired;
	/**
	 * @var ExpressConditionRequiredDefinitionType | Specifies whether most categories on the site require a listing to include the Item Condition
	 * attribute in order to qualify for eBay Express. <br><br> If true, items on the site require
	 * the Item Condition in order to qualify for Express, but specific categories can override
	 * this requirement. For example, on the US site, the Item Condition is normally required
	 * for Express listings. However, the Event Tickets category could override this requirement
	 * because there is little need to distinguish between new and used tickets. (People rarely
	 * sell used tickets after an event unless the ticket is also a collectible item.)<br> If
	 * false, items on the site do not require the Item Condition, but some categories may override
	 * the setting.<br><br> Only meaningful if ExpressEnabled is true for the category.
	 */
	public $expressconditionrequired;
	/**
	 * @var MinimumReservePriceDefinitionType | Specifies the default site setting for whether the Minimum Reserve Price feature is supported
	 * for this category.
	 */
	public $minimumreserveprice;
	/**
	 * @var TCREnabledDefinitionType | Specifies the default site setting for whether the Transaction Confirmation Request feature
	 * is supported for this category.
	 */
	public $transactionconfirmationrequestenabled;
	/**
	 * @var SellerContactDetailsEnabledDefinitionType | Specifies the default site setting for whether categories allow seller-level contact information
	 * for Classified Ad format listings. A value of true means seller-level contact information
	 * is available for Classified Ad format listings site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $sellercontactdetailsenabled;
	/**
	 * @var StoreInventoryEnabledDefinitionType | Specifies the default site setting for whether categories allow the Store Inventory Format
	 * feature. True means the feature is allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $storeinventoryenabled;
	/**
	 * @var SkypeMeTransactionalEnabledDefinitionType | Specifies the default site setting for whether categories allow the addition of Skype buttons
	 * to listings for transactional formats (e.g., the Chinese auction format).
	 */
	public $skypemetransactionalenabled;
	/**
	 * @var SkypeMeNonTransactionalEnabledDefinitionType | Specifies the default site setting for whether categories allow the addition of Skype buttons
	 * to listings for nontransactional formats (e.g., the advertisement format).
	 */
	public $skypemenontransactionalenabled;
	/**
	 * @var LocalListingDistancesRegularDefinitionType | Specifies the supported local listing distances of regular vehicles.
	 */
	public $locallistingdistancesregular;
	/**
	 * @var LocalListingDistancesSpecialtyDefinitionType | Specifies the supported local listing distances of specialty vehicles.
	 */
	public $locallistingdistancesspecialty;
	/**
	 * @var LocalListingDistancesNonSubscriptionDefinitionType | Specifies the supported local listing distances for users who have not subscribed to either
	 * Regular or Specialty vehicles.
	 */
	public $locallistingdistancesnonsubscription;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ListingDurationDefinitionsType $val
	 * @throws Exception
	 */
	public function setListingDurations($val)
	{
        $this->listingdurations = (int)$val;
	}

	/**
	 * @param ShippingTermRequiredDefinitionType $val
	 * @throws Exception
	 */
	public function setShippingTermsRequired($val)
	{
        $this->shippingtermsrequired = (int)$val;
	}

	/**
	 * @param BestOfferEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setBestOfferEnabled($val)
	{
        $this->bestofferenabled = (int)$val;
	}

	/**
	 * @param DutchBINEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setDutchBINEnabled($val)
	{
        $this->dutchbinenabled = (int)$val;
	}

	/**
	 * @param UserConsentRequiredDefinitionType $val
	 * @throws Exception
	 */
	public function setUserConsentRequired($val)
	{
        $this->userconsentrequired = (int)$val;
	}

	/**
	 * @param HomePageFeaturedEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setHomePageFeaturedEnabled($val)
	{
        $this->homepagefeaturedenabled = (int)$val;
	}

	/**
	 * @param ProPackEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setProPackEnabled($val)
	{
        $this->propackenabled = (int)$val;
	}

	/**
	 * @param BasicUpgradePackEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setBasicUpgradePackEnabled($val)
	{
        $this->basicupgradepackenabled = (int)$val;
	}

	/**
	 * @param ValuePackEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setValuePackEnabled($val)
	{
        $this->valuepackenabled = (int)$val;
	}

	/**
	 * @param ProPackPlusEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setProPackPlusEnabled($val)
	{
        $this->propackplusenabled = (int)$val;
	}

	/**
	 * @param AdFormatEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setAdFormatEnabled($val)
	{
        $this->adformatenabled = (int)$val;
	}

	/**
	 * @param DigitalDeliveryEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setDigitalDeliveryEnabled($val)
	{
        $this->digitaldeliveryenabled = (int)$val;
	}

	/**
	 * @param BestOfferCounterEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setBestOfferCounterEnabled($val)
	{
        $this->bestoffercounterenabled = (int)$val;
	}

	/**
	 * @param BestOfferAutoDeclineEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setBestOfferAutoDeclineEnabled($val)
	{
        $this->bestofferautodeclineenabled = (int)$val;
	}

	/**
	 * @param LocalMarketSpecialitySubscriptionDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalMarketSpecialitySubscription($val)
	{
        $this->localmarketspecialitysubscription = (int)$val;
	}

	/**
	 * @param LocalMarketRegularSubscriptionDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalMarketRegularSubscription($val)
	{
        $this->localmarketregularsubscription = (int)$val;
	}

	/**
	 * @param LocalMarketPremiumSubscriptionDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalMarketPremiumSubscription($val)
	{
        $this->localmarketpremiumsubscription = (int)$val;
	}

	/**
	 * @param LocalMarketNonSubscriptionDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalMarketNonSubscription($val)
	{
        $this->localmarketnonsubscription = (int)$val;
	}

	/**
	 * @param ExpressEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setExpressEnabled($val)
	{
        $this->expressenabled = (int)$val;
	}

	/**
	 * @param ExpressPicturesRequiredDefinitionType $val
	 * @throws Exception
	 */
	public function setExpressPicturesRequired($val)
	{
        $this->expresspicturesrequired = (int)$val;
	}

	/**
	 * @param ExpressConditionRequiredDefinitionType $val
	 * @throws Exception
	 */
	public function setExpressConditionRequired($val)
	{
        $this->expressconditionrequired = (int)$val;
	}

	/**
	 * @param MinimumReservePriceDefinitionType $val
	 * @throws Exception
	 */
	public function setMinimumReservePrice($val)
	{
        $this->minimumreserveprice = (int)$val;
	}

	/**
	 * @param TCREnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setTransactionConfirmationRequestEnabled($val)
	{
        $this->transactionconfirmationrequestenabled = (int)$val;
	}

	/**
	 * @param SellerContactDetailsEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setSellerContactDetailsEnabled($val)
	{
        $this->sellercontactdetailsenabled = (int)$val;
	}

	/**
	 * @param StoreInventoryEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setStoreInventoryEnabled($val)
	{
        $this->storeinventoryenabled = (int)$val;
	}

	/**
	 * @param SkypeMeTransactionalEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setSkypeMeTransactionalEnabled($val)
	{
        $this->skypemetransactionalenabled = (int)$val;
	}

	/**
	 * @param SkypeMeNonTransactionalEnabledDefinitionType $val
	 * @throws Exception
	 */
	public function setSkypeMeNonTransactionalEnabled($val)
	{
        $this->skypemenontransactionalenabled = (int)$val;
	}

	/**
	 * @param LocalListingDistancesRegularDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalListingDistancesRegular($val)
	{
        $this->locallistingdistancesregular = (int)$val;
	}

	/**
	 * @param LocalListingDistancesSpecialtyDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalListingDistancesSpecialty($val)
	{
        $this->locallistingdistancesspecialty = (int)$val;
	}

	/**
	 * @param LocalListingDistancesNonSubscriptionDefinitionType $val
	 * @throws Exception
	 */
	public function setLocalListingDistancesNonSubscription($val)
	{
        $this->locallistingdistancesnonsubscription = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class FeatureIdCodeType
{
	const LISTINGDURATIONS                      = 'ListingDurations';
	const BESTOFFERENABLED                      = 'BestOfferEnabled';
	const DUTCHBINENABLED                       = 'DutchBINEnabled';
	const SHIPPINGTERMSREQUIRED                 = 'ShippingTermsRequired';
	const USERCONSENTREQUIRED                   = 'UserConsentRequired';
	const HOMEPAGEFEATUREDENABLED               = 'HomePageFeaturedEnabled';
	const ADFORMATENABLED                       = 'AdFormatEnabled';
	const DIGITALDELIVERYENABLED                = 'DigitalDeliveryEnabled';
	const BESTOFFERCOUNTERENABLED               = 'BestOfferCounterEnabled';
	const BESTOFFERAUTODECLINEENABLED           = 'BestOfferAutoDeclineEnabled';
	const PROPACK                               = 'ProPack';
	const BASICUPGRADEPACK                      = 'BasicUpgradePack';
	const VALUEPACK                             = 'ValuePack';
	const PROPACKPLUS                           = 'ProPackPlus';
	const LOCALMARKETSPECIALITYSUBSCRIPTION     = 'LocalMarketSpecialitySubscription';
	const LOCALMARKETREGULARSUBSCRIPTION        = 'LocalMarketRegularSubscription';
	const LOCALMARKETPREMIUMSUBSCRIPTION        = 'LocalMarketPremiumSubscription';
	const LOCALMARKETNONSUBSCRIPTION            = 'LocalMarketNonSubscription';
	const EXPRESSENABLED                        = 'ExpressEnabled';
	const EXPRESSPICTURESREQUIRED               = 'ExpressPicturesRequired';
	const EXPRESSCONDITIONREQUIRED              = 'ExpressConditionRequired';
	const SELLERCONTACTDETAILSENABLED           = 'SellerContactDetailsEnabled';
	const CUSTOMCODE                            = 'CustomCode';
	const MINIMUMRESERVEPRICE                   = 'MinimumReservePrice';
	const TRANSACTIONCONFIRMATIONREQUESTENABLED = 'TransactionConfirmationRequestEnabled';
	const STOREINVENTORYENABLED                 = 'StoreInventoryEnabled';
	const LOCALLISTINGDISTANCES                 = 'LocalListingDistances';
	const SKYPEMETRANSACTIONALENABLED           = 'SkypeMeTransactionalEnabled';
	const SKYPEMENONTRANSACTIONALENABLED        = 'SkypeMeNonTransactionalEnabled';
}

/**
 * FeeType
 * Identifies the name and monetary amount of a fee that a member pays to eBay (or an eBay
 * company). These fee names and values are intended only as an aid to help estimate the fees
 * for a listing. Use GetAccount for an accurate final fee breakdown. Returned in AddItemResponseType
 * and related response types.
 */
class FeeType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var AmountType | Monthly fee for the Store subscription level.
	 */
	public $fee;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setFee($val)
	{
        $this->fee = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * FeedbackDetailArrayType
 * Contains multiple individual feedback detail entries.
 */
class FeedbackDetailArrayType
{
	/**
	 * @var FeedbackDetailType | Contains a single feedback detail entry. Output only.
	 */
	public $feedbackdetail;
	/**
	 * @param FeedbackDetailType $val
	 * @throws Exception
	 */
	public function setFeedbackDetail($val)
	{
        $this->feedbackdetail = (int)$val;
	}
}

/**
 * FeedbackDetailType
 * Detailed feedback information for a user. Conveys the score for the feedback, textual comment
 * from the leaving user, and other information.
 */
class FeedbackDetailType
{
	/**
	 * @var UserIDType | eBay user ID for the user who left the feedback. Returned for a detail level of ReturnAll
	 * (if the parent is returned).
	 */
	public $commentinguser;
	/**
	 * @var int | Feedback score of the user indicated in CommentingUser. Returned for a detail level of
	 * ReturnAll (if the parent is returned).
	 */
	public $commentinguserscore;
	/**
	 * @var string | Textual comment that explains, clarifies, or justifies the feedback rating specified in
	 * CommentType. Still displayed if feedback is withdrawn.
	 */
	public $commenttext;
	/**
	 * @var dateTime | Date and time (in GMT) that the feedback was submitted to eBay. Returned for a detail level
	 * of ReturnAll (if the parent is returned).
	 */
	public $commenttime;
	/**
	 * @var CommentTypeCodeType | Rating of the feedback being left (e.g., Positive).
	 */
	public $commenttype;
	/**
	 * @var string | Textual comment that the user targeted by feedback may leave in response or rebuttal to
	 * the feedback. (Cannot be submitted or edited via the API.)
	 */
	public $feedbackresponse;
	/**
	 * @var string | Explanation a user can give to a response. (Cannot be submitted or edited via the API.) Returned
	 * for a detail level of ReturnAll (if the parent is returned).
	 */
	public $followup;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var TradingRoleCodeType | Indicates whether the user who was the feedback recipient was a Buyer or the Seller for
	 * that transaction. Returned for a detail level of ReturnAll (if the parent is returned).
	 */
	public $role;
	/**
	 * @var string | Name of the listing for which feedback was provided. Returned as CDATA. This value is returned
	 * only if the site is China (site ID 223).
	 */
	public $itemtitle;
	/**
	 * @var AmountType | The final price for the item, associated with the currency identified by the currencyId
	 * attribute of the AmountType. This value is returned only if the site is China (site ID
	 * 223).
	 */
	public $itemprice;
	/**
	 * @var string | Unique identifier for the feedback entry. Returned for a detail level of ReturnAll (if
	 * the parent is returned).
	 */
	public $feedbackid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var boolean | Indicates whether eBay replaced the comment with a message that the comment was removed.
	 */
	public $commentreplaced;
	/**
	 * @var boolean | Indicates whether eBay replaced the response with a message that the response was removed.
	 */
	public $responsereplaced;
	/**
	 * @var boolean | Indicates whether eBay replaced the follow-up with a message that the follow-up was removed.
	 */
	public $followupreplaced;
	/**
	 * @var boolean | Specifies if a user's feedback score is or is not countable. This field is returned only
	 * when a user's feedback score is not countable (value is false). <br><br> Only feedback
	 * left by verified users can count toward the aggregate score of another user. China users
	 * must go through a verification process before the feedback they leave can be counted in
	 * the score. Whether or not a feedback is countable is determined by the verification status
	 * of the person leaving the feedback at the time the feedback is left. <br><br> If a user
	 * is not verified and leaves a feedback, then later becomes verified, that feedback will
	 * still not be counted. Or, if a user is verified and at some later date changes to unverified
	 * status, the feedback left while the user was verified remains countable. So you cannot
	 * determine a user's current verification status from whether or not feedback they've left
	 * is or was countable. Whether or not feedback is countable has nothing to do with the verification
	 * status of the one receiving the comment, only the one leaving the feedback.
	 */
	public $countable;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setCommentingUser($val)
	{
        $this->commentinguser = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCommentingUserScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->commentinguserscore = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCommentText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CommentText');
        }
        $this->commenttext = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCommentTime($val)
	{
        $this->commenttime = (int)$val;
	}

	/**
	 * @param CommentTypeCodeType $val
	 * @throws Exception
	 */
	public function setCommentType($val)
	{
        $this->commenttype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFeedbackResponse($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FeedbackResponse');
        }
        $this->feedbackresponse = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFollowup($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Followup');
        }
        $this->followup = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param TradingRoleCodeType $val
	 * @throws Exception
	 */
	public function setRole($val)
	{
        $this->role = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setItemTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ItemTitle');
        }
        $this->itemtitle = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setItemPrice($val)
	{
        $this->itemprice = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFeedbackID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FeedbackID');
        }
        $this->feedbackid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCommentReplaced($val)
	{
        $this->commentreplaced = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setResponseReplaced($val)
	{
        $this->responsereplaced = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFollowUpReplaced($val)
	{
        $this->followupreplaced = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCountable($val)
	{
        $this->countable = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * FeedbackInfoType
 * Information used to add a feedback note for a user.
 */
class FeedbackInfoType
{
	/**
	 * @var string | Textual comment that explains, clarifies, or justifies the feedback rating specified in
	 * CommentType. Still displayed if feedback is withdrawn.
	 */
	public $commenttext;
	/**
	 * @var CommentTypeCodeType | Rating of the feedback being left (e.g., Positive).
	 */
	public $commenttype;
	/**
	 * @var UserIDType | Recipient user for whom the feedback is being left.
	 */
	public $targetuser;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCommentText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CommentText');
        }
        $this->commenttext = (int)$val;
	}

	/**
	 * @param CommentTypeCodeType $val
	 * @throws Exception
	 */
	public function setCommentType($val)
	{
        $this->commenttype = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setTargetUser($val)
	{
        $this->targetuser = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * FeedbackPeriodArrayType
 * Container for a set of feedback statistics. Contains zero one or multiple FeedbackPeriod
 * objects. Output only, for the summary feedback data returned by GetFeedback.
 */
class FeedbackPeriodArrayType
{
	/**
	 * @var FeedbackPeriodType | Contains one feedback statistic giving length of the period being reported (e.g. last 7
	 * days prior to the call), and total number of feedback entries (of the type given by the
	 * container, e.g. positive feedback) submitted during the indicated period. Returned if no
	 * detail level is specified.
	 */
	public $feedbackperiod;
	/**
	 * @param FeedbackPeriodType $val
	 * @throws Exception
	 */
	public function setFeedbackPeriod($val)
	{
        $this->feedbackperiod = (int)$val;
	}
}

/**
 * FeedbackPeriodType
 * Contains the data for one type of feedback for one predefined time period. Parent FeedbackPeriodArrayType
 * object indicates the type of feedback counted: positive, neutral, negative, or total. Output
 * only, in the summary feedback data returned by GetFeedback.
 */
class FeedbackPeriodType
{
	/**
	 * @var int | Indicates the time period for the feedback count. Returns a value indicating the number
	 * of days prior to the call for which feedbacks of the particular type are counted. Returned
	 * if no detail level is specified.
	 */
	public $periodindays;
	/**
	 * @var int | Count of the feedbacks received by the user for the time period prior to the call indicated
	 * in PeriodInDays. Returned if no detail level is specified.
	 */
	public $count;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPeriodInDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->periodindays = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->count = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class FeedbackRatingStarCodeType
{
	const NONE              = 'None';
	const YELLOW            = 'Yellow';
	const BLUE              = 'Blue';
	const TURQUOISE         = 'Turquoise';
	const PURPLE            = 'Purple';
	const RED               = 'Red';
	const GREEN             = 'Green';
	const YELLOWSHOOTING    = 'YellowShooting';
	const TURQUOISESHOOTING = 'TurquoiseShooting';
	const PURPLESHOOTING    = 'PurpleShooting';
	const REDSHOOTING       = 'RedShooting';
	const CUSTOMCODE        = 'CustomCode';
}

class FeedbackRequirementsType
{
	/**
	 * @var boolean
	 */
	public $_;
	/**
	 * @var string
	 */
	public $minimum;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function set($val)
	{
        $this->_ = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMinimum($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for minimum');
        }
        $this->minimum = (int)$val;
	}
}

class FeedbackResponseCodeType
{
	const REPLY    = 'Reply';
	const FOLLOWUP = 'FollowUp';
}

/**
 * FeedbackSummaryType
 * Specifies all feedback summary information (except Score). Contains FeedbackPeriodArrayType
 * objects that each convey feedback counts for positive, negative, neutral, and total feedback
 * counts - for various time periods each. Also conveys counts of bid retractions for the predefined
 * time periods.
 */
class FeedbackSummaryType
{
	/**
	 * @var FeedbackPeriodArrayType | Bid retractions count, for multiple predefined time periods preceding the call. Returned
	 * if no detail level is specified.
	 */
	public $bidretractionfeedbackperiodarray;
	/**
	 * @var FeedbackPeriodArrayType | Negative feedback entries count, for multiple predefined time periods preceding the call.
	 * Returned if no detail level is specified.
	 */
	public $negativefeedbackperiodarray;
	/**
	 * @var FeedbackPeriodArrayType | Neutral feedback entries count, for multiple predefined time periods preceding the call.
	 * Returned if no detail level is specified.
	 */
	public $neutralfeedbackperiodarray;
	/**
	 * @var FeedbackPeriodArrayType | Positive feedback entries count, for multiple predefined time periods preceding the call.
	 * Returned if no detail level is specified.
	 */
	public $positivefeedbackperiodarray;
	/**
	 * @var FeedbackPeriodArrayType | Total feedback score, for multiple predefined time periods preceding the call. Returned
	 * if no detail level is specified.
	 */
	public $totalfeedbackperiodarray;
	/**
	 * @var int | Number of neutral comments received from suspended users. Returned if no detail level is
	 * specified.
	 */
	public $neutralcommentcountfromsuspendedusers;
	/**
	 * @var int | Total count of negative feedback entries from unique (distinct) users.
	 */
	public $uniquenegativefeedbackcount;
	/**
	 * @var int | Total count of positive feedback entries from unique (distinct) users. Contains the aggregate
	 * feedback score for a user. A member's feedback score is the net positive feedback minus
	 * the net negative feedback left for the member. Feedback scores are a quantitative expression
	 * of the desirability of dealing with that person as a Buyer or a Seller in auction transactions.
	 * Each auction transaction can result in one feedback entry for a given user (the buyer can leave
	 * feedback for the seller, and the seller can leave feedback for the buyer.). That one feedback
	 * can be positive, negative, or neutral. The aggregated feedback counts for a particular
	 * user represent that user's overall feedback score (referred to as a "feedback rating" on
	 * the eBay site). This rating is commonly expressed as the eBay Feedback score for the user.
	 */
	public $uniquepositivefeedbackcount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param FeedbackPeriodArrayType $val
	 * @throws Exception
	 */
	public function setBidRetractionFeedbackPeriodArray($val)
	{
        $this->bidretractionfeedbackperiodarray = (int)$val;
	}

	/**
	 * @param FeedbackPeriodArrayType $val
	 * @throws Exception
	 */
	public function setNegativeFeedbackPeriodArray($val)
	{
        $this->negativefeedbackperiodarray = (int)$val;
	}

	/**
	 * @param FeedbackPeriodArrayType $val
	 * @throws Exception
	 */
	public function setNeutralFeedbackPeriodArray($val)
	{
        $this->neutralfeedbackperiodarray = (int)$val;
	}

	/**
	 * @param FeedbackPeriodArrayType $val
	 * @throws Exception
	 */
	public function setPositiveFeedbackPeriodArray($val)
	{
        $this->positivefeedbackperiodarray = (int)$val;
	}

	/**
	 * @param FeedbackPeriodArrayType $val
	 * @throws Exception
	 */
	public function setTotalFeedbackPeriodArray($val)
	{
        $this->totalfeedbackperiodarray = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNeutralCommentCountFromSuspendedUsers($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->neutralcommentcountfromsuspendedusers = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUniqueNegativeFeedbackCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->uniquenegativefeedbackcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUniquePositiveFeedbackCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->uniquepositivefeedbackcount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * FeesType
 * Identifies a set of one or more fees that a member pays to eBay (or          an eBay company).
 * Instances of this type can hold one or more fees.
 */
class FeesType
{
	/**
	 * @var FeeType | Monthly fee for the Store subscription level.
	 */
	public $fee;
	/**
	 * @param FeeType $val
	 * @throws Exception
	 */
	public function setFee($val)
	{
        $this->fee = (int)$val;
	}
}

/**
 * FinanceOfferArrayType
 * A set of financing offers: promotional offers that allow a buyer to purchase items on credit.
 */
class FinanceOfferArrayType
{
	/**
	 * @var FinanceOfferType | A financing offer.
	 */
	public $financeoffer;
	/**
	 * @param FinanceOfferType $val
	 * @throws Exception
	 */
	public function setFinanceOffer($val)
	{
        $this->financeoffer = (int)$val;
	}
}

/**
 * FinanceOfferType
 * A promotional offer that allow the buyer to purchase items on credit.
 */
class FinanceOfferType
{
	/**
	 * @var string | Specifies a promotional offer that allow the buyer to purchase items on credit.
	 */
	public $financeofferid;
	/**
	 * @var string | Text that the buyer sees describing the details of the financing offer.
	 */
	public $buyerterms;
	/**
	 * @var string | Text that the seller sees describing the details of the financing offer.
	 */
	public $sellerterms;
	/**
	 * @var dateTime | Date on which the offer first becomes active.
	 */
	public $startdate;
	/**
	 * @var dateTime | Date the message was last modified. Returned if the parent container is returned.
	 */
	public $lastmodifieddate;
	/**
	 * @var AmountType | The minimum amount for an item to which the offer applies.
	 */
	public $minimumamount;
	/**
	 * @var double | Interest charges associated with the finance offer.
	 */
	public $ratefactor;
	/**
	 * @var int | A number ranging from 0 to 10000 (inclusive), with 10000 having the highest priority.
	 */
	public $priority;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFinanceOfferID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FinanceOfferID');
        }
        $this->financeofferid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBuyerTerms($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BuyerTerms');
        }
        $this->buyerterms = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerTerms($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerTerms');
        }
        $this->sellerterms = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartDate($val)
	{
        $this->startdate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastModifiedDate($val)
	{
        $this->lastmodifieddate = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinimumAmount($val)
	{
        $this->minimumamount = (int)$val;
	}

	/**
	 * @param double $val
	 * @throws Exception
	 */
	public function setRateFactor($val)
	{
        $this->ratefactor = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPriority($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->priority = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class FlatRateInsuranceRangeCodeType
{
	const FLATRATEINSURANCERANGE1 = 'FlatRateInsuranceRange1';
	const FLATRATEINSURANCERANGE2 = 'FlatRateInsuranceRange2';
	const FLATRATEINSURANCERANGE3 = 'FlatRateInsuranceRange3';
	const FLATRATEINSURANCERANGE4 = 'FlatRateInsuranceRange4';
	const FLATRATEINSURANCERANGE5 = 'FlatRateInsuranceRange5';
	const FLATRATEINSURANCERANGE6 = 'FlatRateInsuranceRange6';
	const CUSTOMCODE              = 'CustomCode';
}

/**
 * FlatRateInsuranceRangeCostType
 * Insurance Cost for Item Price Range
 */
class FlatRateInsuranceRangeCostType
{
	/**
	 * @var FlatRateInsuranceRangeCodeType | The price range for the shipment for which the insurance cost is being specified.
	 */
	public $flatrateinsurancerange;
	/**
	 * @var AmountType | The cost of insurance for the specified price range.
	 */
	public $insurancecost;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param FlatRateInsuranceRangeCodeType $val
	 * @throws Exception
	 */
	public function setFlatRateInsuranceRange($val)
	{
        $this->flatrateinsurancerange = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInsuranceCost($val)
	{
        $this->insurancecost = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * FlatShippingPreferencesType
 *
 */
class FlatShippingPreferencesType
{
	/**
	 * @var AmountType | If the user specifies ChargeAmountForEachAdditionalItem for FlatShippingRateOption, then
	 * this value is used to specify how much to charge for each additional item.
	 */
	public $amountperadditionalitem;
	/**
	 * @var AmountType | If the user specifies DeductAmountFromEachAdditionalItem for FlatShippingRateOption, then
	 * this value is used to specify how much to deduct for each additional item shipped.
	 */
	public $deductionamountperadditionalitem;
	/**
	 * @var FlatRateInsuranceRangeCostType | For the given range, specifies the cost of insurance. If the InsuranceOption is either
	 * Optional or Required, then 6 instances of this field must be specifies, one for each cost
	 * range.
	 */
	public $flatrateinsurancerangecost;
	/**
	 * @var FlatShippingRateOptionCodeType | Specifies how the user wants flat-rate shipping to be calculated.
	 */
	public $flatshippingrateoption;
	/**
	 * @var InsuranceOptionCodeType | Whether the seller offers shipping insurance and, if so, whether the insurance is optional
	 * or required. Flat and calculated shipping. Optional as input and only allowed if ChangePaymentInstructions
	 * is true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express.
	 */
	public $insuranceoption;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountPerAdditionalItem($val)
	{
        $this->amountperadditionalitem = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setDeductionAmountPerAdditionalItem($val)
	{
        $this->deductionamountperadditionalitem = (int)$val;
	}

	/**
	 * @param FlatRateInsuranceRangeCostType $val
	 * @throws Exception
	 */
	public function setFlatRateInsuranceRangeCost($val)
	{
        $this->flatrateinsurancerangecost = (int)$val;
	}

	/**
	 * @param FlatShippingRateOptionCodeType $val
	 * @throws Exception
	 */
	public function setFlatShippingRateOption($val)
	{
        $this->flatshippingrateoption = (int)$val;
	}

	/**
	 * @param InsuranceOptionCodeType $val
	 * @throws Exception
	 */
	public function setInsuranceOption($val)
	{
        $this->insuranceoption = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class FlatShippingRateOptionCodeType
{
	const CHARGEAMOUNTFOREACHADDITIONALITEM  = 'ChargeAmountForEachAdditionalItem';
	const DEDUCTAMOUNTFROMEACHADDITIONALITEM = 'DeductAmountFromEachAdditionalItem';
	const SHIPADDITIONALITEMSFREE            = 'ShipAdditionalItemsFree';
	const CUSTOMCODE                         = 'CustomCode';
}

class GallerySortFilterCodeType
{
	const SHOWANYITEMS                    = 'ShowAnyItems';
	const SHOWITEMSWITHGALLERYIMAGESFIRST = 'ShowItemsWithGalleryImagesFirst';
	const SHOWONLYITEMSWITHGALLERYIMAGES  = 'ShowOnlyItemsWithGalleryImages';
	const CUSTOMCODE                      = 'CustomCode';
}

class GalleryTypeCodeType
{
	const NONE       = 'None';
	const FEATURED   = 'Featured';
	const GALLERY    = 'Gallery';
	const PLUS       = 'Plus';
	const CUSTOMCODE = 'CustomCode';
}

class GetAllBiddersModeCodeType
{
	const VIEWALL                          = 'ViewAll';
	const ENDEDLISTING                     = 'EndedListing';
	const SECONDCHANCEELIGIBLEENDEDLISTING = 'SecondChanceEligibleEndedListing';
	const CUSTOMCODE                       = 'CustomCode';
}

/**
 * GetRecommendationsRequestContainerType
 * Specifies the data for a single item and configures the recommendation engines to use when
 * processing the item with GetItemRecommendations.
 */
class GetRecommendationsRequestContainerType
{
	/**
	 * @var ListingFlowCodeType | The listing flow for which the seller is seeking Listing Analyzer recommendations. Not
	 * applicable to results from other recommendation engines (i.e., the Suggested Attributes
	 * engine or the Product Pricing engine). The default flow is AddItem.
	 */
	public $listingflow;
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @var ModifiedFieldType | Applicable when the ListingFlow is ReviseItem or RelistItem. Array of item properties that
	 * are being changed. In release 439 and later, ModifiedFields is no longer required to revise field
	 * values, but it is still supported for backward compatibility. See the Developer's Guide
	 * for rules on adding, modifying, and removing values when revising or relisting items.
	 */
	public $modifiedfields;
	/**
	 * @var RecommendationEngineCodeType | A recommendation engine to run. If no engines are specified, all available recommendation
	 * engines will run. Some engines require additional fields, such as Item.PrimaryCategory.CategoryID,
	 * to be specified. If the ProductPricing engine is specified but Item.ProductListingDetails
	 * is not specified, no Product Pricing engine results are returned.
	 */
	public $recommendationengine;
	/**
	 * @var string | One or more keywords to search for when using the Suggested Attributes engine. Required
	 * when SuggestedAttributes is specified as the recommendation engine (including when no recommendation
	 * engines are specified). Only the listing title is searched. The words "and" and "or" are
	 * treated like any other word. Blank searches are not allowed (and result in a warning).
	 */
	public $query;
	/**
	 * @var string | Unique key to distinguish between recommendations for each item.              Matches a
	 * correlation ID you defined in the request, if any.
	 */
	public $correlationid;
	/**
	 * @var string | Specifies the name of the field to remove from a listing. Applicable when the ListingFlow
	 * is ReviseItem or RelistItem. See the Developer's Guide for rules on removing values when
	 * revising or relisting items. DeletedField accepts the following values for removing fields:
	 * item.pictureDetails.pictureURL, item.pictureDetails.galleryURL, item.listingDesigner.themeID,
	 * item.listingDesigner.layoutID, item.payPalEmailAddress, item.proximitySearchDetails.postalCode, item.shippingDetails.paymentInstructions,
	 * and item.SKU. When the ListingFlow is RelistItem, the following values for DeletedField
	 * are also allowed: item.charity, item.secondaryCategory, and item.subTitle. DeletedField
	 * is case sensitive. The request can contain zero, one, or many instances of DeletedField.
	 */
	public $deletedfield;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ListingFlowCodeType $val
	 * @throws Exception
	 */
	public function setListingFlow($val)
	{
        $this->listingflow = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}

	/**
	 * @param ModifiedFieldType $val
	 * @throws Exception
	 */
	public function setModifiedFields($val)
	{
        $this->modifiedfields = (int)$val;
	}

	/**
	 * @param RecommendationEngineCodeType $val
	 * @throws Exception
	 */
	public function setRecommendationEngine($val)
	{
        $this->recommendationengine = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Query');
        }
        $this->query = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCorrelationID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CorrelationID');
        }
        $this->correlationid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDeletedField($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DeletedField');
        }
        $this->deletedfield = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * GetRecommendationsResponseContainerType
 * Returns recommended changes or opportunities for improvement related to listing data that
 * was passed in a GetItemRecommendations request.
 */
class GetRecommendationsResponseContainerType
{
	/**
	 * @var ListingAnalyzerRecommendationsType | Contains tips returned from the Listing Analyzer recommendation engine,             if
	 * this engine was specified in the request (or if no engine was specified).
	 */
	public $listinganalyzerrecommendations;
	/**
	 * @var SIFFTASRecommendationsType | Reserved for future use.
	 */
	public $sifftasrecommendations;
	/**
	 * @var PricingRecommendationsType | Contains pricing data returned from the Product Pricing engine,             if this engine
	 * was specified in the request (or if no engine was specified).
	 */
	public $pricingrecommendations;
	/**
	 * @var AttributeRecommendationsType | Contains attribute suggestions returned from the Suggested Attributes engine, if this engine
	 * was specified in the request. The results include suggested attributes and values based
	 * on the primary category and a string you specify in the Query field. Suggestions may only
	 * be returned when the Suggested Attributes engine is specified alone. If you request recommendations
	 * by using multiple engines, suggested attribute data might not be returned. If attributes
	 * are returned with multiple values, the values are returned in order of rank (i.e., the
	 * value that best meets eBay's recommendation criteria is returned first).
	 */
	public $attributerecommendations;
	/**
	 * @var ProductRecommendationsType | Contains zero or more product titles and IDs returned from the Suggested Attributes engine,
	 * if this engine was specified in the request (or if no engine was specified). If applicable,
	 * use one of the suggested product IDs to list the item with Pre-filled Item Information.
	 */
	public $productrecommendations;
	/**
	 * @var string | Unique key to distinguish between recommendations for each item.              Matches a
	 * correlation ID you defined in the request, if any.
	 */
	public $correlationid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ListingAnalyzerRecommendationsType $val
	 * @throws Exception
	 */
	public function setListingAnalyzerRecommendations($val)
	{
        $this->listinganalyzerrecommendations = (int)$val;
	}

	/**
	 * @param SIFFTASRecommendationsType $val
	 * @throws Exception
	 */
	public function setSIFFTASRecommendations($val)
	{
        $this->sifftasrecommendations = (int)$val;
	}

	/**
	 * @param PricingRecommendationsType $val
	 * @throws Exception
	 */
	public function setPricingRecommendations($val)
	{
        $this->pricingrecommendations = (int)$val;
	}

	/**
	 * @param AttributeRecommendationsType $val
	 * @throws Exception
	 */
	public function setAttributeRecommendations($val)
	{
        $this->attributerecommendations = (int)$val;
	}

	/**
	 * @param ProductRecommendationsType $val
	 * @throws Exception
	 */
	public function setProductRecommendations($val)
	{
        $this->productrecommendations = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCorrelationID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CorrelationID');
        }
        $this->correlationid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class GiftServicesCodeType
{
	const GIFTEXPRESSSHIPPING = 'GiftExpressShipping';
	const GIFTSHIPTORECIPIENT = 'GiftShipToRecipient';
	const GIFTWRAP            = 'GiftWrap';
	const CUSTOMCODE          = 'CustomCode';
}

class GranularityLevelCodeType
{
	const COARSE = 'Coarse';
	const FINE   = 'Fine';
	const MEDIUM = 'Medium';
}

class HitCounterCodeType
{
	const NOHITCOUNTER = 'NoHitCounter';
	const HONESTYSTYLE = 'HonestyStyle';
	const GREENLED     = 'GreenLED';
	const HIDDEN       = 'Hidden';
	const BASICSTYLE   = 'BasicStyle';
	const RETROSTYLE   = 'RetroStyle';
	const HIDDENSTYLE  = 'HiddenStyle';
	const CUSTOMCODE   = 'CustomCode';
}

/**
 * HomePageFeaturedEnabledDefinitionType
 * Defines whether Home Page Featured is available on the site.
 */
class HomePageFeaturedEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * InsuranceDetailsType
 * some notes here.
 */
class InsuranceDetailsType
{
	/**
	 * @var AmountType | Cost of shipping insurance set by the seller. If the buyer bought more than one of this
	 * item, this is the insurance for just a single item. Exception: for GetItemShipping, this
	 * is proportional to QuantitySold. Value should be greater than 0.00 if InsuranceOption is
	 * Optional or Required. For flat shipping only. Optional as input and only allowed if ChangePaymentInstructions is
	 * true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express. Not
	 * applicable to eBay Motors vehicle listings.
	 */
	public $insurancefee;
	/**
	 * @var InsuranceOptionCodeType | Whether the seller offers shipping insurance and, if so, whether the insurance is optional
	 * or required. Flat and calculated shipping. Optional as input and only allowed if ChangePaymentInstructions
	 * is true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express.
	 */
	public $insuranceoption;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInsuranceFee($val)
	{
        $this->insurancefee = (int)$val;
	}

	/**
	 * @param InsuranceOptionCodeType $val
	 * @throws Exception
	 */
	public function setInsuranceOption($val)
	{
        $this->insuranceoption = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class InsuranceOptionCodeType
{
	const OPTIONAL                   = 'Optional';
	const REQUIRED                   = 'Required';
	const NOTOFFERED                 = 'NotOffered';
	const INCLUDEDINSHIPPINGHANDLING = 'IncludedInShippingHandling';
	const NOTOFFEREDONSITE           = 'NotOfferedOnSite';
	const CUSTOMCODE                 = 'CustomCode';
}

class InsuranceSelectedCodeType
{
	const NOTOFFERED                 = 'NotOffered';
	const OFFEREDNOTSELECTED         = 'OfferedNotSelected';
	const OFFEREDSELECTED            = 'OfferedSelected';
	const REQUIRED                   = 'Required';
	const INCLUDEDINSHIPPINGHANDLING = 'IncludedInShippingHandling';
	const CUSTOMCODE                 = 'CustomCode';
}

/**
 * InternationalShippingServiceOptionsType
 * Shipping costs and options related to an international shipping service. When used as input,
 * if one is provided, at least one domestic ShippingService must be provided. This type does
 * not exist before compatibility level 383.
 */
class InternationalShippingServiceOptionsType
{
	/**
	 * @var token | A domestic shipping service offered for shipping the item (for example, UPS Ground). For
	 * a list of valid values that you can cache for future use, call GeteBayDetails with DetailName
	 * set to ShippingServiceDetails. For flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders).
	 */
	public $shippingservice;
	/**
	 * @var AmountType | The meaning of this element depends on the call and on whether flat or calculated shipping
	 * has been selected. (For example, it could be the cost to ship a single item, the cost to
	 * ship all items, or the cost to ship just the first of many items, with ShippingServiceAdditionalCost
	 * accounting for the rest.) When returned by GetItemShipping, it includes the packaging and handling
	 * cost. For flat and calculated shipping. Also applicable to Half.com (for GetOrders).
	 */
	public $shippingservicecost;
	/**
	 * @var AmountType | The cost of shipping each additional item beyond the first item. For input, this is required
	 * if the listing is for multiple items and should be zero for single-item listings. Default
	 * value is 0.00. For flat shipping only. Not applicable to Half.com.
	 */
	public $shippingserviceadditionalcost;
	/**
	 * @var int | Seller-preferred presentation order relative to other service options. Valid values: 1
	 * (1st choice), 2 (2nd choice), 3 (3rd choice). For flat and calculated shipping. Not applicable
	 * to Half.com.
	 */
	public $shippingservicepriority;
	/**
	 * @var string | An international location or region to which the item may be shipped via this particular
	 * shipping service. Associated with the shipping service by the seller. Use GeteBayDetails
	 * to determine which locations are valid per site. These values are string equivalents of
	 * values found in ShippingRegionCodeType and CountryCodeType. For the AddItem family of calls,
	 * this field is required if any international shipping service has been specified.
	 */
	public $shiptolocation;
	/**
	 * @var AmountType | The insurance cost associated with shipping a single item with this shipping service. Exception:
	 * for GetItemShipping, this is proportional to QuantitySold. If the item has not yet been sold,
	 * insurance information cannot be calculated and the value is 0.00. For calculated shipping
	 * only. Also applicable to Half.com (for GetOrders).
	 */
	public $shippinginsurancecost;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setShippingService($val)
	{
        $this->shippingservice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingServiceCost($val)
	{
        $this->shippingservicecost = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingServiceAdditionalCost($val)
	{
        $this->shippingserviceadditionalcost = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingServicePriority($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingservicepriority = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShipToLocation($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShipToLocation');
        }
        $this->shiptolocation = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingInsuranceCost($val)
	{
        $this->shippinginsurancecost = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ItemArrayType
 * Container for a list of items. Can contain zero, one, or multiple ItemType objects, each
 * of which conveys the data for one item listing.
 */
class ItemArrayType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}
}

/**
 * ItemBidDetailsType
 * Contains bidding details information of a user on an item.
 */
class ItemBidDetailsType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var int | Number of bids placed so far against the item. Only applicable to competitive-bidding listings
	 * (Chinese and Dutch auctions).
	 */
	public $bidcount;
	/**
	 * @var UserIDType | The eBay ID of the seller who listed the item. <br><br> Starting Jan 2007, when a bidder's
	 * user info is made anonymous, this tag will be returned with the anonymous value "Seller
	 * X", where X indicates where the seller falls in the sequence of sellers that the user has
	 * purchased items from. For example, if the seller is the third seller that the user has
	 * purchased items from, the value "Seller 3" is returned.
	 */
	public $sellerid;
	/**
	 * @var dateTime | The time at which the user placed the last bid on the item.
	 */
	public $lastbidtime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidcount = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setSellerID($val)
	{
        $this->sellerid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastBidTime($val)
	{
        $this->lastbidtime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ItemFormatSortFilterCodeType
{
	const SHOWANYITEMS          = 'ShowAnyItems';
	const SHOWITEMSWITHBINFIRST = 'ShowItemsWithBINFirst';
	const SHOWONLYITEMSWITHBIN  = 'ShowOnlyItemsWithBIN';
	const SHOWONLYSTOREITEMS    = 'ShowOnlyStoreItems';
	const CUSTOMCODE            = 'CustomCode';
}

class ItemIdType
{}

/**
 * ItemListCustomizationType
 * Defines how a list of items should be returned.
 */
class ItemListCustomizationType
{
	/**
	 * @var boolean | Whether to include information about this type of reminder in the response. When true,
	 * the container is returned with default input parameters.
	 */
	public $include;
	/**
	 * @var ListingTypeCodeType | The listing format (fixed price, auction, etc) for the automatic item search criteria.
	 */
	public $listingtype;
	/**
	 * @var ItemSortTypeCodeType | Specifies the result sort order. Default is Ascending.
	 */
	public $sort;
	/**
	 * @var int | The length of time the reminder has existed in the user's My eBay account, in days. Valid
	 * values are 1-60.
	 */
	public $durationindays;
	/**
	 * @var boolean | Specifies whether to include Item.PrivateNotes and Item.eBayNotes in the response. Valid
	 * for WatchList, BidList, WonList, LostList, ScheduledList, ActiveList, SoldList, and UnsoldList.
	 */
	public $includenotes;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setInclude($val)
	{
        $this->include = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setListingType($val)
	{
        $this->listingtype = (int)$val;
	}

	/**
	 * @param ItemSortTypeCodeType $val
	 * @throws Exception
	 */
	public function setSort($val)
	{
        $this->sort = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDurationInDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->durationindays = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeNotes($val)
	{
        $this->includenotes = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ItemLocationCodeType
{
	const ITEMAVAILABLEIN = 'ItemAvailableIn';
	const ITEMLOCATEDIN   = 'ItemLocatedIn';
	const CUSTOMCODE      = 'CustomCode';
}

class ItemSortFilterCodeType
{
	const ENDINGLAST       = 'EndingLast';
	const ENDINGSOONEST    = 'EndingSoonest';
	const HIGHESTPRICE     = 'HighestPrice';
	const LOWESTPRICE      = 'LowestPrice';
	const NEWLYLISTED      = 'NewlyListed';
	const RANDOMLYSELECTED = 'RandomlySelected';
	const CUSTOMCODE       = 'CustomCode';
}

class ItemSortTypeCodeType
{
	const ITEMID                        = 'ItemID';
	const PRICE                         = 'Price';
	const STARTPRICE                    = 'StartPrice';
	const TITLE                         = 'Title';
	const BIDCOUNT                      = 'BidCount';
	const QUANTITY                      = 'Quantity';
	const STARTTIME                     = 'StartTime';
	const ENDTIME                       = 'EndTime';
	const SELLERUSERID                  = 'SellerUserID';
	const TIMELEFT                      = 'TimeLeft';
	const LISTINGDURATION               = 'ListingDuration';
	const LISTINGTYPE                   = 'ListingType';
	const CURRENTPRICE                  = 'CurrentPrice';
	const RESERVEPRICE                  = 'ReservePrice';
	const MAXBID                        = 'MaxBid';
	const BIDDERCOUNT                   = 'BidderCount';
	const HIGHBIDDERUSERID              = 'HighBidderUserID';
	const BUYERUSERID                   = 'BuyerUserID';
	const BUYERPOSTALCODE               = 'BuyerPostalCode';
	const BUYEREMAIL                    = 'BuyerEmail';
	const SELLEREMAIL                   = 'SellerEmail';
	const TOTALPRICE                    = 'TotalPrice';
	const WATCHCOUNT                    = 'WatchCount';
	const BESTOFFERCOUNT                = 'BestOfferCount';
	const QUESTIONCOUNT                 = 'QuestionCount';
	const SHIPPINGSERVICECOST           = 'ShippingServiceCost';
	const FEEDBACKRECEIVED              = 'FeedbackReceived';
	const FEEDBACKLEFT                  = 'FeedbackLeft';
	const USERID                        = 'UserID';
	const QUANTITYSOLD                  = 'QuantitySold';
	const BESTOFFER                     = 'BestOffer';
	const QUANTITYAVAILABLE             = 'QuantityAvailable';
	const QUANTITYPURCHASED             = 'QuantityPurchased';
	const WONPLATFORM                   = 'WonPlatform';
	const SOLDPLATFORM                  = 'SoldPlatform';
	const LISTINGDURATIONDESCENDING     = 'ListingDurationDescending';
	const LISTINGTYPEDESCENDING         = 'ListingTypeDescending';
	const CURRENTPRICEDESCENDING        = 'CurrentPriceDescending';
	const RESERVEPRICEDESCENDING        = 'ReservePriceDescending';
	const MAXBIDDESCENDING              = 'MaxBidDescending';
	const BIDDERCOUNTDESCENDING         = 'BidderCountDescending';
	const HIGHBIDDERUSERIDDESCENDING    = 'HighBidderUserIDDescending';
	const BUYERUSERIDDESCENDING         = 'BuyerUserIDDescending';
	const BUYERPOSTALCODEDESCENDING     = 'BuyerPostalCodeDescending';
	const BUYEREMAILDESCENDING          = 'BuyerEmailDescending';
	const SELLEREMAILDESCENDING         = 'SellerEmailDescending';
	const TOTALPRICEDESCENDING          = 'TotalPriceDescending';
	const WATCHCOUNTDESCENDING          = 'WatchCountDescending';
	const QUESTIONCOUNTDESCENDING       = 'QuestionCountDescending';
	const SHIPPINGSERVICECOSTDESCENDING = 'ShippingServiceCostDescending';
	const FEEDBACKRECEIVEDDESCENDING    = 'FeedbackReceivedDescending';
	const FEEDBACKLEFTDESCENDING        = 'FeedbackLeftDescending';
	const USERIDDESCENDING              = 'UserIDDescending';
	const QUANTITYSOLDDESCENDING        = 'QuantitySoldDescending';
	const BESTOFFERCOUNTDESCENDING      = 'BestOfferCountDescending';
	const QUANTITYAVAILABLEDESCENDING   = 'QuantityAvailableDescending';
	const QUANTITYPURCHASEDDESCENDING   = 'QuantityPurchasedDescending';
	const BESTOFFERDESCENDING           = 'BestOfferDescending';
	const ITEMIDDESCENDING              = 'ItemIDDescending';
	const PRICEDESCENDING               = 'PriceDescending';
	const STARTPRICEDESCENDING          = 'StartPriceDescending';
	const TITLEDESCENDING               = 'TitleDescending';
	const BIDCOUNTDESCENDING            = 'BidCountDescending';
	const QUANTITYDESCENDING            = 'QuantityDescending';
	const STARTTIMEDESCENDING           = 'StartTimeDescending';
	const ENDTIMEDESCENDING             = 'EndTimeDescending';
	const SELLERUSERIDDESCENDING        = 'SellerUserIDDescending';
	const TIMELEFTDESCENDING            = 'TimeLeftDescending';
	const WONPLATFORMDESCENDING         = 'WonPlatformDescending';
	const SOLDPLATFORMDESCENDING        = 'SoldPlatformDescending';
	const CUSTOMCODE                    = 'CustomCode';
}

/**
 * ItemTransactionIDArrayType
 * Container of ItemTransactionIDs.
 */
class ItemTransactionIdArrayType
{
	/**
	 * @var ItemTransactionIDType | 	 */
	public $itemtransactionid;
	/**
	 * @param ItemTransactionIDType $val
	 * @throws Exception
	 */
	public function setItemTransactionID($val)
	{
        $this->itemtransactionid = (int)$val;
	}
}

/**
 * ItemTransactionIDType
 * A container for item and transaction IDs.
 */
class ItemTransactionIdType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ItemType
 * Contains the data defining one item. A seller populates an object of this type at listing
 * time with the definition of a new item. A seller also uses an object of this type to re-list
 * or revise an item. Calls that retrieve item data (such as the GetSellerList call) return
 * an object of this type, filled with the item's data. Some fields are applicable both to
 * eBay listings and Half.com listings. Some fields are only applicable to eBay listings, and
 * others are only applicable to Half.com listings.
 */
class ItemType
{
	/**
	 * @var string | Returns custom, application-specific data associated with the item. The data you specify
	 * is stored by eBay with the item for your own reference, but it is not used by eBay in any
	 * way. Use ApplicationData to store special information for yourself, such as a part number. For
	 * a SKU in an eBay.com listing, use the SKU element instead. To remove this value when revising
	 * or relisting an item, use DeletedField. ApplicationData is not applicable to Half.com.
	 * For Half.com listings, use SellerInventoryID instead.
	 */
	public $applicationdata;
	/**
	 * @var AttributeSetArrayType | Reserved for future use.
	 */
	public $attributesetarray;
	/**
	 * @var AttributeArrayType | Used to specify the item condition. Only applicable to Half.com (not eBay listings). You
	 * can revise this property for Half.com listings. This does not use the same Attributes format
	 * as eBay's Item Specifics.
	 */
	public $attributearray;
	/**
	 * @var LookupAttributeArrayType | Use this as a shortcut for specifying the Item Condition attribute by name instead of by
	 * ID. Only valid when using AddItem for items in Media categories (Books, DVD and Movies,
	 * Music, and Video Game categories). You can pass either AttributeSetArray or LookupAttributeArray,
	 * but you cannot pass both in the same request. Not applicable to Half.com.
	 */
	public $lookupattributearray;
	/**
	 * @var boolean | Whether the seller specifies that a shipping discount is to be applied (in the event that
	 * an item's transaction is later combined with others into a single order). Not applicable
	 * to Half.com.
	 */
	public $applyshippingdiscount;
	/**
	 * @var boolean | If true, the seller requests immediate payment for the item. If false or not specified,
	 * immediate payment is not requested. (In responses, does not indicate whether the item is
	 * actually still a candidate for purchase via immediate payment.)<br> <br> Only applicable
	 * to items listed on PayPal-enabled sites in categories that support immediate payment (see
	 * AutoPayEnabled in GetCategories), when seller has a Premier or Business PayPal account
	 * (see PayPalAccountType in Getuser). If true, the seller must also accept PayPal as a payment
	 * method for the item (see Item.PaymentMethods).<br> <br> Required for digitally delivered
	 * goods (see Item.DigitalDeliveryDetails). <br> <br> Not supported if ThirdPartyCheckout
	 * is true.<br> <br> See the eBay Web Services guide section on Immediate Payment for additional requirements
	 * and dependencies. Also see the section on working with the eBay Motors site for additional
	 * rules. Not applicable to Half.com.
	 */
	public $autopay;
	/**
	 * @var PaymentDetailsType | Contains data associated with eBay Motors payments (Durations for deposit and full payments).
	 * Returned for Motors listings. Not applicable to Half.com.
	 */
	public $paymentdetails;
	/**
	 * @var BiddingDetailsType | Detailed information about a bid. For GetMyeBayBuying, returned as a self-closed element
	 * if no bids meet the request criteria. Not applicable to Half.com.
	 */
	public $biddingdetails;
	/**
	 * @var boolean | Listing upgrade that features the item in eBay search results on the mobile.de partner
	 * site. Applicable to eBay Germany. If true in listing requests and responses, the seller
	 * is purchasing or has purchased cross-promotional placement on the mobile.de site. See the
	 * eBay Web Services Guide for applicable categories, revise and relist rules, and additional
	 * information on featuring vehicles on the Mobile.de Site. Not applicable to Half.com.
	 */
	public $motorsgermanysearchable;
	/**
	 * @var BuyerProtectionCodeType | Indicates the status of the item's eligibility for the PayPal Buyer Protection program.
	 * Not applicable to Half.com.
	 */
	public $buyerprotection;
	/**
	 * @var AmountType | For Chinese auction listings, Buy It Now allows a user to purchase the item at a fixed
	 * price and end the auction immediately. eBay China also supports Buy It Now for Dutch auction
	 * listings (see International Differences Overview in the eBay Web Services guide). Use this
	 * field to add Buy It Now and specify the amount a buyer would need to bid to take advantage
	 * of the Buy It Now feature. <br><br> On the main eBay site, not applicable to fixed-price
	 * items (ListingTypeCodeType type StoresFixedPrice or FixedPriceItem), AdFormat listings,
	 * or Half.com listings. For fixed-price and Half.com listings, see StartPrice instead. See
	 * the eBay Web Services Guide for validation rules when revising US eBay Motors listings,
	 * including rules for lowering the Buy It Now price of a Motors listing. <br><br> On most
	 * sites, once a Chinese auction has bids, the listing is no longer eligible for Buy It Now.
	 * However, calls like GetItem and GetSearchResults still return the BuyItNowPrice that the
	 * seller set for the listing. You can use Item.SellingStatus.BidCount to determine whether
	 * an auction with Buy It Now has bids or not. With GetSearchResults, you can examine the
	 * Item.SearchDetails.BuyItNowEnabled flag to determine whether an auction is still a Buy
	 * It Now listing. With GetItem, you can examine the Item.ListingDetails.BuyItNowAvailable
	 * flag to determine whether a Dutch auction is still a Buy It Now listing. <br><br> For a
	 * listing to be eligible for Express, the max Buy It Now Price is USD 10,000.00 for the US. (Additional
	 * price limits may be imposed by the seller's PayPal account or the payment method used.
	 * Such limits cannot be determined via the eBay API and are not covered in eBay's API documentation,
	 * as they may vary for each user.) <br><br> To remove this value when revising or relisting
	 * an item, use DeletedField.
	 */
	public $buyitnowprice;
	/**
	 * @var boolean | Controls how eBay handles cases in which an ID specified in PrimaryCategory and/or SecondaryCategory
	 * no longer exists in the current category structure: If you pass a value of true in CategoryMappingAllowed,
	 * eBay will look up the current ID that is mapped to the same category and use the new ID
	 * for the listing (if any). The new ID will be returned in the response as CategoryID (for
	 * the primary category) or Category2ID (for the secondary category). If CategoryMappingAllowed
	 * is not set or contains a value of "false" (the default), an error will be returned if a
	 * selected category ID no longer exists. Not applicable to Half.com.
	 */
	public $categorymappingallowed;
	/**
	 * @var CharityType | Identifies a Giving Works listing and the benefiting nonprofit charity organization selected
	 * by the charity seller, if any. If specified, the seller must also accept PayPal as a payment
	 * method for the item (see Item.PaymentMethods). <br> <br>Giving Works listings are not eligible
	 * for some eBay Express sites. (If ExpressListing is false in GetItem or VerifyAddItem and
	 * you specified Charity, check whether ExpressItemRequirements returns NoCharity as a cause.) <br><br> When
	 * you revise a item, you can add or change the charity information, but you cannot remove
	 * it. When you relist an item, use DeletedField to remove a charity information. <br><br> Not
	 * applicable to Half.com.
	 */
	public $charity;
	/**
	 * @var CountryCodeType | Two-letter ISO 3166 country code. In some calls, used with the Location field to indicate
	 * the city and country where the item is located. Also applicable as input to AddItem and
	 * related calls when you list items to Half.com (specify US). <br> <br> In GetSearchResultsExpress,
	 * only returned when ItemDetails is set to Fine.
	 */
	public $country;
	/**
	 * @var CrossPromotionsType | Container for cross-promoted items related to a specific item ID. The items are either
	 * upsell or cross-sell, according to the promotion method passed in the request. Not applicable
	 * to Half.com.
	 */
	public $crosspromotion;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var DescriptionReviseModeCodeType | If you are changing the description of an item, specifies whether the new next is an addition,
	 * a replacement, etc.
	 */
	public $descriptionrevisemode;
	/**
	 * @var DistanceType | The distance used in a proximity search distance calculation. Not applicable to Half.com.
	 */
	public $distance;
	/**
	 * @var string | Specifies a promotional offer that allow the buyer to purchase items on credit.
	 */
	public $financeofferid;
	/**
	 * @var int | If set, a generic gift icon displays next the listing's title in search and browse pages.
	 * GiftIcon must be set to be able to use GiftServices options. Not applicable to Half.com.
	 */
	public $gifticon;
	/**
	 * @var GiftServicesCodeType | Optional gift services that the seller is offering if the buyer chooses to purchase the
	 * item as a gift. Only returned if offered by the seller. Not applicable to Half.com.
	 */
	public $giftservices;
	/**
	 * @var HitCounterCodeType | Indicates whether an optional hit counter is displayed on the item's listing page and,
	 * if so, what type. See HitCounterCodeType for specific values. Not applicable to Half.com. This
	 * field is ignored when Item.ListingType=Express.
	 */
	public $hitcounter;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var ListingDetailsType | Various details about a listing, some of which are calculated or derived after the item
	 * is listed. These include the start and end time, converted (localized) prices, and certain
	 * flags that indicate whether the seller specified fields whose values are not visible to
	 * the requesting user. For GetMyeBayBuying, returned as a self- closed element if no listings
	 * meet the request criteria. Not applicable to Half.com.
	 */
	public $listingdetails;
	/**
	 * @var ListingDesignerType | Contains the detail data for the Listing Designer theme and template (if either are used),
	 * which can optionally be used to enhance the appearance of the description area of an item's
	 * description. See ListingDesignerType for its child elements. Not applicable to Half.com.
	 */
	public $listingdesigner;
	/**
	 * @var token | Specifies the ID of a set of default durations for a certain type of listing. The actual
	 * duration values are returned within the FeatureDefinitions node. The type of listing is
	 * named in the type attribute.
	 */
	public $listingduration;
	/**
	 * @var ListingEnhancementsCodeType | Describes listing upgrades that sellers can select for a fee, such as the BoldTitle upgrade.
	 * Also includes feature packs for saving on listing upgrades. See <a href="http://pages.ebay.com/help/sell/ia/promoting_your_item.html">Listing
	 * Upgrades</a> in the eBay Web site online help. <br><br> You cannot remove listing upgrades
	 * when you revise a listing. When you relist an item, use DeletedField to remove a listing
	 * upgrades. <br><br> For AddLiveAuctionItem and ReviseLiveAuctionItem, you can specify a
	 * maximum of 10 featured lot items per live auction catalog. Not applicable to Half.com. This
	 * field is ignored when Item.ListingType=Express.
	 */
	public $listingenhancement;
	/**
	 * @var ListingTypeCodeType | The listing format (fixed price, auction, etc) for the automatic item search criteria.
	 */
	public $listingtype;
	/**
	 * @var ListingSubtypeEnum | Indicates the specific type of lead generation format listing (i.e., classified subtypes).
	 */
	public $listingsubtype;
	/**
	 * @var string | Indicates the geographical location of the item (along with Country). When you revise a
	 * listing, you can add or change this value only if the listing has no bids (or no items
	 * have sold) and it does not end within 12 hours. Also applicable as input to AddItem and
	 * related calls when you list items to Half.com.
	 */
	public $location;
	/**
	 * @var int | A lot is a set of two or more similar items that must be purchased together in a single
	 * transaction. A listing can have multiple lots (instead of multiple items). When LotSize
	 * is specified, the listing price reflects the price of each lot (not each item within the
	 * lot). In this case, Quantity indicates the number of lots being listed, and LotSize indicates
	 * the number of items in each lot. (If a listing has no lots, Quantity indicates the number
	 * of separate items being listed.) Important: Lot items can be listed only in lot-enabled categories.
	 * GetCategories returns LSD (lot size disabled) with a value of true for categories that
	 * do not support lots. Not applicable to Half.com. This field is ignored when Item.ListingType=Express.
	 */
	public $lotsize;
	/**
	 * @var boolean | If true in listing requests and responses, the item is listed with Now and New. Only applicable
	 * to Buy It Now, fixed-price, and Store Inventory listings on certain eBay sites. See the
	 * eBay Web Services guide for details. In requests that list items, only valid if the seller
	 * also specifies the item condition (as new), predefined return policy attributes, a buy
	 * it now or fixed price, and shipping costs. To remove Now and New from a listing, set the
	 * value to false. If the listing has bids (or items have been sold) or the listing ends within
	 * 12 hours, you cannot add or remove NowAndNew when you revise the listing. Not applicable
	 * to Half.com.
	 */
	public $nowandnew;
	/**
	 * @var string | Not currently operational.
	 */
	public $partnercode;
	/**
	 * @var string | Not currently operational.
	 */
	public $partnername;
	/**
	 * @var BuyerPaymentMethodCodeType | The payment methods the buyer uses to pay for      the order. An order can have multiple
	 * payment methods if the      buyer combines several transactions into one order.      Also
	 * applicable to Half.com (for GetOrders).
	 */
	public $paymentmethods;
	/**
	 * @var string | Valid PayPal email address for the PayPal account that the seller will use if they offer
	 * PayPal as a payment method for the listing. eBay uses this to identify the correct PayPal
	 * account when the buyer pays via PayPal during the checkout process. (As a seller can have
	 * more than one PayPal account, you cannot necessarily rely on PayPal account data returned
	 * from GetUser for details about the account associated with the PayPal email address that
	 * the seller specifies.)<br> <br> Required if seller has chosen PayPal as a payment method
	 * (PaymentMethods) for the listing.<br> <br> For a listing to be eligible for Express US,
	 * the seller needs to use an email address that is in good standing and that is associated
	 * with a PayPal Premier or PayPal business account that is set to ship to unconfirmed addresses.
	 * For Express Germany, PayPalEmailAddress must be specified for Express format listings,
	 * but it is optional for other formats (as long as an eligible default PayPal account is
	 * specified in the seller's Express preferences). If the specified PayPal account becomes
	 * ineligible for eBay Express payments (because the seller blocked unconfirmed addresses
	 * or some other change occurred), the items associated with that account may become ineligible
	 * for Express and may no longer appear on Express. See eBay Express information in the eBay
	 * Web Services Guide for more information.<br> <br> For digital listings, the seller needs
	 * to use an email address that is associated with a PayPal Premier or PayPal business account.
	 * <br> <br> <b>For ReviseItem and RelistItem only:</b> To remove this value when you revise
	 * or relist an item, use DeletedField. When you revise a listing, if the listing has bids
	 * (or items have been sold) or it ends within 12 hours, you can add PayPalEmailAddress, but
	 * you cannot remove it.<br> <br> Not applicable to eBay Motors listings. Also not applicable
	 * to Half.com.
	 */
	public $paypalemailaddress;
	/**
	 * @var CategoryType | Category ID for the first (or only) category in which the item is listed (or will be listed,
	 * if the item is new). A number of listing features have dependencies on the primary category.
	 * We have pointed out a few of the notable dependencies below. See the descriptions of the
	 * fields you are using to determine whether the feature you're supporting depends on the
	 * listing's primary category. <br> <br> <b>For the AddItem family of calls:</b> Use calls
	 * like GetCategories and GetCategoryFeatures to determine valid values for the site on which
	 * you are listing (see the eBay Web Services Guide for information on working with categories).
	 * Also see Item.CategoryMappingAllowed and Item.CategoryBasedAttributesPrefill.<br> <br> Most
	 * eBay.com categories are also eligible for eBay Express. Categories not covered by PayPal
	 * Buyer Protection are excluded. Also, certain categories that do not support item condition
	 * may be excluded (use GetCategoryFeatures to determine eligible categories). See "eBay Express"
	 * in the eBay Web Services Guide.<br> <br> There are a number of categories on some eBay
	 * sites that always add the Gallery feature (for free) when you include a picture in the
	 * listing and you don't specify the Gallery feature yourself. See GalleryType for information
	 * about fees that could be charged if you change the category in these cases. <br> <br> Not
	 * applicable to Half.com.<br> <br> <b>For ReviseItem only:</b> When revising a listing, you
	 * can change the primary category only if an item has no bids (or no items have sold) and
	 * the listing does not end within 12 hours. If you change the listing category, any Item
	 * Specifics (attributes) that were previously specified may be dropped from the listing if
	 * they aren't valid for the new category. See Item.AttributeSetArray.<br> <br> You cannot
	 * change the meta-categories for vehicles (i.e., you cannot change a truck to a motorcycle),
	 * but you can change the leaf category (e.g., change one motorcycle subcategory to another
	 * motorcycle subcategory). See the eBay Web Services Guide for additional rules. International
	 * sites (such as the eBay Germany site) have similar rules for revising vehicle categories.
	 * <br> <br> <b>For AddLiveAuctionItem only:</b> For eBay Live Auctions (e.g., in AddLiveAuctionItem),
	 * this is the eBay Live Auctions site category in which to list the item. This can be different
	 * from the category that is associated with the seller's catalog. See Specifying eBay Live
	 * Auctions Categories in the eBay Web Services guide.<br> <br> <b>For GetItemRecommendations
	 * only:</b> For GetItemRecommendations, use this to control the category that will be searched
	 * for recommendations. Specify the category in which the item will be listed. See the eBay
	 * Web Services guide for differences in validation rules depending on whether you are using the
	 * Listing Analyzer engine, Product Pricing engine, or Suggested Attributes engine.
	 */
	public $primarycategory;
	/**
	 * @var boolean | If true, designates the listing as a private auction. The list of bidders on private auctions
	 * is hidden when the active listing is viewed. Sellers may want to use this option when they
	 * believe that potential bidders for a listing would not want their User IDs disclosed to
	 * others. Not applicable to Half.com.
	 */
	public $privatelisting;
	/**
	 * @var ProductListingDetailsType | Specifies stock product information to include in a listing. Only applicable when listing
	 * items with Pre-filled Item Information. If the item's primary and secondary category are
	 * both catalog-enabled, the product listing details must be applicable to the primary category.
	 * If only one category is catalog- enabled, the product listing details must be applicable
	 * to the catalog-enabled category. Either Item.ExternalProductID or Item.ProductListingDetails
	 * can be specified in an AddItem request, but not both. See the eBay Web Services Guide for
	 * information on listing with Pre-filled Item Information.<br> <br> <b>For ReviseItem and
	 * RelistItem only:</b> If a listing includes Pre-filled Item Information and you change a
	 * category, the rules for continuing to include Pre-filled Item Information depend on whether
	 * or not the new category is mapped to a characteristic set associated with the same product
	 * ID. When you revise a listing, if it has bids or it ends within 12 hours, you cannot change
	 * the product ID and you cannot remove existing product data. However, you can change or
	 * add preferences such as IncludeStockPhotoURL, UseStockPhotoURLAsGallery, and IncludePrefilledItemInformation.
	 * To delete all catalog data when you revise or relist an item, specify Item.ProductListingDetails
	 * in DeletedField and don't pass ProductListingDetails in the request.<br> <br> <b>For GetItemRecommendations
	 * only:</b> For GetItemRecommendations, see the eBay Web Services guide for validation rule
	 * differences when using the Product Pricing engine.<br><br> Not applicable to Half.com.
	 */
	public $productlistingdetails;
	/**
	 * @var ProximitySearchDetailsType | Applications should remove dependencies on this type. For item location, refer to Item.PostalCode
	 * instead.
	 */
	public $proximitysearchdetails;
	/**
	 * @var int | Specifies the number of items from the specified listing the user tendering the offer intends
	 * to purchase or bid on. For Chinese auctions and other listing formats that only allow one
	 * item per listing, value may not exceed one. For multi-item listings, must be greater than
	 * zero and not exceeding the number of items offered for sale in the listing.
	 */
	public $quantity;
	/**
	 * @var string | A text note that the seller specified for the Half.com item, if any. Only visible to the
	 * seller. Not returned if the seller specified no notes.
	 */
	public $privatenotes;
	/**
	 * @var string | Specifies a region ID. The item must have been listed for the specified region to be returned
	 * in the search result set.
	 */
	public $regionid;
	/**
	 * @var boolean | Applicable only to re-listing an item. If true, creates a link in the item's old listing
	 * for the item that points to the new relist page, which accommodates users who might still
	 * look for the item under its old item ID. Not applicable to Half.com.
	 */
	public $relistlink;
	/**
	 * @var AmountType | The lowest price at which the seller is willing to sell the item. (StartPrice must be lower
	 * than ReservePrice.) Not all categories support reserve prices. See GetCategories and "Determining
	 * Whether a Category Supports Reserve Prices" in the eBay Web Services guide. In calls that
	 * retrieve item data, ReservePrice only has a non-zero value for listings with a reserve
	 * price and where the user requesting the item data is also the item's seller. Not applicable
	 * to fixed- price items or ad format listings.<br> <br> You can remove the reserve price
	 * of a US eBay Motors listing if the category allows it, the current reserve price has not
	 * been met, and the reserve price is at least $2.00 more than the current high bid. In this
	 * case, if the item has bids, the reserve price is set to $1.00 over the current high bid.
	 * The next bid meets the reserve and wins. See the Fees Overview on the eBay Web site for
	 * information about fee credits that may be available when the reserve price is removed for
	 * a Motors listing. See the eBay Web Services guide for validation rules when revising US
	 * Motors listings.<br><br> For AddLiveAuctionItem and ReviseLiveAuctionItem, the seller needs
	 * to make sure they specify the amount in the currency selected for the live auction event.
	 * When you revise a Live Auction item, you can lower an existing reserve price, but you cannot
	 * add a reserve price or remove an existing reserve price if the item has absentee bids or
	 * ends in less than 12 hours.<br><br> Not applicable to Half.com. This field is ignored when
	 * Item.ListingType=Express.
	 */
	public $reserveprice;
	/**
	 * @var ReviseStatusType | Indicates whether an item has been revised since the listing became active and, if so,
	 * which among a subset of properties have been changed by the revision. Output only. Not
	 * applicable to Half.com.
	 */
	public $revisestatus;
	/**
	 * @var dateTime | Date and time that the sale schedule starts.
	 */
	public $scheduletime;
	/**
	 * @var CategoryType | ID for second category in which the item is listed (also see Item.PrimaryCategory). <br> <br> <b>For
	 * the AddItem family of calls:</b> Listing an item in a second category is optional. Also
	 * see Item.CategoryMappingAllowed and Item.CategoryBasedAttributesPrefill. <br> <br> Most
	 * eBay.com categories are also eligible for eBay Express. Categories not covered by PayPal
	 * Buyer Protection are excluded. Also, certain categories that do not support item condition
	 * may be excluded.<br> <br> Not applicable to eBay China (site 223). Not applicable to Half.com.
	 * <br> <br> You cannot list US eBay Motors vehicles in two categories. However, you can list
	 * Parts & Accessories in two categories. The Final Value Fee is based on the primary category
	 * in which the item is listed. Furthermore, you can list the same item in an eBay Motors Parts
	 * & Accessories category and in an eligible eBay category, as long as the primary category
	 * is associated with the site on which you are listing. That is, the two categories can be
	 * a mix of Motors Parts & Accessories and eBay site categories. (Real Estate, Mature Audience
	 * (adult), and Business & Industrial categories are not eligible for listing in two categories in
	 * this manner.) For example, if you list on Motors, the primary category could be 6750 (eBay
	 * Motors > Parts & Accessories > Apparel & Merchandise > Motorcycle > Jackets & Leathers),
	 * and the secondary category could be 57988 (eBay > Clothing, Shoes > Accessories > Men's
	 * Clothing > Outerwear). If you list on the main eBay site, the primary category could be 57988
	 * and the secondary category could be 6750. <br> <br> To remove this value when relisting
	 * an item, use DeletedField. <br><br> <b>For ReviseItem only:</b> When revising a listing,
	 * you can add, remove, or change the secondary category only if the listing has no bids (or
	 * no items have sold) and it does not end within 12 hours. If you change the secondary category, any
	 * corresponding Item Specifics (attributes) that were previously specified may be dropped
	 * from the listing if they aren't valid for the category. See Item.AttributeSetArray.<br> <br> When
	 * you revise an item, you can change the secondary category from a Motors Parts & Accessories
	 * category to an eBay category or vice versa if the listing has no bids (or no items have
	 * sold) and it does not end within 12 hours. <br> <br> <b>For AddLiveAuctionItem only:</b>
	 * For eBay Live Auctions (e.g., AddLiveAuctionItem), this is the eBay US site category in
	 * which to list the item. (This can be any eBay US category except Motors or Real Estate
	 * categories.) Note that eBay Live Auctions does not charge a fee to specify an eBay category (i.e.,
	 * no List in Two Category fees). See Specifying eBay Live Auctions Categories in the eBay
	 * Web Services guide. In AddLiveAuctionItem, you need to specify SecondaryCategory if you
	 * are including Item Specifics (AttributeSetArray). <br> <br> <b>For ReviseLiveAuctionItem
	 * only:</b> For eBay Live Auctions, you can add SecondaryCategory when you revise the lot
	 * item, but you cannot change or remove an existing secondary category if the item has absentee
	 * bids or it ends in less than 12 hours.<br> <br> <b>For GetItemRecommendations only:</b> For
	 * GetItemRecommendations, use this to control the category that will be searched for recommendations.
	 * Specify the category in which the item will be listed. See the eBay Web Services guide
	 * for differences in validation rules depending on whether you are using the Listing Analyzer
	 * engine, Product Pricing engine, or Suggested Attributes engine.
	 */
	public $secondarycategory;
	/**
	 * @var CategoryType | ID for a second category that eBay added as a free promotion. You cannot add this yourself. Only
	 * returned if the item was listed in a single category and eBay added a free second category. Not
	 * applicable to Half.com.
	 */
	public $freeaddedcategory;
	/**
	 * @var SiteHostedPictureType | In requests, if SiteHostedPicture or VendorHostedPicture are passed in with PictureDetails,
	 * PictureDetails will take precedence. In responses, PictureDetails is returned instead of
	 * SiteHostedPicture or VendorHostedPicture with request version 439 and higher. <br> <br> Previous
	 * behavior (for applications that still use older versions of the schema):<br> <br> SiteHostedPicture
	 * contains the data for pictures associated with an item, when those pictures are hosted
	 * on the eBay site (eBay Picture Services). The related element, VendorHostedPicture, contains
	 * the data for pictures hosted somewhere other than on the eBay site. <br> <br> For a listing
	 * to be eligible for eBay Express, it must include a picture, gallery, or stock photo URL.
	 * Some categories are exempt from this requirement.<br> <br> Not applicable to Half.com.
	 */
	public $sitehostedpicture;
	/**
	 * @var UserType | Container for information about this listing's seller. Not applicable to Half.com. <br> <br> In
	 * GetSearchResultsExpress, only returned when ItemDetails is set to Fine.
	 */
	public $seller;
	/**
	 * @var SellingStatusType | Various details about the current status of the listing, such as the current number of
	 * bids and the current high bidder. Not applicable to Half.com.<br> <br> For GetSearchResultsExpress,
	 * this is always returned when ItemArray.Item is returned.
	 */
	public $sellingstatus;
	/**
	 * @var ShippingOptionCodeType | Previous behavior: Indicates where the seller is willing to ship the item. Default is SiteOnly.
	 * If SitePlusRegions is selected, when the item is listed, then at least one region must
	 * also be specified (in ShippingRegions). Not applicable to Half.com.
	 */
	public $shippingoption;
	/**
	 * @var ShippingDetailsType | The shipping-related details for an item or transaction, including flat and calculated
	 * shipping costs and shipping insurance costs. For GetOrders, also applicable to Half.com.
	 * For GetOrders, minimal ShippingDetails information is returned under the Transaction container.
	 */
	public $shippingdetails;
	/**
	 * @var ShippingRegionCodeType | Previous behavior: Indicates the global regions to which the seller is willing to ship
	 * the item(s). Only applicable if the seller specifies SitePlusRegions for the shipping option
	 * (ShippingOptionCodeType). Not applicable to Half.com.
	 */
	public $shippingregions;
	/**
	 * @var ShippingTermsCodeType | Previous behavior: Indicates who pays the shipping costs for the item(s), the buyer or
	 * the seller. Not applicable to Half.com.
	 */
	public $shippingterms;
	/**
	 * @var string | An international location or region to which the seller is willing to ship, regardless
	 * of shipping service. The country of the listing site is added by eBay. Use GeteBayDetails
	 * with a DetailName of ShippingLocationDetails to determine which international locations
	 * are valid for the site. Omit ShipToLocations if you want to ship only within the country
	 * of the listing site. To state that you do not wish to ship at all, set ShipToLocations
	 * to None. ReviseItem can add a ShipToLocation. Applicable with compatibility level 373 and
	 * higher. Not applicable to Half.com.
	 */
	public $shiptolocations;
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var AmountType | The original price of the item at listing or re-listing time. If this value changes when
	 * the item is revised, the new value becomes the original price. <br><br> For auction-type
	 * listings, competitive bidding starts at this value. Once at least one bid has been placed,
	 * StartPrice remains the same but CurrentPrice is incremented to the amount of each succeeding
	 * bid. If ReservePrice is also specified, the value of StartPrice must be lower than the
	 * value of ReservePrice. <br><br> For fixed-price listings (FixedPriceItem), Store Inventory
	 * (StoresFixedPrice) listings, and Express format listings, this is the constant price at
	 * which a buyer may purchase the item. <br><br> For a listing to be eligible for Express,
	 * the max start price is USD 10,000.00 for the US, EUR 5000 for Germany, and GBP 5500 for
	 * the UK. (Additional price limits may be imposed by the seller's PayPal account or the payment
	 * method used. Such limits cannot be determined via the eBay API and are not covered in eBay's
	 * API documentation, as they may vary for each user.)<br> <br> Also applicable to Half.com
	 * (valid range 0.75 to 9999.99). You can revise this field for Half.com listings. <br> For
	 * eBay Live Auctions items, this is the amount at which absentee Internet bidding for the
	 * item begins. Maximum length 16. Must be greater than zero. The seller needs to make sure
	 * they specify the amount in the currency selected for the live auction event.
	 */
	public $startprice;
	/**
	 * @var StorefrontType | Contains information related to the item in the context of a seller's eBay Store. Applicable
	 * for auction formats, Basic Fixed Price, and Store Inventory format items listed by eBay
	 * Stores sellers. Not applicable to Half.com. This field is ignored when Item.ListingType=Express.
	 */
	public $storefront;
	/**
	 * @var string | Subtitle to use in addition to the title. Provides more keywords when buyers search in
	 * titles and descriptions. You cannot use HTML in the Subtitle. (HTML characters will be
	 * interpreted literally as plain text.) If you pass any value, this feature is applied (with
	 * applicable fees).<br> <br> Not applicable to listings in US eBay Motors passenger vehicle,
	 * motorcycle, and "other vehicle" categories or to listings in CA eBay Motors passenger vehicle
	 * and motorcycle categories. (Other US and CA eBay Motors categories support this field as
	 * of December 2005.) For eBay Motors categories that do not support this field, use Item
	 * Specifics (AttributeSetArray) to specify the vehicle subtitle.<br> <br> Not applicable
	 * to Half.com.<br> <br> When you revise a item, you can add or change the subtitle, but you
	 * cannot remove it. When you relist an item, use DeletedField to remove a subtitle.<br> <br> In
	 * GetSearchResultsExpress, only returned when ItemDetails is set to Fine and a subtitle was
	 * specified for the item.
	 */
	public $subtitle;
	/**
	 * @var duration | Time left before the listing for the cross-promoted item ends. Output only. The duration
	 * is represented in the ISO 8601 duration format (PnYnMnDTnHnMnS). See Data Types in the
	 * eBay Web Services guide for information about this format. For ended listings, the time
	 * left is PT0S (zero seconds).
	 */
	public $timeleft;
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @var UUIDType | Universally unique constraint tag. Use UUID to ensure that you only list a particular item
	 * once, particularly if you are listing many items at once. If you add an item and do not
	 * get a response, resend the request with the same UUID. If the item was successfully listed
	 * the first time, you will receive an error message for trying to use a UUID that you have
	 * already used. The error will also include the item ID for the duplicated item and a boolean value
	 * indicating whether the duplicate UUID was sent by the same application. <br><br> We recommend
	 * you use Item.UUID with calls that add item objects (for example, AddItem, AddLiveAuctionItem,
	 * and RelistItem). For calls that modify an existing item, such as ReviseItem, use InvocationID
	 * instead. <br><br> The UUID can only contain digits from 0-9 and letters from A-F and must
	 * be 32 characters long. The UUID value must be unique across all item listings on all sites. <br><br> Also
	 * applicable as input to AddItem and related calls when you list items to Half.com.
	 */
	public $uuid;
	/**
	 * @var VATDetailsType | Container for eBay's VAT features. A business seller can choose to offer an item exclusively
	 * to bidders and buyers that also represent businesses. Only applicable when the item is
	 * listed in a B2B-enabled category (on a site that supports B2B business features). Not applicable
	 * to Half.com.
	 */
	public $vatdetails;
	/**
	 * @var VendorHostedPictureType | In requests, if SiteHostedPicture or VendorHostedPicture are passed in with PictureDetails,
	 * PictureDetails will take precedence. In responses, PictureDetails is returned instead of
	 * SiteHostedPicture or VendorHostedPicture with request version 439 and higher.<br> <br> Previous
	 * behavior (for applications that still use older versions of the schema):<br> <br> VendorHostedPicture
	 * contains the data for a picture associated with an item, when that picture is hosted on
	 * a site of the seller's choice (other than on the eBay site with eBay Picture Services).
	 * The similar field, SiteHostedPicture, contains the data for pictures hosted on the eBay
	 * site.<br> <br> For a listing to be eligible for eBay Express, it must include a picture,
	 * gallery, or stock photo URL. Some categories are exempt from this requirement.<br> <br> Not
	 * applicable to Half.com.
	 */
	public $vendorhostedpicture;
	/**
	 * @var string | The seller is on vacation (as determined by the seller's store preferences) in two cases:
	 * i.) the item is a Store Inventory item and the seller has chosen to hide Store Inventory
	 * items while on vacation, and ii.) the seller has chosen to add a message to listed items
	 * while on vacation. Not applicable to Half.com.
	 */
	public $sellervacationnote;
	/**
	 * @var long | The number of watches placed on this item from buyers' My eBay accounts. Specify IncludeWatchCount
	 * as true in the request. Not applicable to Half.com.
	 */
	public $watchcount;
	/**
	 * @var long | The number of page views for the item. This number is calculated by eBay and cannot be
	 * set via the API. Returned if the hit counter type is BasicStyle, RetroStyle, or HiddenStyle.
	 * For HiddenStyle, HitCount is returned only if the requestor is the item's seller.
	 */
	public $hitcount;
	/**
	 * @var boolean | If false (or omitted): if BuyerRequirements is present, its requirements are to be used;
	 * otherwise, any requirements specified in My eBay are to be used. If true: no requirements
	 * are considered from any source (and if BuyerRequirements is present, it is ignored).
	 */
	public $disablebuyerrequirements;
	/**
	 * @var BuyerRequirementsType | Container for buyer requirements. Individual buyer requirements cannot be modified or added.
	 * The call needs to provide the entire set of buyer requirements to modify or add any. This
	 * is only returned if the caller is the seller. See also the eBay Web site help regarding <a
	 * target="_blank" href="http://pages.ebay.com/help/sell/buyer-requirements.html">Selecting Buyer
	 * Requirements</a>. Not applicable to Half.com.
	 */
	public $buyerrequirements;
	/**
	 * @var BestOfferDetailsType | Container for BestOffer properties associated with the item. Not applicable to Half.com.
	 */
	public $bestofferdetails;
	/**
	 * @var boolean | No longer available. Always returns false.
	 */
	public $anythingpoints;
	/**
	 * @var LiveAuctionDetailsType | Describes the live auction-specific details of a lot item. Applicable to eBay Live Auctions
	 * only.
	 */
	public $liveauctiondetails;
	/**
	 * @var boolean | True if eBay provided a central location as a result of the user not specifying a location.
	 * This typically occurs when the seller specifies PostalCode without Location. Not applicable
	 * to Half.com.
	 */
	public $locationdefaulted;
	/**
	 * @var boolean | Whether checkout for this is to be handled by a Third-Party Checkout application. The counterpart
	 * in the Add family of calls is Item.ThirdPartyCheckout. Not applicable to Half.com.
	 */
	public $thirdpartycheckout;
	/**
	 * @var boolean | Indicates whether the seller's tax table is to be used when applying and calculating taxes.
	 * If true, a tax table must exist for the seller, and the following tags should not be used:
	 * SalesTaxState, SalesTaxPercent, ShippingIncludedInTax.<br> <br> If the seller wants to
	 * charge sales tax for eBay Express sales, the seller needs to create a tax table on eBay
	 * and use it for their listings. As eBay Express payments are handled via a shopping cart,
	 * you will not be able to calculate and add sales tax during your own checkout flow. <br><br> Not
	 * applicable to Half.com.
	 */
	public $usetaxtable;
	/**
	 * @var boolean | Indicates whether the seller has opted the listing into the Get It Fast feature. If GetItFast
	 * is true and if at least one of the domestic shipping services offered by the seller is
	 * an expedited shipping service, every shipping service offered by the seller is considered
	 * a Get It Fast service, and the seller commits to delivering the item to the buyer-selected
	 * shipping service within one day. Also applicable to Half.com (for GetOrders).
	 */
	public $getitfast;
	/**
	 * @var boolean | Applicable for listings in vehicle categories on the US eBay Motors site and eBay Canada
	 * site. (No business effect if specified for other categories or sites, as the Web site will
	 * not display the information to buyers.) If true, the buyer is responsible for vehicle pickup
	 * or shipping. If false, specify vehicle shipping arrangements in the item description. Default
	 * is true. (The description can also include vehicle shipping arrangements when this value
	 * is true.) If the item has bids or ends within 12 hours, you cannot modify this flag. Do
	 * not specify ShippingOption or ShippingDetails.ShippingServiceOptions for vehicle listings. <br><br> If
	 * true and the listing is on the US eBay Motors site, and you want the listing to be visible
	 * on the eBay Canada site, set Item.ShipToLocations to CA. If true and the listing is on
	 * the eBay Canada site , and you want your listing to be visible on the US eBay Motors site,
	 * set Item.ShipToLocations to US. Not applicable to Half.com.
	 */
	public $buyerresponsibleforshipping;
	/**
	 * @var boolean | Applicable to US eBay Motors vehicle listings only. If false, the vehicle will not be considered
	 * for a limited warranty by eBay. If your application lists Motors vehicles, you must provide
	 * the seller with an opportunity to indicate whether the vehicle has not been modified and
	 * is not a special type (e.g., Corvette ZR1). If LimitedWarrantyEligible is passed in, it
	 * means the application has presented the seller with checkboxes to indicate this information.
	 * If true, the seller has verified that the vehicle has not been modified and is not a special
	 * type. If false, the seller has verified that vehicle has been modified or it is a special
	 * type. Passing a value of true does not guarantee that eBay will offer a limited warranty.
	 * It only makes the listing eligible for consideration. See the eBay Web Services Guide for
	 * more information about Motors vehicle listings. Not applicable to Half.com.
	 */
	public $limitedwarrantyeligible;
	/**
	 * @var string | Returns a note from eBay displayed below items in the user's My eBay account. Not applicable
	 * to Half.com.
	 */
	public $ebaynotes;
	/**
	 * @var long | Specifies the number of questions buyers have posted about the item. Not applicable to
	 * Half.com.
	 */
	public $questioncount;
	/**
	 * @var boolean | Whether or not the item is a relisted item. This value is determined by eBay and cannot
	 * be set.
	 */
	public $relisted;
	/**
	 * @var int | Specifies how many of a certain item are available. Not applicable to Half.com.<br> <br> For
	 * GetSearchResultsExpress, only returned when ItemDetails is set to Fine.<br>
	 */
	public $quantityavailable;
	/**
	 * @var SKUType | Identifier defined and used by a seller to identify an item. The seller can use a SKU to
	 * identify one item or use the same SKU for multiple items. Preferable to ApplicationData
	 * for SKUs and inventory tracking. Different sellers can use the same SKUs. This element
	 * can be used by sellers to track complex flows of products and information. This element
	 * preserves a SKU, enabling a seller to obtain it before and after a transaction is created.
	 */
	public $sku;
	/**
	 * @var boolean | Allows eBay to auto-fill some of a listing's Item Specifics (attribute) values based on
	 * the listing's category (or categories). Auto-filling attributes based on a category is
	 * not the same as using Pre-filled Item Information based on a catalog product (see ProductListingDetails).
	 * If true, also specify Item.CategoryMappingAllowed with a value of true. (Alternatively,
	 * you can auto-fill attributes on the client side by using mapping meta-data returned by GetAttributesCS.)
	 * See the eBay Web Services guide for more information. Ignored if the category does not
	 * support auto-filling attributes.<br> <br> If you also pass in attributes in AttributeSetArray,
	 * your values will override any auto-filled values for the same attributes. Once you have
	 * overridden the value of an auto-filled attribute for a given listing, eBay will not auto-fill it
	 * on subsequent ReviseItem requests (even if you remove the overridden value). <br> <br> Not
	 * applicable to Half.com.
	 */
	public $categorybasedattributesprefill;
	/**
	 * @var SearchDetailsType | Container for values that indicate whether a listing uses the Buy It Now feature, whether
	 * a listing is no more than one day old, and whether a listing has an image associated with
	 * it. Not applicable to Half.com.
	 */
	public $searchdetails;
	/**
	 * @var string | The postal code to use as the basis for the proximity search.
	 */
	public $postalcode;
	/**
	 * @var boolean | Indicates whether details about shipping costs and arrangements are specified in the item
	 * description. Not applicable to Half.com.
	 */
	public $shippingtermsindescription;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @var string | An ID that the seller specified when they listed the Half.com item, if any. It can be used
	 * for the seller's SKU. Note that SellerInventoryID is not returned if no ID was specified.
	 * (Note: The SKU field used for eBay.com listings is not applicable to Half.com listings.)
	 */
	public $sellerinventoryid;
	/**
	 * @var PictureDetailsType | Contains the data for a picture associated with an item. Replaces the deprecated SiteHostedPicture
	 * and VendorHostedPicture in the response with compatibility level 439 or greater. With the
	 * future deprecation of SiteHostedPicture and VendorHostedPicture in the input, applications
	 * should use PictureDetails in the input as well. If SiteHostedPicture or VendorHostedPicture
	 * are passed in with PictureDetails, PictureDetails will take precedence.<br> <br> For a
	 * listing to be eligible for eBay Express, it must include a picture, gallery, or stock photo
	 * URL. Some categories are exempt from this requirement. See the eBay Web Services Guide
	 * links below for details.<br> <br> Not applicable to Half.com.
	 */
	public $picturedetails;
	/**
	 * @var DigitalDeliveryDetailsType | Indicates that the listing is a digitally delivered item. For listing calls, specifies
	 * information about the file and how it is delivered. By specifying the digital delivery
	 * fields, the seller agrees that they are the legal rights owner of this digital item or
	 * they have been authorized by the rights owner to sell this digital item.<br> <br> If you
	 * are listing in two categories and you specify this option, both categories must support
	 * digital listings. Call GetCategoryFeatures to determine which categories (if any) support
	 * digitally delivered goods. If a category supports this feature, it does not mean you are
	 * required to use this feature. (It only means that this feature is an option in that category.)<br> <br> If
	 * specified, the item must be sold at a fixed price (basic fixed price or Store Inventory),
	 * and the seller must require PayPal as the only payment method. The seller also needs to
	 * use a verified PayPal Premier or Business account. On some sites, the seller must require
	 * Immediate Payment (see Item.AutoPay) unless the seller is using Third-Party Checkout. Some
	 * sites may require the seller to be VAT registered (see the eBay online help for requirements). For
	 * digital items, the Item Condition attribute (Item Specifics) is not applicable in AttributeSetArray,
	 * AttributeArray, or LookupAttributeArray. If you pass in the item condition, it will be
	 * dropped. Fields that specify the item location, shipping details, payment methods other
	 * than PayPal, gift options, Now and New, and Best Offer are not applicable to digitally
	 * delivered items.<br> <br> Digital listings are not eligible for eBay Express.<br> <br> <b>For
	 * ReviseItem and RelistItem only:</b> When you revise or relist an item, if you change the
	 * listing format (e.g., to Chinese auction) or select a category that does not support this
	 * feature, eBay will remove the digital delivery option from the listing. As a result, you
	 * may need to specify different or additional information in the listing details. To remove
	 * DigitalDeliveryDetails when you modify a listing, use DeletedField. If any quantity of
	 * a multiple quantity digital delivery listing has been sold, the seller cannot remove the
	 * digital delivery option, edit the system requirements, or alter the delivery method information
	 * during the Revise flow. <br> <br> <b>For transaction calls only:</b> Transaction-retrieval
	 * calls like GetItemTransactions and GetSellerTransactions return an (intentionally) empty
	 * DigitalDeliveryDetails node for digital listing purchases. (If the transaction is not for
	 * a digital listing, the node is not returned.)<br> <br> Not supported for Half.com.
	 */
	public $digitaldeliverydetails;
	/**
	 * @var int | Specifies the maximum number of business days the seller commits to for shipping an item
	 * to domestic buyers after receiving a cleared payment. The seller sets this to an integer
	 * value (1, 2, 3, 4, 5, 10, 15, or 20) corresponding to the number of days. To add Get It
	 * Fast to listings, in addition to setting GetItFast to true, DispatchTimeMax must be set
	 * to 1 and the seller must specify at least one qualifying expedited shipping service. GetItem
	 * returns DispatchTimeMax only when shipping service options are specified for the item.
	 */
	public $dispatchtimemax;
	/**
	 * @var boolean | Specifies that Skype-related information is included with an item listing, including, for
	 * example, Skype Voice. Skype-related information provides buttons that enable potential
	 * buyers to contact sellers through Skype. Information about Skype is available at www.Skype.com.
	 * If all of the prerequisites for adding Skype buttons to listings are met (see the eBay
	 * Web Services Guide), you can make communication through Skype available in listings. SkypeEnabled
	 * must be true if SkypeID and SkypeContactOption are specified.
	 */
	public $skypeenabled;
	/**
	 * @var string | Indicates the Skype name of the user. Available if the seller has a Skype account and has
	 * linked it (on the eBay site) with his or her eBay account.
	 */
	public $skypeid;
	/**
	 * @var SkypeOptionCodeType | Regardless of the request version you specify, if you use SkypeOption when listing an item,
	 * it is mapped to the corresponding values of SkypeContactOption.
	 */
	public $skypeoption;
	/**
	 * @var SkypeContactOptionCodeType | Specifies the Skype contact options supported. Requires that SkypeEnabled is set to true.
	 * Available if the seller has a Skype account and has linked it (on the eBay site) with his
	 * or her eBay account.
	 */
	public $skypecontactoption;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow best offers. True means
	 * best offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $bestofferenabled;
	/**
	 * @var boolean | Indicates, when true, that an item is available locally.
	 */
	public $locallisting;
	/**
	 * @var boolean | Only authorized Third-Party Checkout providers can use this flag. <br><br> IMPORTANT: If
	 * you are not authorized to support Third Party Checkout and your application is not the
	 * original listing application, never specify ThirdPartyCheckout or ThirdPartyCheckoutIntegration
	 * in your request (even if you revise a listing that already includes these flags). Otherwise,
	 * the listing may be dropped from Express or you may get unexpected results.<br> <br> A Third-Party
	 * Checkout provider uses this flag in two ways:<br> <br> 1) Set this flag to true to specify
	 * that you consent to use the Checkout notification (or calls like GetSellerTransactions
	 * and GetItemTransactions) to obtain data about eBay Express sales from the item, and to
	 * confirm that buyers will use the Express shopping cart for checkout processing without
	 * being redirected to your Third-Party Checkout site. If ThirdPartyCheckout is true, the
	 * ThirdPartyCheckoutIntegration field must also be true if you want an eligible listing to
	 * be included on eBay Express (and the Third Party Checkout checkout flow will be then be
	 * ignored for Express purchases). See the eBay Web Services Guide.<br> <br> In other words,
	 * assuming the seller and item meet all other eligibility requirements for Express, the seller
	 * opts into Express, and the seller (optionally) subscribes to the Checkout notification:<br> -
	 * If ThirdPartyCheckout == true   and ThirdPartyCheckoutIntegration == true,   the item will
	 * be listed on Express   and Checkout notifications will be sent.<br> - If ThirdPartyCheckout
	 * == true   and ThirdPartyCheckoutIntegration == omitted or false,   the item will be disqualified
	 * for Express   and no Checkout notification will be sent.<br> - If ThirdPartyCheckout ==
	 * omitted or false,   and ThirdPartyCheckoutIntegration == true,   the item will be listed
	 * on Express   and Checkout notifications will be sent.<br> - If ThirdPartyCheckout == omitted
	 * or false,  and ThirdPartyCheckoutIntegration == omitted or false,  the item will be listed
	 * on Express   but no Checkout notifications will be sent.<br>   <br> 2) If you subscribe
	 * to the Checkout notification, set this flag to true to enable Checkout notifications for
	 * a particular listing. These notifications can be sent for any transaction created from
	 * the listing, regardless of whether the listing is included on Express and regardless of
	 * the value of ThirdPartyCheckout. Checkout notifications are not sent if ThirdPartyCheckoutIntegration
	 * is false.<br> <br> Returned only if true for a listing.<br> <br> Not applicable to Half.com.<br> <br> To
	 * determine whether an item was listed on Express, call GetItem and check the value of Item.ListingDetails.ExpressListing. To
	 * determine whether an item sold on Express, use a transaction call like GetItemTransactions
	 * (or the Checkout notification), and check the value of TransactionPlatform.
	 */
	public $thirdpartycheckoutintegration;
	/**
	 * @var boolean | Preference to opt out an individual fixed price, auction with Buy It Now, or Store Inventory
	 * item from eBay Express. Specify as input when listing an item to indicate that the item should
	 * not be listed on eBay Express. By default, an item is opted in unless the seller has configured
	 * their user preferences to opt all items out of Express (see GetUserPreferences). So, if
	 * the seller and item qualify for eBay Express, the item will be made available on the Express
	 * site unless you set this flag to true to opt out.<br> <br> ExpressOptOut has no effect if
	 * the seller opts out in their user preferences. Also, you cannot set ExpressOptOut to false
	 * to force an ineligible item to be included on Express.<br> <br> This value is ignored when
	 * ListingType=Express.<br> <br> To determine whether an item was listed on Express, call
	 * GetItem and check the value of Item.ListingDetails.ExpressListing. To determine whether
	 * an item sold on Express, use a transaction call like GetItemTransactions (or the Checkout
	 * notification), and check the value of TransactionPlatform.
	 */
	public $expressoptout;
	/**
	 * @var ListingCheckoutRedirectPreferenceType | ProStores listing level preferences regarding the store to which checkout should be redirected
	 * for the listing if ThirdPartyCheckout is true.
	 */
	public $listingcheckoutredirectpreference;
	/**
	 * @var ExpressDetailsType | Additional item details that only appear in eBay Express search results. In GetSearchResultsExpress,
	 * only returned when ItemDetails is set to Fine.
	 */
	public $expressdetails;
	/**
	 * @var AddressType | Contact information for sellers using the Classified Ad format for eBay Motors vehicles
	 * categories. To remove seller contact information when revising or relisting an item, use DeletedField.
	 * The seller contact details for the primary and secondary phone numbers cannot be deleted
	 * individually. To delete the secondary phone number, for example, you must delete all of
	 * the secondary phone fields:<br> Item.SellerContactDetails.Phone2AreaOrCityCode<br> Item.SellerContactDetails.Phone2CountryCode<br> Item.SellerContactDetails.Phone2CountryPrefix<br> Item.SellerContactDetails.Phone2LocalNumber
	 */
	public $sellercontactdetails;
	/**
	 * @var long | The number of questions asked about this item. Applies to eBay Motors Pro applications
	 * only.
	 */
	public $totalquestioncount;
	/**
	 * @var boolean | Some listings on the eBay platform originate from eBay affiliates. Depending on the relationship
	 * the affiliate has with eBay, there are times when the affiliate retains ownership of the
	 * listing. When this occurs the representation of the listing on eBay is considered a proxy
	 * item.  Proxy items can only be edited using API requests from the applications that originally
	 * listed them.
	 */
	public $proxyitem;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setApplicationData($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ApplicationData');
        }
        $this->applicationdata = (int)$val;
	}

	/**
	 * @param AttributeSetArrayType $val
	 * @throws Exception
	 */
	public function setAttributeSetArray($val)
	{
        $this->attributesetarray = (int)$val;
	}

	/**
	 * @param AttributeArrayType $val
	 * @throws Exception
	 */
	public function setAttributeArray($val)
	{
        $this->attributearray = (int)$val;
	}

	/**
	 * @param LookupAttributeArrayType $val
	 * @throws Exception
	 */
	public function setLookupAttributeArray($val)
	{
        $this->lookupattributearray = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setApplyShippingDiscount($val)
	{
        $this->applyshippingdiscount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAutoPay($val)
	{
        $this->autopay = (int)$val;
	}

	/**
	 * @param PaymentDetailsType $val
	 * @throws Exception
	 */
	public function setPaymentDetails($val)
	{
        $this->paymentdetails = (int)$val;
	}

	/**
	 * @param BiddingDetailsType $val
	 * @throws Exception
	 */
	public function setBiddingDetails($val)
	{
        $this->biddingdetails = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMotorsGermanySearchable($val)
	{
        $this->motorsgermanysearchable = (int)$val;
	}

	/**
	 * @param BuyerProtectionCodeType $val
	 * @throws Exception
	 */
	public function setBuyerProtection($val)
	{
        $this->buyerprotection = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBuyItNowPrice($val)
	{
        $this->buyitnowprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCategoryMappingAllowed($val)
	{
        $this->categorymappingallowed = (int)$val;
	}

	/**
	 * @param CharityType $val
	 * @throws Exception
	 */
	public function setCharity($val)
	{
        $this->charity = (int)$val;
	}

	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setCountry($val)
	{
        $this->country = (int)$val;
	}

	/**
	 * @param CrossPromotionsType $val
	 * @throws Exception
	 */
	public function setCrossPromotion($val)
	{
        $this->crosspromotion = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param DescriptionReviseModeCodeType $val
	 * @throws Exception
	 */
	public function setDescriptionReviseMode($val)
	{
        $this->descriptionrevisemode = (int)$val;
	}

	/**
	 * @param DistanceType $val
	 * @throws Exception
	 */
	public function setDistance($val)
	{
        $this->distance = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFinanceOfferID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FinanceOfferID');
        }
        $this->financeofferid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setGiftIcon($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->gifticon = (int)$val;
	}

	/**
	 * @param GiftServicesCodeType $val
	 * @throws Exception
	 */
	public function setGiftServices($val)
	{
        $this->giftservices = (int)$val;
	}

	/**
	 * @param HitCounterCodeType $val
	 * @throws Exception
	 */
	public function setHitCounter($val)
	{
        $this->hitcounter = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param ListingDetailsType $val
	 * @throws Exception
	 */
	public function setListingDetails($val)
	{
        $this->listingdetails = (int)$val;
	}

	/**
	 * @param ListingDesignerType $val
	 * @throws Exception
	 */
	public function setListingDesigner($val)
	{
        $this->listingdesigner = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setListingDuration($val)
	{
        $this->listingduration = (int)$val;
	}

	/**
	 * @param ListingEnhancementsCodeType $val
	 * @throws Exception
	 */
	public function setListingEnhancement($val)
	{
        $this->listingenhancement = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setListingType($val)
	{
        $this->listingtype = (int)$val;
	}

	/**
	 * @param ListingSubtypeEnum $val
	 * @throws Exception
	 */
	public function setListingSubtype($val)
	{
        $this->listingsubtype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocation($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Location');
        }
        $this->location = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLotSize($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->lotsize = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setNowAndNew($val)
	{
        $this->nowandnew = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPartnerCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PartnerCode');
        }
        $this->partnercode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPartnerName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PartnerName');
        }
        $this->partnername = (int)$val;
	}

	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethods($val)
	{
        $this->paymentmethods = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPayPalEmailAddress($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PayPalEmailAddress');
        }
        $this->paypalemailaddress = (int)$val;
	}

	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setPrimaryCategory($val)
	{
        $this->primarycategory = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPrivateListing($val)
	{
        $this->privatelisting = (int)$val;
	}

	/**
	 * @param ProductListingDetailsType $val
	 * @throws Exception
	 */
	public function setProductListingDetails($val)
	{
        $this->productlistingdetails = (int)$val;
	}

	/**
	 * @param ProximitySearchDetailsType $val
	 * @throws Exception
	 */
	public function setProximitySearchDetails($val)
	{
        $this->proximitysearchdetails = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantity($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantity = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPrivateNotes($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PrivateNotes');
        }
        $this->privatenotes = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRegionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RegionID');
        }
        $this->regionid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRelistLink($val)
	{
        $this->relistlink = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setReservePrice($val)
	{
        $this->reserveprice = (int)$val;
	}

	/**
	 * @param ReviseStatusType $val
	 * @throws Exception
	 */
	public function setReviseStatus($val)
	{
        $this->revisestatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setScheduleTime($val)
	{
        $this->scheduletime = (int)$val;
	}

	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setSecondaryCategory($val)
	{
        $this->secondarycategory = (int)$val;
	}

	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setFreeAddedCategory($val)
	{
        $this->freeaddedcategory = (int)$val;
	}

	/**
	 * @param SiteHostedPictureType $val
	 * @throws Exception
	 */
	public function setSiteHostedPicture($val)
	{
        $this->sitehostedpicture = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setSeller($val)
	{
        $this->seller = (int)$val;
	}

	/**
	 * @param SellingStatusType $val
	 * @throws Exception
	 */
	public function setSellingStatus($val)
	{
        $this->sellingstatus = (int)$val;
	}

	/**
	 * @param ShippingOptionCodeType $val
	 * @throws Exception
	 */
	public function setShippingOption($val)
	{
        $this->shippingoption = (int)$val;
	}

	/**
	 * @param ShippingDetailsType $val
	 * @throws Exception
	 */
	public function setShippingDetails($val)
	{
        $this->shippingdetails = (int)$val;
	}

	/**
	 * @param ShippingRegionCodeType $val
	 * @throws Exception
	 */
	public function setShippingRegions($val)
	{
        $this->shippingregions = (int)$val;
	}

	/**
	 * @param ShippingTermsCodeType $val
	 * @throws Exception
	 */
	public function setShippingTerms($val)
	{
        $this->shippingterms = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShipToLocations($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShipToLocations');
        }
        $this->shiptolocations = (int)$val;
	}

	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setStartPrice($val)
	{
        $this->startprice = (int)$val;
	}

	/**
	 * @param StorefrontType $val
	 * @throws Exception
	 */
	public function setStorefront($val)
	{
        $this->storefront = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSubTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SubTitle');
        }
        $this->subtitle = (int)$val;
	}

	/**
	 * @param duration $val
	 * @throws Exception
	 */
	public function setTimeLeft($val)
	{
        $this->timeleft = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}

	/**
	 * @param UUIDType $val
	 * @throws Exception
	 */
	public function setUUID($val)
	{
        $this->uuid = (int)$val;
	}

	/**
	 * @param VATDetailsType $val
	 * @throws Exception
	 */
	public function setVATDetails($val)
	{
        $this->vatdetails = (int)$val;
	}

	/**
	 * @param VendorHostedPictureType $val
	 * @throws Exception
	 */
	public function setVendorHostedPicture($val)
	{
        $this->vendorhostedpicture = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerVacationNote($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerVacationNote');
        }
        $this->sellervacationnote = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setWatchCount($val)
	{
        $this->watchcount = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setHitCount($val)
	{
        $this->hitcount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDisableBuyerRequirements($val)
	{
        $this->disablebuyerrequirements = (int)$val;
	}

	/**
	 * @param BuyerRequirementsType $val
	 * @throws Exception
	 */
	public function setBuyerRequirements($val)
	{
        $this->buyerrequirements = (int)$val;
	}

	/**
	 * @param BestOfferDetailsType $val
	 * @throws Exception
	 */
	public function setBestOfferDetails($val)
	{
        $this->bestofferdetails = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAnythingPoints($val)
	{
        $this->anythingpoints = (int)$val;
	}

	/**
	 * @param LiveAuctionDetailsType $val
	 * @throws Exception
	 */
	public function setLiveAuctionDetails($val)
	{
        $this->liveauctiondetails = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocationDefaulted($val)
	{
        $this->locationdefaulted = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setThirdPartyCheckout($val)
	{
        $this->thirdpartycheckout = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUseTaxTable($val)
	{
        $this->usetaxtable = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setGetItFast($val)
	{
        $this->getitfast = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBuyerResponsibleForShipping($val)
	{
        $this->buyerresponsibleforshipping = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLimitedWarrantyEligible($val)
	{
        $this->limitedwarrantyeligible = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEBayNotes($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for eBayNotes');
        }
        $this->ebaynotes = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setQuestionCount($val)
	{
        $this->questioncount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRelisted($val)
	{
        $this->relisted = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantityAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantityavailable = (int)$val;
	}

	/**
	 * @param SKUType $val
	 * @throws Exception
	 */
	public function setSKU($val)
	{
        $this->sku = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCategoryBasedAttributesPrefill($val)
	{
        $this->categorybasedattributesprefill = (int)$val;
	}

	/**
	 * @param SearchDetailsType $val
	 * @throws Exception
	 */
	public function setSearchDetails($val)
	{
        $this->searchdetails = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PostalCode');
        }
        $this->postalcode = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingTermsInDescription($val)
	{
        $this->shippingtermsindescription = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerInventoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerInventoryID');
        }
        $this->sellerinventoryid = (int)$val;
	}

	/**
	 * @param PictureDetailsType $val
	 * @throws Exception
	 */
	public function setPictureDetails($val)
	{
        $this->picturedetails = (int)$val;
	}

	/**
	 * @param DigitalDeliveryDetailsType $val
	 * @throws Exception
	 */
	public function setDigitalDeliveryDetails($val)
	{
        $this->digitaldeliverydetails = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDispatchTimeMax($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->dispatchtimemax = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSkypeEnabled($val)
	{
        $this->skypeenabled = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSkypeID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SkypeID');
        }
        $this->skypeid = (int)$val;
	}

	/**
	 * @param SkypeOptionCodeType $val
	 * @throws Exception
	 */
	public function setSkypeOption($val)
	{
        $this->skypeoption = (int)$val;
	}

	/**
	 * @param SkypeContactOptionCodeType $val
	 * @throws Exception
	 */
	public function setSkypeContactOption($val)
	{
        $this->skypecontactoption = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferEnabled($val)
	{
        $this->bestofferenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalListing($val)
	{
        $this->locallisting = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setThirdPartyCheckoutIntegration($val)
	{
        $this->thirdpartycheckoutintegration = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressOptOut($val)
	{
        $this->expressoptout = (int)$val;
	}

	/**
	 * @param ListingCheckoutRedirectPreferenceType $val
	 * @throws Exception
	 */
	public function setListingCheckoutRedirectPreference($val)
	{
        $this->listingcheckoutredirectpreference = (int)$val;
	}

	/**
	 * @param ExpressDetailsType $val
	 * @throws Exception
	 */
	public function setExpressDetails($val)
	{
        $this->expressdetails = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setSellerContactDetails($val)
	{
        $this->sellercontactdetails = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setTotalQuestionCount($val)
	{
        $this->totalquestioncount = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProxyItem($val)
	{
        $this->proxyitem = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ItemTypeFilterCodeType
{
	const AUCTIONITEMSONLY                = 'AuctionItemsOnly';
	const FIXEDPRICEDITEM                 = 'FixedPricedItem';
	const ALLITEMS                        = 'AllItems';
	const STOREINVENTORYONLY              = 'StoreInventoryOnly';
	const FIXEDPRICEEXCLUDESTOREINVENTORY = 'FixedPriceExcludeStoreInventory';
	const EXCLUDESTOREINVENTORY           = 'ExcludeStoreInventory';
	const ALLITEMTYPES                    = 'AllItemTypes';
	const ALLFIXEDPRICEITEMTYPES          = 'AllFixedPriceItemTypes';
	const CUSTOMCODE                      = 'CustomCode';
	const CLASSIFIEDITEMSONLY             = 'ClassifiedItemsOnly';
}

/**
 * LabelType
 * Applicable when working with Pre-filled Item Information (Catalogs) functionality. The label
 * to display when presenting the attribute to a user. Not necessarily the same as the attribute's
 * label as defined in the characteristic set (i.e., the label could be overridden by the catalog).
 */
class LabelType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var boolean
	 */
	public $visible;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setVisible($val)
	{
        $this->visible = (int)$val;
	}
}

/**
 * ListingAnalyzerRecommendationsType
 * Contains results returned from the Listing Analyzer recommendation engine.
 */
class ListingAnalyzerRecommendationsType
{
	/**
	 * @var ListingTipArrayType | A collection of tips returned from the Listing Analyzer recommendation engine.
	 */
	public $listingtiparray;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ListingTipArrayType $val
	 * @throws Exception
	 */
	public function setListingTipArray($val)
	{
        $this->listingtiparray = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ListingCheckoutRedirectPreferenceType
 * ProStores listing level preferences.
 */
class ListingCheckoutRedirectPreferenceType
{
	/**
	 * @var string | The name of the store, if Item.ThirdPartyCheckout is true. To remove this value when revising
	 * or relisting an item, use DeletedField.
	 */
	public $prostoresstorename;
	/**
	 * @var string | The username associated with the store.  Returned only if the parent container is returned.
	 */
	public $sellerthirdpartyusername;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProStoresStoreName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProStoresStoreName');
        }
        $this->prostoresstorename = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerThirdPartyUsername($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerThirdPartyUsername');
        }
        $this->sellerthirdpartyusername = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ListingDesignerType
 * Contains the IDs for the Listing Designer theme and template (if either are used) associated
 * with an item, which can optionally be used to enhance the appearance of the item's description.
 * Cannot be used with Photo Display. With compatibility levels 439 or higher, specified in
 * PictureDetails.PhotoDisplay. With lower compatibility levels, specified in SiteHostedPictureType.PhotoDisplay
 *        or VendorHostedPictureType.PhotoDisplay.
 */
class ListingDesignerType
{
	/**
	 * @var int | Identifies the Layout template to use when displaying the            item's description.
	 * Call GetDescriptionTemplates for valid IDs.            Set to false in GetDescriptionTemplates
	 * (or do not specify            LayoutID) to get the standard layout. If a Listing Designer
	 *            layout is used (except standard layout), PhotoDisplayType must            be
	 * false (or not be specified).            When relisting an item, LayoutID is removed from
	 * the listing if you specify             ListingDesignerType without LayoutID. Alternatively,
	 * to remove this value             when revising or relisting an item, use DeletedField.
	 */
	public $layoutid;
	/**
	 * @var boolean | If true, indicates that the item's picture will be enlarged to fit description
	 *    of the item.
	 */
	public $optimalpicturesize;
	/**
	 * @var int | Unique identifier for each theme in this group. There is at least one theme in a theme
	 * group.
	 */
	public $themeid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLayoutID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->layoutid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setOptimalPictureSize($val)
	{
        $this->optimalpicturesize = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setThemeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->themeid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ListingDetailsType
 * Various details about a listing. Some of the details are calculated or derived after an
 * item is listed. The details in this type include the start and end time and the converted
 * (localized) prices. The details in this type also include input values applicable to the
 * Best Offer feature. Additional details in this type include flags indicating if a seller specified
 * fields whose values are not visible to the requesting user.
 */
class ListingDetailsType
{
	/**
	 * @var boolean | If true, the item is listed in a Mature category. Users must accept the Mature Category
	 * agreement on the eBay site to retrieve items listed in Mature categories. (Users do not
	 * need to sign this agreement to be able to list items in Mature Categories.)
	 */
	public $adult;
	/**
	 * @var boolean | Applicable for Real Estate auctions only. If true, buyers and sellers are expected to follow
	 * through on the sale. If false, bids for the Real Estate auction are only expressions of
	 * interest.
	 */
	public $bindingauction;
	/**
	 * @var boolean | Indicates whether the user as a seller has the option set to default new item listings
	 * to go through checkout. (Sellers enable this property in their My eBay user preferences
	 * on the eBay site.)
	 */
	public $checkoutenabled;
	/**
	 * @var AmountType | Converted value of the BuyItNowPrice in the currency of the site that returned this response. For
	 * active items, refresh this value every 24 hours to pick up the current conversion rates.
	 */
	public $convertedbuyitnowprice;
	/**
	 * @var AmountType | Converted value of the StartPrice in the currency of the site that returned this response. For
	 * active items, refresh this value every 24 hours to pick up the current conversion rates.
	 */
	public $convertedstartprice;
	/**
	 * @var AmountType | Converted value of the ReservePrice in the currency of the site that returned this response.
	 * Only returned for listings with a reserve price when the requesting user is the listing's
	 * seller. For active items, refresh this value every 24 hours to pick up the current conversion
	 * rates. Not applicable to Fixed Price and Store Inventory listings.
	 */
	public $convertedreserveprice;
	/**
	 * @var boolean | If true, the seller specified a value in ReservePrice.
	 */
	public $hasreserveprice;
	/**
	 * @var string | Obsolete: the use of regions for locating items is being phased out and has been replaced
	 * on most sites by distance-based searching and searches by location. Some sites, such as
	 * the China site, still use region. Although all sites will still allow you to specify Item.RegionID
	 * in AddItem when listing an item, only those sites that support the use of regions will return
	 * RegionName in the response for GetItem, and the region information will not appear on or
	 * be used by the web site. For sites that no longer support the use of regions, use Item.PostalCode
	 * and Item.Location instead.
	 */
	public $regionname;
	/**
	 * @var ItemIDType | Indicates the new item ID for a re-listed item. When an item is re-listed, the item ID
	 * for the new (re-list) item is added to the old (expired) listing to provide buyers a means
	 * to navigate to the new listing. This value only appears when the old listing is retrieved. Output
	 * only.
	 */
	public $relisteditemid;
	/**
	 * @var ItemIDType | The item ID for the original listing from which a second chance offer is made. This value
	 * is only returned when the data for the second chance offer listing is retrieved. Output
	 * only.
	 */
	public $secondchanceoriginalitemid;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var dateTime | Time stamp (in GMT) when the listing is scheduled to end (calculated based on the values
	 * of StartTime and ListingDuration) or the actual end time if the item has ended.
	 */
	public $endtime;
	/**
	 * @var anyURI | The URL of the Web page where a user can view the listing. On the US site, this is called
	 * the "View Item" page. If you enabled affiliate tracking in a search-related call (for example,
	 * if you used the AffiliateTrackingDetails container in an applicable call), ViewItemURL
	 * contains a string that includes affiliate tracking information (see the <a href="http://affiliates.ebay.com/"
	 * target="_blank">eBay Affiliate Program</a>). For GetSearchResultsExpress, the ViewItemURL
	 * field is returned only if you specified AffiliateTrackingDetails in the request.
	 */
	public $viewitemurl;
	/**
	 * @var boolean | Indicates whether the item has any unanswered questions. Use GetMemberMessages to retrieve
	 * unanswered questions for the item if this flag indicates that there are any.
	 */
	public $hasunansweredquestions;
	/**
	 * @var boolean | Indicates whether the item has any publicly displayed messages. Use GetMemberMessages to
	 * retrieve public messages for the item if this flag indicates that there are any.
	 */
	public $haspublicmessages;
	/**
	 * @var boolean | Indicates whether, for a Dutch Auction, there is a Buy It Now option. Germany site (site
	 * ID 77) and China site (site ID 223) only.
	 */
	public $buyitnowavailable;
	/**
	 * @var SellerBusinessCodeType | Type of seller account. This value is returned if the German site (site ID 77) or eBay
	 * Motors site (site ID 100) is specified.
	 */
	public $sellerbusinesstype;
	/**
	 * @var AmountType | Specifies the minimum acceptable best offer price. If a buyer submits a best offer that
	 * is below this value, the offer is automatically declined by the seller. Applies only to
	 * items listed in categories that support the Best Offer Auto-Decline feature. Best Offer
	 * must be enabled for the item, and only the seller who listed the item can see this value. To
	 * remove this value when revising or relisting an item, use DeletedField.
	 */
	public $minimumbestofferprice;
	/**
	 * @var string | Specifies the message sent from the seller to the buyer when a submitted best offer is
	 * automatically declined by the seller. A best offer is automatically declined if it does
	 * not meet the minimum acceptable best offer price specified by the seller with MinimumBestOfferPrice.
	 * Applies only to items listed in categories that support the Best Offer Auto-Decline feature.
	 * Best Offer must be enabled for the item. To remove this value when revising or relisting
	 * an item, use DeletedField.
	 */
	public $minimumbestoffermessage;
	/**
	 * @var string | Specifies a distance (in miles) used as the radius of the area about the supplied postal
	 * code that constitutes the local market. Use GetCategoryFeatures to determine the local
	 * listing distances supported by a given site, category, and Local Market subscription level.
	 */
	public $locallistingdistance;
	/**
	 * @var boolean | If true, the item is qualified for the eBay Express site associated with the item's listing
	 * site (US or Germany).<br> <br> For fixed-price, Store Inventory, and Express format listings, this
	 * means the item appears on Express. <br> <br> For Chinese auction listings with Buy It Now,
	 * this means the item appears on Express as long as it has no bids and doesn't end within
	 * 12 hours. See Item.SellingStatus.BidCount to determine whether an auction with Buy It Now
	 * has bids or not, and see EndTime or Item.TimeLeft to to determine how soon the listing
	 * ends.
	 */
	public $expresslisting;
	/**
	 * @var ExpressItemRequirementsType | Contains details about why an item does or doesn't qualify as an Express listing. Only
	 * returned when IncludeExpressRequirements is true the request. Whether a child field is
	 * returned can depend on whether the field currently applies to the site on which the item
	 * would be listed. Whether a child field is returned also can depend on whether its value
	 * would be true or false, or the order of eligibility precedence. The item requirements are
	 * assessed in this order:<br> - SellerExpressEligible<br> - ExpressOptOut<br> - ExpressApproved<br> -
	 * All other settings
	 */
	public $expressitemrequirements;
	/**
	 * @var ItemIDType | Indicates the item ID of the original item listing from which a Transaction Confirmation
	 * Request (TCR) was created. This value is only returned when the data for a TCR is retrieved.
	 */
	public $tcroriginalitemid;
	/**
	 * @var anyURI | This URL takes you to the same View Item page as ViewItemURL, but this URL is optimized
	 * to support natural search. That is, this URL is designed to make items on eBay easier to
	 * find via popular Internet search engines. For example, this URL specifies the item title,
	 * and it is optimized for natural search: "_W0QQ" is like "?" (question mark), "QQ" is like
	 * "&" (ampersand), and "Z" is like "=" (equals sign). <br> <br> <span class="tablenote"><b>Note</b>: This
	 * URL may include additional query parameters that don't appear in ViewItemURL and vice versa. You
	 * should not modify the query syntax.  For example, eBay won't recognize the URL if you change
	 * QQ to ?.</span>
	 */
	public $viewitemurlfornaturalsearch;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAdult($val)
	{
        $this->adult = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBindingAuction($val)
	{
        $this->bindingauction = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCheckoutEnabled($val)
	{
        $this->checkoutenabled = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedBuyItNowPrice($val)
	{
        $this->convertedbuyitnowprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedStartPrice($val)
	{
        $this->convertedstartprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedReservePrice($val)
	{
        $this->convertedreserveprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasReservePrice($val)
	{
        $this->hasreserveprice = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRegionName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RegionName');
        }
        $this->regionname = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setRelistedItemID($val)
	{
        $this->relisteditemid = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setSecondChanceOriginalItemID($val)
	{
        $this->secondchanceoriginalitemid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setEndTime($val)
	{
        $this->endtime = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setViewItemURL($val)
	{
        $this->viewitemurl = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasUnansweredQuestions($val)
	{
        $this->hasunansweredquestions = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasPublicMessages($val)
	{
        $this->haspublicmessages = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBuyItNowAvailable($val)
	{
        $this->buyitnowavailable = (int)$val;
	}

	/**
	 * @param SellerBusinessCodeType $val
	 * @throws Exception
	 */
	public function setSellerBusinessType($val)
	{
        $this->sellerbusinesstype = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinimumBestOfferPrice($val)
	{
        $this->minimumbestofferprice = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMinimumBestOfferMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MinimumBestOfferMessage');
        }
        $this->minimumbestoffermessage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocalListingDistance($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LocalListingDistance');
        }
        $this->locallistingdistance = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressListing($val)
	{
        $this->expresslisting = (int)$val;
	}

	/**
	 * @param ExpressItemRequirementsType $val
	 * @throws Exception
	 */
	public function setExpressItemRequirements($val)
	{
        $this->expressitemrequirements = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setTCROriginalItemID($val)
	{
        $this->tcroriginalitemid = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setViewItemURLForNaturalSearch($val)
	{
        $this->viewitemurlfornaturalsearch = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ListingDurationDefinitionType
 * A container node for a set of durations that apply to a certain listing type.
 */
class ListingDurationDefinitionType
{
	/**
	 * @var token | Specifies the length of time an auction can be open, in days. The allowed durations vary
	 * according to the type of listing. The value GTC means Good Til Canceled.
	 */
	public $duration;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var int
	 */
	public $durationsetid;
	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setDuration($val)
	{
        $this->duration = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDurationSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->durationsetid = (int)$val;
	}
}

/**
 * ListingDurationDefinitionsType
 * A container node for sets of durations, each set describing the durations allowed for one
 * listing type.
 */
class ListingDurationDefinitionsType
{
	/**
	 * @var ListingDurationDefinitionType | Specifies the ID of a set of default durations for a certain type of listing. The actual
	 * duration values are returned within the FeatureDefinitions node. The type of listing is
	 * named in the type attribute.
	 */
	public $listingduration;
	/**
	 * @var int | The version of the response payload schema. Indicates the version of the schema that eBay
	 * used to process the request. See "Standard Data for All Calls" in the eBay Web Services
	 * Guide for information on using the response version when troubleshooting "CustomCode" values
	 * that appear in the response.
	 */
	public $version;
	/**
	 * @param ListingDurationDefinitionType $val
	 * @throws Exception
	 */
	public function setListingDuration($val)
	{
        $this->listingduration = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setVersion($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->version = (int)$val;
	}
}

/**
 * ListingDurationReferenceType
 * Identifies the type of listing as an attribute on the ListingDuration node.
 */
class ListingDurationReferenceType
{
	/**
	 * @var int
	 */
	public $_;
	/**
	 * @var ListingTypeCodeType
	 */
	public $type;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function set($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->_ = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}
}

class ListingEnhancementsCodeType
{
	const BORDER                 = 'Border';
	const BOLDTITLE              = 'BoldTitle';
	const FEATURED               = 'Featured';
	const HIGHLIGHT              = 'Highlight';
	const HOMEPAGEFEATURED       = 'HomePageFeatured';
	const PROPACKBUNDLE          = 'ProPackBundle';
	const BASICUPGRADEPACKBUNDLE = 'BasicUpgradePackBundle';
	const VALUEPACKBUNDLE        = 'ValuePackBundle';
	const PROPACKPLUSBUNDLE      = 'ProPackPlusBundle';
	const CUSTOMCODE             = 'CustomCode';
}

class ListingFlowCodeType
{
	const ADDITEM    = 'AddItem';
	const REVISEITEM = 'ReviseItem';
	const RELISTITEM = 'RelistItem';
	const CUSTOMCODE = 'CustomCode';
}

class ListingStatusCodeType
{
	const ACTIVE     = 'Active';
	const ENDED      = 'Ended';
	const COMPLETED  = 'Completed';
	const CUSTOMCODE = 'CustomCode';
	const CUSTOM     = 'Custom';
}

class ListingSubtypeEnum
{
	const CLASSIFIEDAD = 'ClassifiedAd';
}

/**
 * ListingTipArrayType
 * (out) Contains a list of tips on improving a listing's details, if any.
 */
class ListingTipArrayType
{
	/**
	 * @var ListingTipType | An individual tip on improving a listing's details.
	 */
	public $listingtip;
	/**
	 * @param ListingTipType $val
	 * @throws Exception
	 */
	public function setListingTip($val)
	{
        $this->listingtip = (int)$val;
	}
}

/**
 * ListingTipFieldType
 * (out) Identifies the item field that the tip relates to.
 */
class ListingTipFieldType
{
	/**
	 * @var string | Identifier associated with the item field. Primarily for internal use. This value may change
	 * over time.
	 */
	public $listingtipfieldid;
	/**
	 * @var string | Related text that appears near a field or at the top of the section within which
	 *      the field appears in the selling flow.
	 */
	public $fieldtip;
	/**
	 * @var string | A label used to preface the current value of a field. For example,            "Current
	 * value" would be the CurrentValueText in "Current value: 25".            If no label exists,
	 * this element is not returned.
	 */
	public $currentfieldtext;
	/**
	 * @var string | Current value of the field (in the listing or in the candidate item) or meta-data about
	 * the value.             For example, if the tip is recommending a longer item title, the
	 * CurrentFieldValue might specify             the current length of the title. If no current
	 * value is available, this information is not returned.
	 */
	public $currentfieldvalue;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setListingTipFieldID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ListingTipFieldID');
        }
        $this->listingtipfieldid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFieldTip($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FieldTip');
        }
        $this->fieldtip = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCurrentFieldText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CurrentFieldText');
        }
        $this->currentfieldtext = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCurrentFieldValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CurrentFieldValue');
        }
        $this->currentfieldvalue = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ListingTipMessageType
 * (out) Contains the message portion of a listing tip that is returned by the Listing Analyzer
 * engine.
 */
class ListingTipMessageType
{
	/**
	 * @var string | Identifier for the tip message. Primarily for internal use. This value may change over
	 * time.
	 */
	public $listingtipmessageid;
	/**
	 * @var string | Brief version of the tip message.
	 */
	public $shortmessage;
	/**
	 * @var string | Detailed version of the tip message.
	 */
	public $longmessage;
	/**
	 * @var string | Path part of a URL for a "Learn More" link that points to a relevant eBay Web site online
	 * help page.            The path is relative to http://pages.ebay.XX, where XX is the 2-letter
	 * site code            (e.g., http://pages.ebay.de for the eBay Germany site). Applications
	 * should append the            URL to the appropriate path for the user's site.
	 */
	public $helpurlpath;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setListingTipMessageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ListingTipMessageID');
        }
        $this->listingtipmessageid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShortMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShortMessage');
        }
        $this->shortmessage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLongMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LongMessage');
        }
        $this->longmessage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setHelpURLPath($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for HelpURLPath');
        }
        $this->helpurlpath = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ListingTipType
 * (out) A tip on improving a listing's details. Tips are returned from the Listing Analyzer
 * engine.
 */
class ListingTipType
{
	/**
	 * @var string | Identifier for the tip. Primarily for internal use. This value may change over time.
	 */
	public $listingtipid;
	/**
	 * @var int | A number ranging from 0 to 10000 (inclusive), with 10000 having the highest priority.
	 */
	public $priority;
	/**
	 * @var ListingTipMessageType | Contains the data for one message.
	 */
	public $message;
	/**
	 * @var ListingTipFieldType | The name of the field that is being modified. Use only first-level properties. The first
	 * letter of each node in the field is case insensitive, so item.startPrice is the same as
	 * Item.StartPrice. In RelistItem, this is required if you are also modifying fields of the
	 * item that you are relisting.
	 */
	public $field;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setListingTipID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ListingTipID');
        }
        $this->listingtipid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPriority($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->priority = (int)$val;
	}

	/**
	 * @param ListingTipMessageType $val
	 * @throws Exception
	 */
	public function setMessage($val)
	{
        $this->message = (int)$val;
	}

	/**
	 * @param ListingTipFieldType $val
	 * @throws Exception
	 */
	public function setField($val)
	{
        $this->field = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ListingTypeCodeType
{
	const UNKNOWN          = 'Unknown';
	const CHINESE          = 'Chinese';
	const DUTCH            = 'Dutch';
	const LIVE             = 'Live';
	const AUCTION          = 'Auction';
	const ADTYPE           = 'AdType';
	const STORESFIXEDPRICE = 'StoresFixedPrice';
	const PERSONALOFFER    = 'PersonalOffer';
	const FIXEDPRICEITEM   = 'FixedPriceItem';
	const HALF             = 'Half';
	const LEADGENERATION   = 'LeadGeneration';
	const EXPRESS          = 'Express';
	const CUSTOMCODE       = 'CustomCode';
}

/**
 * LiveAuctionApprovalStatusArrayType
 * Contains the results of the request for each bidder.
 */
class LiveAuctionApprovalStatusArrayType
{
	/**
	 * @var LiveAuctionApprovalStatusType | Indicates the current approval status of a bidder.
	 */
	public $liveauctionstatus;
	/**
	 * @param LiveAuctionApprovalStatusType $val
	 * @throws Exception
	 */
	public function setLiveAuctionStatus($val)
	{
        $this->liveauctionstatus = (int)$val;
	}
}

/**
 * LiveAuctionApprovalStatusType
 * The approval status of a user who wants to bid on a live auction.
 */
class LiveAuctionApprovalStatusType
{
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var string | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Status');
        }
        $this->status = (int)$val;
	}
}

/**
 * LiveAuctionBidType
 * Contains the data for one listing found by a search .
 */
class LiveAuctionBidType
{
	/**
	 * @var AmountType | Amount that user has requested for the approval. This is returned if the auction house
	 * has requested that the bidder enter an amount for the approval.
	 */
	public $requestedbiddinglimit;
	/**
	 * @var BidderStatusCodeType | Indicates whether the user is "approved","denied", or "pending" or a combination of these.
	 */
	public $bidderstatus;
	/**
	 * @var AmountType | Amount that has been approved by the seller. If the seller has not yet approved, return
	 * value "Pending"
	 */
	public $approvedbiddinglimit;
	/**
	 * @var string | Comments entered by the seller when it declined an approval request, if any.
	 */
	public $declinedcomment;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setRequestedBiddingLimit($val)
	{
        $this->requestedbiddinglimit = (int)$val;
	}

	/**
	 * @param BidderStatusCodeType $val
	 * @throws Exception
	 */
	public function setBidderStatus($val)
	{
        $this->bidderstatus = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setApprovedBiddingLimit($val)
	{
        $this->approvedbiddinglimit = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDeclinedComment($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DeclinedComment');
        }
        $this->declinedcomment = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LiveAuctionCatalogType
 * Describes one live auction catalog and its sale schedules. Use this information to determine
 * an appropriate combination of catalog and schedule IDs in which to list a lot item when
 * you use AddLiveAuctionItem.
 */
class LiveAuctionCatalogType
{
	/**
	 * @var int | Number that identifies the seller's eBay Live Auctions catalog within which the lot item
	 * will be listed. Use GetLiveAuctionCatalogDetails to determine the seller's available catalog
	 * IDs.
	 */
	public $usercatalogid;
	/**
	 * @var string | Descriptive name that the seller created for the catalog. Pass as input to AddLiveAuctionItem
	 * when you list a lot item.
	 */
	public $catalogname;
	/**
	 * @var ScheduleType | Describes a single live auction sale schedule that the user defined. A seller can define
	 * a maximum of 5 schedules for each catalog. Each schedule defines the start and end time
	 * of a live auction event. (Only the start time is returned from GetLiveAuctionCatalogDetails.) A
	 * schedule must be created at least 48 hours in advance of the auction. The seller then lists
	 * one or more lots that will be auctioned during that event. Only schedules for future sales
	 * are returned. That is, schedules for ended sales or sales in progress are not returned. Pass
	 * as input to AddLiveAuctionItem when you list a lot item.
	 */
	public $schedule;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUserCatalogID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->usercatalogid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCatalogName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CatalogName');
        }
        $this->catalogname = (int)$val;
	}

	/**
	 * @param ScheduleType $val
	 * @throws Exception
	 */
	public function setSchedule($val)
	{
        $this->schedule = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LiveAuctionDetailsType
 * Describes the live auction-specific details of a lot item.
 */
class LiveAuctionDetailsType
{
	/**
	 * @var int | Number that identifies the seller's eBay Live Auctions catalog within which the lot item
	 * will be listed. Use GetLiveAuctionCatalogDetails to determine the seller's available catalog
	 * IDs.
	 */
	public $usercatalogid;
	/**
	 * @var int | Identifier for an event schedule in the seller's Live Auctions catalog.
	 */
	public $scheduleid;
	/**
	 * @var string | Lot number defined by the seller. Each lot number must be unique within the schedule. A
	 * lot number can consist of 1-10 alphanumeric characters beginning with a number from 0-9.
	 * If all values are numbers, the highest allowed value is 2147483647.
	 */
	public $lotnumber;
	/**
	 * @var AmountType | Highest appraised value for the item. Must be greater than zero and greater than the value
	 * in LowEstimate. (Pass an integer value only, not a double.)
	 */
	public $highestimate;
	/**
	 * @var AmountType | Lowest appraised value for the item. Must be greater than zero and less than the value
	 * in HighEstimate. (Pass an integer value only, not a double.)
	 */
	public $lowestimate;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUserCatalogID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->usercatalogid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setScheduleID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->scheduleid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLotNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LotNumber');
        }
        $this->lotnumber = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setHighEstimate($val)
	{
        $this->highestimate = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setLowEstimate($val)
	{
        $this->lowestimate = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalListingDistancesNonSubscriptionDefinitionType
 * Defines the LocalListingDistancesNonSubscription feature. This feature displays all the
 * supported local listing distances for items listed by sellers who have not subscribed to
 * either Local Market for Vehicles or Local Market for Specialty Vehicles.
 */
class LocalListingDistancesNonSubscriptionDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalListingDistancesRegularDefinitionType
 * Defines the LocalListingDistancesRegular feature. This feature displays all the supported
 * local listing distances for items listed by sellers subscribed to Local Market for Vehicles.
 */
class LocalListingDistancesRegularDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalListingDistancesSpecialtyDefinitionType
 * Defines the LocalListingDistancesSpecialty feature. This feature displays the supported
 * local listing distances for items listed by sellers subscribed to Local Market for Specialty
 * Vehicles.
 */
class LocalListingDistancesSpecialtyDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalMarketNonSubscriptionDefinitionType
 * Defines the LocalMarketNonSubscription feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class LocalMarketNonSubscriptionDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalMarketPremiumSubscriptionDefinitionType
 * Defines the LocalMarketPremiumSubscription feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class LocalMarketPremiumSubscriptionDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalMarketRegularSubscriptionDefinitionType
 * Defines the LocalMarketRegularSubscription feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class LocalMarketRegularSubscriptionDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LocalMarketSpecialitySubscriptionDefinitionType
 * Defines the LocalMarketSpecialitySubscription feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class LocalMarketSpecialitySubscriptionDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * LookupAttributeArrayType
 * Only valid when using AddItem for items in Media categories        (Books, DVD and Movies,
 * Music, and Video Game categories).        You can pass either AttributeSetArrayType or
 *       LookupAttributeArrayType, but you cannot pass both containers in the same request.
 *       See the eBay Web Services guide for additional information.
 */
class LookupAttributeArrayType
{
	/**
	 * @var LookupAttributeType | The condition of the item.
	 */
	public $lookupattribute;
	/**
	 * @param LookupAttributeType $val
	 * @throws Exception
	 */
	public function setLookupAttribute($val)
	{
        $this->lookupattribute = (int)$val;
	}
}

/**
 * LookupAttributeType
 * An optional attribute that the seller wants to include in the listing. Enables you to specify
 * an attribute by name rather than by ID. Only valid in Media categories (Books, DVD and Movies,
 * Music, and Video Game categories). Currently, only the Condition attribute is supported.
 */
class LookupAttributeType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | Specifies the value for the property.
	 */
	public $value;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Value');
        }
        $this->value = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MarkUpMarkDownEventType
 * Describes an individual mark-up or mark-down event. eBay will automatically mark an application
 * as down if attempts to deliver a notification fail repeatedly. eBay may mark an application
 * down manually under certain circumstances.
 */
class MarkUpMarkDownEventType
{
	/**
	 * @var MarkUpMarkDownEventTypeCodeType | Returns the notification type. Possible values include: AskSellerQuestion, AuctionCheckoutComplete,
	 * BestOffer, CheckoutBuyerRequestTotal, EndOfAuction, Feedback, FixedPriceEndOfTransaction,
	 * FixedPriceTransaction, ItemNotReceived, MyMessages, OutBid, SecondChanceOffer, UPIBuyerResponseDispute,
	 * UPISellerClosedDispute, UPISellerOpenedDispute, and UPISellerRespondedToDispute.
	 */
	public $type;
	/**
	 * @var dateTime | Time when the application was marked up or marked down.
	 */
	public $time;
	/**
	 * @var string | Describes how the application was marked down, automatically or manually. When an application
	 * is automatically marked down, eBay will ping the application periodically, and if communication
	 * is restored, eBay will automatically mark the application up. If your application is marked down
	 * manually, you must contact eBay Developer Support to get your application marked up. A
	 * Reason is not provided for mark up events.
	 */
	public $reason;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param MarkUpMarkDownEventTypeCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setTime($val)
	{
        $this->time = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setReason($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Reason');
        }
        $this->reason = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class MarkUpMarkDownEventTypeCodeType
{
	const MARKUP     = 'MarkUp';
	const MARKDOWN   = 'MarkDown';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * MarkUpMarkDownHistoryType
 * List of objects representing markup or markdown events for a given application and time
 * period. If no time period is specified in the request, the information for only one day
 * (24 hours before the time the call is made to the time the call is made) is included. The
 * maximum time period is allowed is 3 days (72 hours before the call is made to the time the
 * call is made).
 */
class MarkUpMarkDownHistoryType
{
	/**
	 * @var MarkUpMarkDownEventType | Details for a MarkDown or MarkUp event.
	 */
	public $markupmarkdownevent;
	/**
	 * @param MarkUpMarkDownEventType $val
	 * @throws Exception
	 */
	public function setMarkUpMarkDownEvent($val)
	{
        $this->markupmarkdownevent = (int)$val;
	}
}

/**
 * MaximumItemRequirementsType
 * Container for items bid.
 */
class MaximumItemRequirementsType
{
	/**
	 * @var int | If this field is present, blocking is enabled, where the value of this field represents
	 * the maximum number of this seller's items a bidder is allowed to bid on in a 10 day period
	 * before being blocked. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 25, 50, 75, 100.
	 */
	public $maximumitemcount;
	/**
	 * @var int | This field is ignored unless VerifiedUser is true. If this field is present, the user's
	 * feedback score is also considered: a user is blocked from bidding if the user's feedback
	 * score is less than or equal to the value of this field.
	 */
	public $minimumfeedbackscore;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaximumItemCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maximumitemcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMinimumFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->minimumfeedbackscore = (int)$val;
	}
}

/**
 * MemberMessageExchangeArrayType
 * Container for messages. Returned for GetMemberMessages if messages that meet the request
 * criteria exist.
 */
class MemberMessageExchangeArrayType
{
	/**
	 * @var MemberMessageExchangeType | Information about individual messages. Returned if the parent container is returned.
	 */
	public $membermessageexchange;
	/**
	 * @param MemberMessageExchangeType $val
	 * @throws Exception
	 */
	public function setMemberMessageExchange($val)
	{
        $this->membermessageexchange = (int)$val;
	}
}

/**
 * MemberMessageExchangeType
 * Container for message metadata.
 */
class MemberMessageExchangeType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var MemberMessageType | Contains all the information about the question being asked.  Returned if the parent container
	 * is returned.
	 */
	public $question;
	/**
	 * @var string | An answer to the question. Returned if the parent container is returned.
	 */
	public $response;
	/**
	 * @var MessageStatusTypeCodeType | The status of the message. Returned if the parent container is returned.
	 */
	public $messagestatus;
	/**
	 * @var dateTime | The date and time that a message was created by the sender.
	 */
	public $creationdate;
	/**
	 * @var dateTime | Date the message was last modified. Returned if the parent container is returned.
	 */
	public $lastmodifieddate;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param MemberMessageType $val
	 * @throws Exception
	 */
	public function setQuestion($val)
	{
        $this->question = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setResponse($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Response');
        }
        $this->response = (int)$val;
	}

	/**
	 * @param MessageStatusTypeCodeType $val
	 * @throws Exception
	 */
	public function setMessageStatus($val)
	{
        $this->messagestatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreationDate($val)
	{
        $this->creationdate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastModifiedDate($val)
	{
        $this->lastmodifieddate = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MemberMessageType
 * Container for individual message information.
 */
class MemberMessageType
{
	/**
	 * @var MessageTypeCodeType | The type of message being retrieved. Note that some message types can only be created via
	 * the eBay Web site.
	 */
	public $messagetype;
	/**
	 * @var QuestionTypeCodeType | The context of the question (e.g. Shipping, General).
	 */
	public $questiontype;
	/**
	 * @var boolean | Specifies whether or not to email a copy of the message to the sender. If omitted, this
	 * defaults to whatever the user set in preferences.
	 */
	public $emailcopytosender;
	/**
	 * @var boolean | Specifies whether or not to hide sender's email address from the recipient. If omitted,
	 * this defaults to whatever the user set in preferences--or on site policy, which determines
	 * whether or not this field is recognized.
	 */
	public $hidesendersemailaddress;
	/**
	 * @var boolean | Specifies if the body should be displayed to the public.
	 */
	public $displaytopublic;
	/**
	 * @var string | The eBay user ID of the person who asked the question or sent the message.
	 */
	public $senderid;
	/**
	 * @var string | The email address of the person who asked the question or sent the message. Returned for
	 * MessageType = AskSellerQuestion and by the AskSellerQuestion notification.
	 */
	public $senderemail;
	/**
	 * @var string | Recipient's eBay user ID. For AddMemberMessagesAAQToBidder, must be the seller of an item,
	 * that item's bidder, or a user who has made an offer on that item via Best Offer.
	 */
	public $recipientid;
	/**
	 * @var string | The subject of the message.
	 */
	public $subject;
	/**
	 * @var string | Message content.
	 */
	public $body;
	/**
	 * @var string | An ID that uniquely identifies a message for a given user. <br /><br /> This value is not
	 * the same as the value used for the GetMemberMessages MessageID. Use the GetMemberMessages
	 * value for used as the GetMyMessages ExternalID instead.
	 */
	public $messageid;
	/**
	 * @var string | ID number of the question this message is responding to.
	 */
	public $parentmessageid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param MessageTypeCodeType $val
	 * @throws Exception
	 */
	public function setMessageType($val)
	{
        $this->messagetype = (int)$val;
	}

	/**
	 * @param QuestionTypeCodeType $val
	 * @throws Exception
	 */
	public function setQuestionType($val)
	{
        $this->questiontype = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEmailCopyToSender($val)
	{
        $this->emailcopytosender = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHideSendersEmailAddress($val)
	{
        $this->hidesendersemailaddress = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDisplayToPublic($val)
	{
        $this->displaytopublic = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSenderID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SenderID');
        }
        $this->senderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSenderEmail($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SenderEmail');
        }
        $this->senderemail = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRecipientID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RecipientID');
        }
        $this->recipientid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSubject($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Subject');
        }
        $this->subject = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBody($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Body');
        }
        $this->body = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MessageID');
        }
        $this->messageid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setParentMessageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ParentMessageID');
        }
        $this->parentmessageid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class MerchDisplayCodeType
{
	const DEFAULTTHEME = 'DefaultTheme';
	const STORETHEME   = 'StoreTheme';
	const CUSTOMCODE   = 'CustomCode';
}

class MerchandizingPrefCodeType
{
	const OPTIN      = 'OptIn';
	const OPTOUT     = 'OptOut';
	const CUSTOMCODE = 'CustomCode';
}

class MessageStatusTypeCodeType
{
	const ANSWERED   = 'Answered';
	const UNANSWERED = 'Unanswered';
	const CUSTOMCODE = 'CustomCode';
}

class MessageTypeCodeType
{
	const ASKSELLERQUESTION                 = 'AskSellerQuestion';
	const RESPONSETOASQQUESTION             = 'ResponseToASQQuestion';
	const CONTACTEBAYMEMBER                 = 'ContactEbayMember';
	const CONTACTTRANSACTIONPARTNER         = 'ContactTransactionPartner';
	const RESPONSETOCONTACTEBAYMEMBER       = 'ResponseToContacteBayMember';
	const CONTACTEBAYMEMBERVIACOMMUNITYLINK = 'ContacteBayMemberViaCommunityLink';
	const CUSTOMCODE                        = 'CustomCode';
}

/**
 * MinimumReservePriceDefinitionType
 * Defines the Minimum Reserve Price feature. If the field is present, the feature applies
 * to the category. The field is returned as an empty element (i.e., a boolean value is not
 * returned).
 */
class MinimumReservePriceDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ModifiedFieldType
 * Identifies the fields that are being modified. Only applies when revising and relisting
 * items. To remove a property from an object, specify it in ModifiedFieldType, but do not
 * specify a value in the object type (for example, ItemType).
 */
class ModifiedFieldType
{
	/**
	 * @var string | The name of the field that is being modified. Use only first-level properties. The first
	 * letter of each node in the field is case insensitive, so item.startPrice is the same as
	 * Item.StartPrice. In RelistItem, this is required if you are also modifying fields of the
	 * item that you are relisting.
	 */
	public $field;
	/**
	 * @var ModifyCodeType | Instruction describing the nature of the modification. In RelistItem, this is required
	 * if you are modifying fields of the item that you are relisting. See the ModifyCodeList
	 * for valid values.
	 */
	public $modifytype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setField($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Field');
        }
        $this->field = (int)$val;
	}

	/**
	 * @param ModifyCodeType $val
	 * @throws Exception
	 */
	public function setModifyType($val)
	{
        $this->modifytype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ModifyActionCodeType
{
	const ADD        = 'Add';
	const DELETE     = 'Delete';
	const UPDATE     = 'Update';
	const CUSTOMCODE = 'CustomCode';
}

class ModifyCodeType
{
	const DROPPED    = 'Dropped';
	const MODIFY     = 'Modify';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * MyMessagesAlertArrayType
 * Contains a list of alert data.
 */
class MyMessagesAlertArrayType
{
	/**
	 * @var MyMessagesAlertType | Contains the data for one alert. Returned for detail levels ReturnHeaders and ReturnMessages. Parent
	 * returned as an empty node if user has no alerts.
	 */
	public $alert;
	/**
	 * @param MyMessagesAlertType $val
	 * @throws Exception
	 */
	public function setAlert($val)
	{
        $this->alert = (int)$val;
	}
}

/**
 * MyMessagesAlertIDArrayType
 * Contains a list of up to 10 AlertID values.
 */
class MyMessagesAlertIdArrayType
{
	/**
	 * @var MyMessagesAlertIDType | An ID that uniquely identifies an alert for a given user.
	 */
	public $alertid;
	/**
	 * @param MyMessagesAlertIDType $val
	 * @throws Exception
	 */
	public function setAlertID($val)
	{
        $this->alertid = (int)$val;
	}
}

class MyMessagesAlertIdType
{}

class MyMessagesAlertResolutionStatusCode
{
	const UNRESOLVED               = 'Unresolved';
	const RESOLVEDBYAUTORESOLUTION = 'ResolvedByAutoResolution';
	const RESOLVEDBYUSER           = 'ResolvedByUser';
}

/**
 * MyMessagesAlertType
 * Returns an alert header and full alert information.
 */
class MyMessagesAlertType
{
	/**
	 * @var string | The display name of the eBay user that sent the message.
	 */
	public $sender;
	/**
	 * @var string | The displayable user ID of the recipient.
	 */
	public $recipientuserid;
	/**
	 * @var string | The subject of the message.
	 */
	public $subject;
	/**
	 * @var string | A number ranging from 0 to 10000 (inclusive), with 10000 having the highest priority.
	 */
	public $priority;
	/**
	 * @var MyMessagesAlertIDType | An ID that uniquely identifies an alert for a given user.
	 */
	public $alertid;
	/**
	 * @var string | An ID used by an external application to uniquely identify an alert.
	 */
	public $externalalertid;
	/**
	 * @var string | The content type of the body text. The three acceptable values are "TEXT", "HTML",  and
	 * "XML" (case sensitive).
	 */
	public $contenttype;
	/**
	 * @var string | Suggestion for a different spelling of the search term or terms. The suggestions are given
	 * in Text tags  and the suggestion for the first word is given before the suggestion for
	 * subsequent words.  Suggestions are based on correctly-spelled terms in items, so suggestions
	 * vary over time and depend on   whether a word or word combination is in one or more items.
	 */
	public $text;
	/**
	 * @var MyMessagesAlertResolutionStatusCode | Whether or not an alert was resolved, and how.
	 */
	public $resolutionstatus;
	/**
	 * @var boolean | Whether or not a message has been viewed by a given user. Note that retrieving a message
	 * with the API does not mark it as read.
	 */
	public $read;
	/**
	 * @var dateTime | The date and time that a message was created by the sender.
	 */
	public $creationdate;
	/**
	 * @var dateTime | The date and time that a message was received by My Messages and stored in a database for
	 * the recipient.
	 */
	public $receivedate;
	/**
	 * @var dateTime | The date and time at which a message expires.
	 */
	public $expirationdate;
	/**
	 * @var dateTime | The date and time at which an alert is resolved.
	 */
	public $resolutiondate;
	/**
	 * @var dateTime | The date and time an alert was last viewed by a given user.
	 */
	public $lastreaddate;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var boolean | Indicates whether or not a time-delayed resolution is applicable for an alert.
	 */
	public $istimedresolution;
	/**
	 * @var string | A URL that the recipient must visit to resolve an alert. May be returned as an empty tag
	 * if there is no applicable URL.
	 */
	public $actionurl;
	/**
	 * @var MyMessagesResponseDetailsType | Details relating to the response to an alert or message.
	 */
	public $responsedetails;
	/**
	 * @var MyMessagesForwardDetailsType | Details relating to the forwarding of an alert or message. Only returned if the alert or
	 * message is forwarded.
	 */
	public $forwarddetails;
	/**
	 * @var MyMessagesFolderType | The folder requested in the album.
	 */
	public $folder;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSender($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Sender');
        }
        $this->sender = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRecipientUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RecipientUserID');
        }
        $this->recipientuserid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSubject($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Subject');
        }
        $this->subject = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPriority($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Priority');
        }
        $this->priority = (int)$val;
	}

	/**
	 * @param MyMessagesAlertIDType $val
	 * @throws Exception
	 */
	public function setAlertID($val)
	{
        $this->alertid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExternalAlertID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ExternalAlertID');
        }
        $this->externalalertid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setContentType($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ContentType');
        }
        $this->contenttype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Text');
        }
        $this->text = (int)$val;
	}

	/**
	 * @param MyMessagesAlertResolutionStatusCode $val
	 * @throws Exception
	 */
	public function setResolutionStatus($val)
	{
        $this->resolutionstatus = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRead($val)
	{
        $this->read = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreationDate($val)
	{
        $this->creationdate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setReceiveDate($val)
	{
        $this->receivedate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setExpirationDate($val)
	{
        $this->expirationdate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setResolutionDate($val)
	{
        $this->resolutiondate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastReadDate($val)
	{
        $this->lastreaddate = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIsTimedResolution($val)
	{
        $this->istimedresolution = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setActionURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ActionURL');
        }
        $this->actionurl = (int)$val;
	}

	/**
	 * @param MyMessagesResponseDetailsType $val
	 * @throws Exception
	 */
	public function setResponseDetails($val)
	{
        $this->responsedetails = (int)$val;
	}

	/**
	 * @param MyMessagesForwardDetailsType $val
	 * @throws Exception
	 */
	public function setForwardDetails($val)
	{
        $this->forwarddetails = (int)$val;
	}

	/**
	 * @param MyMessagesFolderType $val
	 * @throws Exception
	 */
	public function setFolder($val)
	{
        $this->folder = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class MyMessagesFolderOperationCodeType
{
	const DISPLAY    = 'Display';
	const RENAME     = 'Rename';
	const REMOVE     = 'Remove';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * MyMessagesFolderSummaryType
 * Summary details for a specified My Messages folder.
 */
class MyMessagesFolderSummaryType
{
	/**
	 * @var long | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @var string | The name of a specified My Messages folder.
	 */
	public $foldername;
	/**
	 * @var int | The number of new alerts that a given user has. Always returned for detail level ReturnSummary.
	 */
	public $newalertcount;
	/**
	 * @var int | The number of new messages that a given user has. Always returned for detail level ReturnSummary.
	 */
	public $newmessagecount;
	/**
	 * @var int | The total number of alerts for a given user. Always returned for detail level ReturnSummary.
	 */
	public $totalalertcount;
	/**
	 * @var int | The total number of messages for a given user. Always returned for detail level ReturnSummary.
	 */
	public $totalmessagecount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        $this->folderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFolderName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FolderName');
        }
        $this->foldername = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNewAlertCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->newalertcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNewMessageCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->newmessagecount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAlertCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalalertcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalMessageCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalmessagecount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyMessagesFolderType
 * Details relating to a My Messages folder.
 */
class MyMessagesFolderType
{
	/**
	 * @var long | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @var string | The name of a specified My Messages folder.
	 */
	public $foldername;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        $this->folderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFolderName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FolderName');
        }
        $this->foldername = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyMessagesForwardDetailsType
 * Details relating to the forwarding of an alert or message.
 */
class MyMessagesForwardDetailsType
{
	/**
	 * @var dateTime | The date and time a user forwarded an alert or message.
	 */
	public $userforwarddate;
	/**
	 * @var string | Encoding used to forward an alert or message.
	 */
	public $forwardmessageencoding;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setUserForwardDate($val)
	{
        $this->userforwarddate = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setForwardMessageEncoding($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ForwardMessageEncoding');
        }
        $this->forwardmessageencoding = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyMessagesMessageArrayType
 * Contains a list of message data.
 */
class MyMessagesMessageArrayType
{
	/**
	 * @var MyMessagesMessageType | Contains the data for one message.
	 */
	public $message;
	/**
	 * @param MyMessagesMessageType $val
	 * @throws Exception
	 */
	public function setMessage($val)
	{
        $this->message = (int)$val;
	}
}

/**
 * MyMessagesMessageIDArrayType
 * Contains a list of up to 10 MessageID values.
 */
class MyMessagesMessageIdArrayType
{
	/**
	 * @var MyMessagesMessageIDType | An ID that uniquely identifies a message for a given user. <br /><br /> This value is not
	 * the same as the value used for the GetMemberMessages MessageID. Use the GetMemberMessages
	 * value for used as the GetMyMessages ExternalID instead.
	 */
	public $messageid;
	/**
	 * @param MyMessagesMessageIDType $val
	 * @throws Exception
	 */
	public function setMessageID($val)
	{
        $this->messageid = (int)$val;
	}
}

class MyMessagesMessageIdType
{}

/**
 * MyMessagesMessageType
 * Contains the message information for each message specified in MessageIDs. The amount and
 * type of information returned varies based on the requested detail level.
 */
class MyMessagesMessageType
{
	/**
	 * @var string | The display name of the eBay user that sent the message.
	 */
	public $sender;
	/**
	 * @var string | The displayable user ID of the recipient.
	 */
	public $recipientuserid;
	/**
	 * @var string | The displayable name of the user or eBay application to which the message is sent. Only returned
	 * for M2M, and if a value exists.
	 */
	public $sendtoname;
	/**
	 * @var string | The subject of the message.
	 */
	public $subject;
	/**
	 * @var MyMessagesMessageIDType | An ID that uniquely identifies a message for a given user. <br /><br /> This value is not
	 * the same as the value used for the GetMemberMessages MessageID. Use the GetMemberMessages
	 * value for used as the GetMyMessages ExternalID instead.
	 */
	public $messageid;
	/**
	 * @var string | An ID used by an external application to uniquely identify a message. <br /><br /> This
	 * value is equivalent to the value used for MessageID in GetMemberMessages.
	 */
	public $externalmessageid;
	/**
	 * @var string | The content type of the body text. The three acceptable values are "TEXT", "HTML",  and
	 * "XML" (case sensitive).
	 */
	public $contenttype;
	/**
	 * @var string | Suggestion for a different spelling of the search term or terms. The suggestions are given
	 * in Text tags  and the suggestion for the first word is given before the suggestion for
	 * subsequent words.  Suggestions are based on correctly-spelled terms in items, so suggestions
	 * vary over time and depend on   whether a word or word combination is in one or more items.
	 */
	public $text;
	/**
	 * @var boolean | Whether or not a message has been flagged.
	 */
	public $flagged;
	/**
	 * @var boolean | Whether or not a message has been viewed by a given user. Note that retrieving a message
	 * with the API does not mark it as read.
	 */
	public $read;
	/**
	 * @var dateTime | The date and time that a message was created by the sender.
	 */
	public $creationdate;
	/**
	 * @var dateTime | The date and time that a message was received by My Messages and stored in a database for
	 * the recipient.
	 */
	public $receivedate;
	/**
	 * @var dateTime | The date and time at which a message expires.
	 */
	public $expirationdate;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var MyMessagesResponseDetailsType | Details relating to the response to an alert or message.
	 */
	public $responsedetails;
	/**
	 * @var MyMessagesForwardDetailsType | Details relating to the forwarding of an alert or message. Only returned if the alert or
	 * message is forwarded.
	 */
	public $forwarddetails;
	/**
	 * @var MyMessagesFolderType | The folder requested in the album.
	 */
	public $folder;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSender($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Sender');
        }
        $this->sender = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRecipientUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RecipientUserID');
        }
        $this->recipientuserid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSendToName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SendToName');
        }
        $this->sendtoname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSubject($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Subject');
        }
        $this->subject = (int)$val;
	}

	/**
	 * @param MyMessagesMessageIDType $val
	 * @throws Exception
	 */
	public function setMessageID($val)
	{
        $this->messageid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExternalMessageID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ExternalMessageID');
        }
        $this->externalmessageid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setContentType($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ContentType');
        }
        $this->contenttype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Text');
        }
        $this->text = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFlagged($val)
	{
        $this->flagged = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRead($val)
	{
        $this->read = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreationDate($val)
	{
        $this->creationdate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setReceiveDate($val)
	{
        $this->receivedate = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setExpirationDate($val)
	{
        $this->expirationdate = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param MyMessagesResponseDetailsType $val
	 * @throws Exception
	 */
	public function setResponseDetails($val)
	{
        $this->responsedetails = (int)$val;
	}

	/**
	 * @param MyMessagesForwardDetailsType $val
	 * @throws Exception
	 */
	public function setForwardDetails($val)
	{
        $this->forwarddetails = (int)$val;
	}

	/**
	 * @param MyMessagesFolderType $val
	 * @throws Exception
	 */
	public function setFolder($val)
	{
        $this->folder = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyMessagesResponseDetailsType
 * Details relating to the response to an alert or message.
 */
class MyMessagesResponseDetailsType
{
	/**
	 * @var boolean | Whether or not an alert or message can be responded to. To respond to an alert or message,
	 * use the URL in ResponseURL. You may need to log into the eBay Web site to complete the
	 * response.
	 */
	public $responseenabled;
	/**
	 * @var anyURI | A URL that the recipient must visit to respond to an alert or message. Responding may require
	 * logging into the eBay Web site.
	 */
	public $responseurl;
	/**
	 * @var dateTime | The date and time the user responded to an alert or message
	 */
	public $userresponsedate;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setResponseEnabled($val)
	{
        $this->responseenabled = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setResponseURL($val)
	{
        $this->responseurl = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setUserResponseDate($val)
	{
        $this->userresponsedate = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyMessagesSummaryType
 * Summary data for a given user's alerts and messages. This includes the numbers of new alerts
 * and messages, unresolved alerts, flagged messages, and total alerts and messages.
 */
class MyMessagesSummaryType
{
	/**
	 * @var MyMessagesFolderSummaryType | Folder summary for each folder. Always returned for detail level ReturnSummary.
	 */
	public $foldersummary;
	/**
	 * @var int | The number of new alerts that a given user has. Always returned for detail level ReturnSummary.
	 */
	public $newalertcount;
	/**
	 * @var int | The number of new messages that a given user has. Always returned for detail level ReturnSummary.
	 */
	public $newmessagecount;
	/**
	 * @var int | The number of alerts that are not yet resolved. Always returned for detail level ReturnSummary.
	 */
	public $unresolvedalertcount;
	/**
	 * @var int | The number of messages that have been flagged. Always returned for detail level ReturnSummary.
	 */
	public $flaggedmessagecount;
	/**
	 * @var int | The total number of alerts for a given user. Always returned for detail level ReturnSummary.
	 */
	public $totalalertcount;
	/**
	 * @var int | The total number of messages for a given user. Always returned for detail level ReturnSummary.
	 */
	public $totalmessagecount;
	/**
	 * @param MyMessagesFolderSummaryType $val
	 * @throws Exception
	 */
	public function setFolderSummary($val)
	{
        $this->foldersummary = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNewAlertCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->newalertcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNewMessageCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->newmessagecount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUnresolvedAlertCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->unresolvedalertcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFlaggedMessageCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->flaggedmessagecount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAlertCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalalertcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalMessageCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalmessagecount = (int)$val;
	}
}

/**
 * MyeBayFavoriteSearchListType
 * A list of favorite searches a user has saved on the My eBay page.
 */
class MyeBayFavoriteSearchListType
{
	/**
	 * @var int | The total number of My eBay Second Chance Offers available.
	 */
	public $totalavailable;
	/**
	 * @var MyeBayFavoriteSearchType | A favorite search the user has saved, with a name and a search query.
	 */
	public $favoritesearch;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalavailable = (int)$val;
	}

	/**
	 * @param MyeBayFavoriteSearchType $val
	 * @throws Exception
	 */
	public function setFavoriteSearch($val)
	{
        $this->favoritesearch = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyeBayFavoriteSearchType
 * Characteristics of a saved My eBay Favorite Search.
 */
class MyeBayFavoriteSearchType
{
	/**
	 * @var string | The name of the My eBay Favorite Search.
	 */
	public $searchname;
	/**
	 * @var string | The query string of a My eBay Favorite Search.
	 */
	public $searchquery;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSearchName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SearchName');
        }
        $this->searchname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSearchQuery($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SearchQuery');
        }
        $this->searchquery = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyeBayFavoriteSellerListType
 * A list of favorite sellers the user has saved on the My eBay page.
 */
class MyeBayFavoriteSellerListType
{
	/**
	 * @var int | The total number of My eBay Second Chance Offers available.
	 */
	public $totalavailable;
	/**
	 * @var MyeBayFavoriteSellerType | A favorite seller the user has saved, with a user ID and store name.
	 */
	public $favoriteseller;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalavailable = (int)$val;
	}

	/**
	 * @param MyeBayFavoriteSellerType $val
	 * @throws Exception
	 */
	public function setFavoriteSeller($val)
	{
        $this->favoriteseller = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyeBayFavoriteSellerType
 * Characteristics of the My eBay Favorite Seller.
 */
class MyeBayFavoriteSellerType
{
	/**
	 * @var string | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var string | The name of the seller's eBay Store.
	 */
	public $storename;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for UserID');
        }
        $this->userid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStoreName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for StoreName');
        }
        $this->storename = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyeBaySecondChanceOfferListType
 * A list of possible My eBay Second Chance Offers.
 */
class MyeBaySecondChanceOfferListType
{
	/**
	 * @var int | The total number of My eBay Second Chance Offers available.
	 */
	public $totalavailable;
	/**
	 * @var ItemType | A Second Chance Offer item.
	 */
	public $secondchanceoffer;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalavailable = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setSecondChanceOffer($val)
	{
        $this->secondchanceoffer = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * MyeBaySelectionType
 * Specifies how the result list for My eBay features such as favorite searches, favorite sellers,
 * and second chance offers should be returned.
 */
class MyeBaySelectionType
{
	/**
	 * @var boolean | Whether to include information about this type of reminder in the response. When true,
	 * the container is returned with default input parameters.
	 */
	public $include;
	/**
	 * @var SortOrderCodeType | Specifies the result sort order. Default is Ascending.
	 */
	public $sort;
	/**
	 * @var int | Specifies the maximum number of items in the returned list. If not specified, returns all
	 * items in the list.
	 */
	public $maxresults;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setInclude($val)
	{
        $this->include = (int)$val;
	}

	/**
	 * @param SortOrderCodeType $val
	 * @throws Exception
	 */
	public function setSort($val)
	{
        $this->sort = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxResults($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxresults = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * NameValueListArrayType
 * A list of one or more valid names and corresponding values.
 */
class NameValueListArrayType
{
	/**
	 * @var NameValueListType | A name and corresponding value (a name/value pair).<br> <br> In the GetSearchResults response,
	 * this is only returned for applicable items when the value of IncludeCondition was true
	 * in the GetSearchResults request, or when SearchRequest was used to perform a "Product Finder"
	 * search.<br> <br> In the GetSearchResultsExpress response, this is only returned when ProductDetails
	 * is set to Fine.
	 */
	public $namevaluelist;
	/**
	 * @param NameValueListType $val
	 * @throws Exception
	 */
	public function setNameValueList($val)
	{
        $this->namevaluelist = (int)$val;
	}
}

/**
 * NameValueListType
 * A name and corresponding value (a name/value pair).
 */
class NameValueListType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | Specifies the value for the property.
	 */
	public $value;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Value');
        }
        $this->value = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * NotificationDetailsArrayType
 * Returns information about notifications sent to the given application for the given ItemID.
 * It will only be returned if ItemID was specified in the input parameters.
 */
class NotificationDetailsArrayType
{
	/**
	 * @var NotificationDetailsType | List of notifications, if there are any, for the given ItemID and given time period.
	 */
	public $notificationdetails;
	/**
	 * @param NotificationDetailsType $val
	 * @throws Exception
	 */
	public function setNotificationDetails($val)
	{
        $this->notificationdetails = (int)$val;
	}
}

/**
 * NotificationDetailsType
 * Information about a single notification. Notification information includes the reference
 * ID, notification type, current status, time delivered, error code, and error message for
 * the notification. If notification details are included in the response, all of the detail
 * fields are returned.
 */
class NotificationDetailsType
{
	/**
	 * @var anyURI | Returns the destination address for the notification. This is the value set using SetNotificationPreferences.
	 */
	public $deliveryurl;
	/**
	 * @var string | Reference identifier for the notification.
	 */
	public $referenceid;
	/**
	 * @var dateTime | Date and time when this notification will be removed from the eBay system.
	 */
	public $expirationtime;
	/**
	 * @var NotificationEventTypeCodeType | Returns the notification type. Possible values include: AskSellerQuestion, AuctionCheckoutComplete,
	 * BestOffer, CheckoutBuyerRequestTotal, EndOfAuction, Feedback, FixedPriceEndOfTransaction,
	 * FixedPriceTransaction, ItemNotReceived, MyMessages, OutBid, SecondChanceOffer, UPIBuyerResponseDispute,
	 * UPISellerClosedDispute, UPISellerOpenedDispute, and UPISellerRespondedToDispute.
	 */
	public $type;
	/**
	 * @var int | Returns the total number of retries for the given notification.
	 */
	public $retries;
	/**
	 * @var NotificationEventStateCodeType | Revise only
	 */
	public $deliverystatus;
	/**
	 * @var dateTime | Returns the time when the notification is scheduled for retry. This won't be included if
	 * the DeliveryStatus is Delivered.
	 */
	public $nextretrytime;
	/**
	 * @var dateTime | Returns the time when the notification was delivered.
	 */
	public $deliverytime;
	/**
	 * @var string | Returns the error message.
	 */
	public $errormessage;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setDeliveryURL($val)
	{
        $this->deliveryurl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setReferenceID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ReferenceID');
        }
        $this->referenceid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setExpirationTime($val)
	{
        $this->expirationtime = (int)$val;
	}

	/**
	 * @param NotificationEventTypeCodeType $val
	 * @throws Exception
	 */
	public function setType($val)
	{
        $this->type = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setRetries($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->retries = (int)$val;
	}

	/**
	 * @param NotificationEventStateCodeType $val
	 * @throws Exception
	 */
	public function setDeliveryStatus($val)
	{
        $this->deliverystatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setNextRetryTime($val)
	{
        $this->nextretrytime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setDeliveryTime($val)
	{
        $this->deliverytime = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setErrorMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ErrorMessage');
        }
        $this->errormessage = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * NotificationEnableArrayType
 * A list of NotificationEnable entries. Each entry specifies one notification and whether
 * it is enabled.
 */
class NotificationEnableArrayType
{
	/**
	 * @var NotificationEnableType | Specifies one notification event and whether it is enabled or disabled. Returned if previously
	 * set.
	 */
	public $notificationenable;
	/**
	 * @param NotificationEnableType $val
	 * @throws Exception
	 */
	public function setNotificationEnable($val)
	{
        $this->notificationenable = (int)$val;
	}
}

/**
 * NotificationEnableType
 * Specifies a notification event and whether the notification is enabled or disabled.
 */
class NotificationEnableType
{
	/**
	 * @var NotificationEventTypeCodeType | 	 */
	public $eventtype;
	/**
	 * @var EnableCodeType | Whether the event is enabled or disabled.
	 */
	public $eventenable;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param NotificationEventTypeCodeType $val
	 * @throws Exception
	 */
	public function setEventType($val)
	{
        $this->eventtype = (int)$val;
	}

	/**
	 * @param EnableCodeType $val
	 * @throws Exception
	 */
	public function setEventEnable($val)
	{
        $this->eventenable = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class NotificationEventPropertyNameCodeType
{
	const TIMELEFT   = 'TimeLeft';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * NotificationEventPropertyType
 * Defines properties associated with particular event.
 */
class NotificationEventPropertyType
{
	/**
	 * @var NotificationEventTypeCodeType | 	 */
	public $eventtype;
	/**
	 * @var NotificationEventPropertyNameCodeType | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | Specifies the value for the property.
	 */
	public $value;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param NotificationEventTypeCodeType $val
	 * @throws Exception
	 */
	public function setEventType($val)
	{
        $this->eventtype = (int)$val;
	}

	/**
	 * @param NotificationEventPropertyNameCodeType $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Value');
        }
        $this->value = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class NotificationEventStateCodeType
{
	const _NEW              = '_New';
	const FAILED            = 'Failed';
	const MARKEDDOWN        = 'MarkedDown';
	const PENDING           = 'Pending';
	const FAILEDPENDING     = 'FailedPending';
	const MARKEDDOWNPENDING = 'MarkedDownPending';
	const DELIVERED         = 'Delivered';
	const UNDELIVERABLE     = 'Undeliverable';
	const REJECTED          = 'Rejected';
	const CANCELED          = 'Canceled';
	const CUSTOMCODE        = 'CustomCode';
}

class NotificationEventTypeCodeType
{
	const NONE                        = 'None';
	const OUTBID                      = 'OutBid';
	const ENDOFAUCTION                = 'EndOfAuction';
	const AUCTIONCHECKOUTCOMPLETE     = 'AuctionCheckoutComplete';
	const FIXEDPRICEENDOFTRANSACTION  = 'FixedPriceEndOfTransaction';
	const CHECKOUTBUYERREQUESTSTOTAL  = 'CheckoutBuyerRequestsTotal';
	const FEEDBACK                    = 'Feedback';
	const FEEDBACKFORSELLER           = 'FeedbackForSeller';
	const FIXEDPRICETRANSACTION       = 'FixedPriceTransaction';
	const SECONDCHANCEOFFER           = 'SecondChanceOffer';
	const ASKSELLERQUESTION           = 'AskSellerQuestion';
	const ITEMLISTED                  = 'ItemListed';
	const ITEMREVISED                 = 'ItemRevised';
	const BUYERRESPONSEDISPUTE        = 'BuyerResponseDispute';
	const SELLEROPENEDDISPUTE         = 'SellerOpenedDispute';
	const SELLERRESPONDEDTODISPUTE    = 'SellerRespondedToDispute';
	const SELLERCLOSEDDISPUTE         = 'SellerClosedDispute';
	const BESTOFFER                   = 'BestOffer';
	const MYMESSAGESALERTHEADER       = 'MyMessagesAlertHeader';
	const MYMESSAGESALERT             = 'MyMessagesAlert';
	const MYMESSAGESEBAYMESSAGEHEADER = 'MyMessageseBayMessageHeader';
	const MYMESSAGESEBAYMESSAGE       = 'MyMessageseBayMessage';
	const MYMESSAGESM2MMESSAGEHEADER  = 'MyMessagesM2MMessageHeader';
	const MYMESSAGESM2MMESSAGE        = 'MyMessagesM2MMessage';
	const INRBUYEROPENEDDISPUTE       = 'INRBuyerOpenedDispute';
	const INRBUYERRESPONDEDTODISPUTE  = 'INRBuyerRespondedToDispute';
	const INRBUYERCLOSEDDISPUTE       = 'INRBuyerClosedDispute';
	const INRSELLERRESPONDEDTODISPUTE = 'INRSellerRespondedToDispute';
	const CHECKOUT                    = 'Checkout';
	const WATCHEDITEMENDINGSOON       = 'WatchedItemEndingSoon';
	const ITEMCLOSED                  = 'ItemClosed';
	const ITEMSUSPENDED               = 'ItemSuspended';
	const ITEMSOLD                    = 'ItemSold';
	const ITEMEXTENDED                = 'ItemExtended';
	const USERIDCHANGED               = 'UserIDChanged';
	const EMAILADDRESSCHANGED         = 'EmailAddressChanged';
	const PASSWORDCHANGED             = 'PasswordChanged';
	const PASSWORDHINTCHANGED         = 'PasswordHintChanged';
	const PAYMENTDETAILCHANGED        = 'PaymentDetailChanged';
	const ACCOUNTSUSPENDED            = 'AccountSuspended';
	const ACCOUNTSUMMARY              = 'AccountSummary';
	const CUSTOMCODE                  = 'CustomCode';
}

class NotificationPayloadTypeCodeType
{
	const EBLSCHEMASOAP = 'eBLSchemaSOAP';
	const CUSTOMCODE    = 'CustomCode';
}

class NotificationRoleCodeType
{
	const APPLICATION = 'Application';
	const USER        = 'User';
	const USERDATA    = 'UserData';
	const EVENT       = 'Event';
	const CUSTOMCODE  = 'CustomCode';
}

/**
 * NotificationStatisticsType
 * Summary information about notifications delivered, failed, errors, queued for a given application
 * ID and time period.
 */
class NotificationStatisticsType
{
	/**
	 * @var int | Returns the number of notifications delivered successfully during the given time period.
	 */
	public $deliveredcount;
	/**
	 * @var int | Returns the number of new notifications that were queued during the given time period.
	 */
	public $queuednewcount;
	/**
	 * @var int | Returns the number of pending notifications in the queue during the given time period.
	 */
	public $queuedpendingcount;
	/**
	 * @var int | Returns the number of notifications that permanently failed during the given time period.
	 */
	public $expiredcount;
	/**
	 * @var int | Returns the number of notifications for which there were delivery errors during the given
	 * time period.
	 */
	public $errorcount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDeliveredCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->deliveredcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQueuedNewCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->queuednewcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQueuedPendingCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->queuedpendingcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setExpiredCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->expiredcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setErrorCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->errorcount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * NotificationUserDataType
 * User data related to notifications.
 */
class NotificationUserDataType
{
	/**
	 * @var SMSSubscriptionType | User data related to SMS notifications.
	 */
	public $smssubscription;
	/**
	 * @var SummaryEventScheduleType | User account activity summary alert delivery schedule. Returned if PreferenceLevel is set
	 * to UserData in GetNotificationPreferences. See "Working with Platform Notifications" for
	 * instructions on "Informational Alerts".
	 */
	public $summaryschedule;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param SMSSubscriptionType $val
	 * @throws Exception
	 */
	public function setSMSSubscription($val)
	{
        $this->smssubscription = (int)$val;
	}

	/**
	 * @param SummaryEventScheduleType $val
	 * @throws Exception
	 */
	public function setSummarySchedule($val)
	{
        $this->summaryschedule = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * OfferArrayType
 * Container for a list of offers. May contain zero, one, or multiple        OfferType objects,
 * each of which represents one offer extended by        a user on a listing.
 */
class OfferArrayType
{
	/**
	 * @var OfferType | Contains the data for one offer. This includes: data for the user making the
	 *  offer, the amount of the offer, the quantity of items being bought from the
	 *  listing, the type of offer being made, and more.
	 */
	public $offer;
	/**
	 * @param OfferType $val
	 * @throws Exception
	 */
	public function setOffer($val)
	{
        $this->offer = (int)$val;
	}
}

/**
 * OfferType
 * Contains information pertaining to an offer made on an item listing and the current bidding
 * or purchase state of the listing.
 */
class OfferType
{
	/**
	 * @var BidActionCodeType | Indicates the type of offer being made on the specified listing. Valid values are enumerated
	 * in the BidActionCodeType code list.
	 */
	public $action;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var AmountType | Amount of the offer placed. For competitive-bidding listings, the amount bid on the item
	 * (subject to outbid by other buyers). For fixed-price listings, the fixed sale price at
	 * which the item is purchased. For competitive-bidding listings with an active Buy It Now
	 * option, this amount will be either the Buy It Now price for purchase or the amount of a
	 * bid, depending on the offer type (as specified in Action). For PlaceOffer, the currencyID
	 * attribute is ignored if provided.
	 */
	public $maxbid;
	/**
	 * @var int | Specifies the number of items from the specified listing the user tendering the offer intends
	 * to purchase or bid on. For Chinese auctions and other listing formats that only allow one
	 * item per listing, value may not exceed one. For multi-item listings, must be greater than
	 * zero and not exceeding the number of items offered for sale in the listing.
	 */
	public $quantity;
	/**
	 * @var boolean | Indicates the user's preference to accept second chance offers. If true, the user is willing
	 * to be the recipient of second chance offers.
	 */
	public $secondchanceenabled;
	/**
	 * @var CurrencyCodeType | Unique ID identifying the currency in which the localized offer amounts are expressed.
	 */
	public $sitecurrency;
	/**
	 * @var dateTime | Date and time the offer or bid was placed.
	 */
	public $timebid;
	/**
	 * @var AmountType | Amount the highest bidder had bid on the item. Applicable only to competitive-bidding listings
	 * (Chinese and Dutch auctions) where there is progressive bidding and winning bidders are
	 * determined based on the highest bid.
	 */
	public $highestbid;
	/**
	 * @var AmountType | Localized amount for the item's current price.
	 */
	public $convertedprice;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var UserType | Bidder information. See the schema documentation for UserType for details on its properties
	 * and their meanings.
	 */
	public $user;
	/**
	 * @var boolean | If true, confirms that the bidder read and agrees to eBay's privacy policy. Applies if
	 * the subject item is in a category that requires user consent. If user consent (that is, confirmation
	 * that a bidder read and agrees to eBay's privacy policy) is required for a category that
	 * the subject item is in, this value must be true for a bid to occur.
	 */
	public $userconsent;
	/**
	 * @var int | Number of bids placed so far against the item. Only applicable to competitive-bidding listings
	 * (Chinese and Dutch auctions).
	 */
	public $bidcount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param BidActionCodeType $val
	 * @throws Exception
	 */
	public function setAction($val)
	{
        $this->action = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMaxBid($val)
	{
        $this->maxbid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantity($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantity = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSecondChanceEnabled($val)
	{
        $this->secondchanceenabled = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setSiteCurrency($val)
	{
        $this->sitecurrency = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setTimeBid($val)
	{
        $this->timebid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setHighestBid($val)
	{
        $this->highestbid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedPrice($val)
	{
        $this->convertedprice = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setUser($val)
	{
        $this->user = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUserConsent($val)
	{
        $this->userconsent = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidcount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class OperationTypeCodeType
{
	const ITEMRULES              = 'ItemRules';
	const REPLACEALLDEFAULTRULES = 'ReplaceAllDefaultRules';
	const CUSTOMCODE             = 'CustomCode';
}

/**
 * OrderArrayType
 * An array of Orders.
 */
class OrderArrayType
{
	/**
	 * @var OrderType | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @param OrderType $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        $this->order = (int)$val;
	}
}

/**
 * OrderIDArrayType
 * A list of unique identifiers for orders.
 */
class OrderIdArrayType
{
	/**
	 * @var OrderIDType | ID of the Half.com order associated with the payment. Returns 0 for single-transaction
	 * orders.
	 */
	public $orderid;
	/**
	 * @param OrderIDType $val
	 * @throws Exception
	 */
	public function setOrderID($val)
	{
        $this->orderid = (int)$val;
	}
}

class OrderIdType
{}

class OrderStatusCodeType
{
	const ACTIVE     = 'Active';
	const INACTIVE   = 'Inactive';
	const COMPLETED  = 'Completed';
	const CANCELLED  = 'Cancelled';
	const SHIPPED    = 'Shipped';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * OrderTransactionArrayType
 * Contains a list of orders, transactions, or both, each of OrderTransactionType.
 */
class OrderTransactionArrayType
{
	/**
	 * @var OrderTransactionType | The individual order or transaction.
	 */
	public $ordertransaction;
	/**
	 * @param OrderTransactionType $val
	 * @throws Exception
	 */
	public function setOrderTransaction($val)
	{
        $this->ordertransaction = (int)$val;
	}
}

/**
 * OrderTransactionType
 * Contains an order or a transaction. A transaction is the sale of one or more items from
 * a seller's listing to a buyer. An order combines two or more transactions into a single
 * payment.
 */
class OrderTransactionType
{
	/**
	 * @var OrderType | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @var TransactionType | Information about one transaction. Also applicable to Half.com (for GetOrders).
	 */
	public $transaction;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param OrderType $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        $this->order = (int)$val;
	}

	/**
	 * @param TransactionType $val
	 * @throws Exception
	 */
	public function setTransaction($val)
	{
        $this->transaction = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * OrderType
 * A combination of two or more transactions that can be paid for with a single payment.<br> <br> We
 * strongly recommend that you avoid mixing digital and non-digital listings in the same order.
 * (In the future, AddOrder may enforce this recommendation.
 */
class OrderType
{
	/**
	 * @var OrderIDType | ID of the Half.com order associated with the payment. Returns 0 for single-transaction
	 * orders.
	 */
	public $orderid;
	/**
	 * @var OrderStatusCodeType | The current status of the order.<br> <br> For transaction calls (like GetItemTransactions),
	 * please use the TransactionPlatform element to determine whether an item was purchased on
	 * Express on eBay.<br> <br> Also applicable to Half.com (for GetOrders).
	 */
	public $orderstatus;
	/**
	 * @var AmountType | Adjustment amount entered by the buyer. A positive amount indicates the amount is an extra
	 * charge being paid to the seller by the buyer. A negative value indicates this amount is
	 * a credit given to the buyer by the seller. Not applicable to Half.com.
	 */
	public $adjustmentamount;
	/**
	 * @var AmountType | The amount the buyer paid for the item(s) in the transaction. If the seller allowed the
	 * buyer to change the item total, the buyer is able to change the total until the time that
	 * the transaction's status moves to Complete. Determine whether the buyer changed the amount
	 * by retrieving the transaction data and comparing the AmountPaid value to what the seller
	 * expected. For combined payment (the transaction is part of an order), GetSellerTransactions
	 * and GetItemTransactions return the amount paid for the order to which the transaction belongs. For
	 * Motors items, AmountPaid is the amount paid by the buyer for the deposit. Not applicable
	 * to Half.com.
	 */
	public $amountpaid;
	/**
	 * @var AmountType | Amount the buyer saved by having multiple items combined into a single order, versus purchasing
	 * the items separately.
	 */
	public $amountsaved;
	/**
	 * @var CheckoutStatusType | Indicates the current status of the checkout process for the transaction.
	 */
	public $checkoutstatus;
	/**
	 * @var ShippingDetailsType | The shipping-related details for an item or transaction, including flat and calculated
	 * shipping costs and shipping insurance costs. For GetOrders, also applicable to Half.com.
	 * For GetOrders, minimal ShippingDetails information is returned under the Transaction container.
	 */
	public $shippingdetails;
	/**
	 * @var TradingRoleCodeType | Indicates whether the order is created by the buyer or by the seller.
	 */
	public $creatinguserrole;
	/**
	 * @var dateTime | Date and time the order was created. Also applicable to Half.com (for GetOrders).
	 */
	public $createdtime;
	/**
	 * @var string | Specifies a promotional offer that allow the buyer to purchase items on credit.
	 */
	public $financeofferid;
	/**
	 * @var BuyerPaymentMethodCodeType | The payment methods the buyer uses to pay for      the order. An order can have multiple
	 * payment methods if the      buyer combines several transactions into one order.      Also
	 * applicable to Half.com (for GetOrders).
	 */
	public $paymentmethods;
	/**
	 * @var string | The email of the order's seller.
	 */
	public $selleremail;
	/**
	 * @var AddressType | The address to which the item is to be shipped.
	 */
	public $shippingaddress;
	/**
	 * @var ShippingServiceOptionsType | The shipping service selected by the buyer from the services offered by the seller. Not
	 * applicable to Half.com.
	 */
	public $shippingserviceselected;
	/**
	 * @var AmountType | The sum of the sale prices of all of the transactions in the order, where a transaction
	 * sale price is the item sale price times the quantity sold. Also applicable to Half.com
	 * (for GetOrders).
	 */
	public $subtotal;
	/**
	 * @var AmountType | Subtotal plus the shipping cost plus the sales tax plus cost of insurance. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $total;
	/**
	 * @var ExternalTransactionType | A PayPal transaction that relates to this eBay transaction. Returned only if there is at
	 * least one PayPal transaction related to this eBay transaction. Not applicable to Half.com.
	 */
	public $externaltransaction;
	/**
	 * @var boolean | Indicates whether the order contains at least one transaction for a digital listing. Not
	 * applicable to Half.com.
	 */
	public $digitaldelivery;
	/**
	 * @var TransactionArrayType | Contains a list of transactions. Returned as an empty tag if no applicable transactions
	 * exist.
	 */
	public $transactionarray;
	/**
	 * @var UserIDType | User ID of the order's buyer. Not applicable to Half.com.
	 */
	public $buyeruserid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param OrderIDType $val
	 * @throws Exception
	 */
	public function setOrderID($val)
	{
        $this->orderid = (int)$val;
	}

	/**
	 * @param OrderStatusCodeType $val
	 * @throws Exception
	 */
	public function setOrderStatus($val)
	{
        $this->orderstatus = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAdjustmentAmount($val)
	{
        $this->adjustmentamount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountPaid($val)
	{
        $this->amountpaid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountSaved($val)
	{
        $this->amountsaved = (int)$val;
	}

	/**
	 * @param CheckoutStatusType $val
	 * @throws Exception
	 */
	public function setCheckoutStatus($val)
	{
        $this->checkoutstatus = (int)$val;
	}

	/**
	 * @param ShippingDetailsType $val
	 * @throws Exception
	 */
	public function setShippingDetails($val)
	{
        $this->shippingdetails = (int)$val;
	}

	/**
	 * @param TradingRoleCodeType $val
	 * @throws Exception
	 */
	public function setCreatingUserRole($val)
	{
        $this->creatinguserrole = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreatedTime($val)
	{
        $this->createdtime = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFinanceOfferID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FinanceOfferID');
        }
        $this->financeofferid = (int)$val;
	}

	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethods($val)
	{
        $this->paymentmethods = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerEmail($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerEmail');
        }
        $this->selleremail = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setShippingAddress($val)
	{
        $this->shippingaddress = (int)$val;
	}

	/**
	 * @param ShippingServiceOptionsType $val
	 * @throws Exception
	 */
	public function setShippingServiceSelected($val)
	{
        $this->shippingserviceselected = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setSubtotal($val)
	{
        $this->subtotal = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotal($val)
	{
        $this->total = (int)$val;
	}

	/**
	 * @param ExternalTransactionType $val
	 * @throws Exception
	 */
	public function setExternalTransaction($val)
	{
        $this->externaltransaction = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDigitalDelivery($val)
	{
        $this->digitaldelivery = (int)$val;
	}

	/**
	 * @param TransactionArrayType $val
	 * @throws Exception
	 */
	public function setTransactionArray($val)
	{
        $this->transactionarray = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setBuyerUserID($val)
	{
        $this->buyeruserid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * PaginatedItemArrayType
 * Contains a paginated list of items.
 */
class PaginatedItemArrayType
{
	/**
	 * @var ItemArrayType | Contains a list of Item types.
	 */
	public $itemarray;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @param ItemArrayType $val
	 * @throws Exception
	 */
	public function setItemArray($val)
	{
        $this->itemarray = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}
}

/**
 * PaginatedOrderTransactionArrayType
 * Contains a paginated list of orders, transactions, or both, with each item an OrderTransactionType.
 */
class PaginatedOrderTransactionArrayType
{
	/**
	 * @var OrderTransactionArrayType | Contains the list of orders, transactions, or both.
	 */
	public $ordertransactionarray;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @param OrderTransactionArrayType $val
	 * @throws Exception
	 */
	public function setOrderTransactionArray($val)
	{
        $this->ordertransactionarray = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}
}

/**
 * PaginatedTransactionArrayType
 * Contains a paginated list of transactions.
 */
class PaginatedTransactionArrayType
{
	/**
	 * @var TransactionArrayType | Contains a list of transactions. Returned as an empty tag if no applicable transactions
	 * exist.
	 */
	public $transactionarray;
	/**
	 * @var PaginationResultType | Provides information about the list of transactions, including number of pages and number
	 * of entries.
	 */
	public $paginationresult;
	/**
	 * @param TransactionArrayType $val
	 * @throws Exception
	 */
	public function setTransactionArray($val)
	{
        $this->transactionarray = (int)$val;
	}

	/**
	 * @param PaginationResultType $val
	 * @throws Exception
	 */
	public function setPaginationResult($val)
	{
        $this->paginationresult = (int)$val;
	}
}

/**
 * PaginationResultType
 * Shows the pagination of data returned by requests. Pagination of returned data is not needed
 * in and not supported for every call. See the documentation for individual calls to determine
 * whether pagination is supported, required, or desirable.
 */
class PaginationResultType
{
	/**
	 * @var int | Indicates the total number of pages of data that could be returned by repeated requests.
	 * For GetOrders, not applicable to eBay.com (for GetOrders, applicable to Half.com). Returned
	 * with a value of 0 if no pages are available.
	 */
	public $totalnumberofpages;
	/**
	 * @var int | Indicates the total number of entries that could be returned by repeated requests. For GetOrders,
	 * not applicable to eBay.com (for GetOrders, applicable to Half.com). Returned with a value
	 * of 0 if no entries are available.
	 */
	public $totalnumberofentries;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalNumberOfPages($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalnumberofpages = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalNumberOfEntries($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalnumberofentries = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PaidStatusCodeType
{
	const NOTPAID                      = 'NotPaid';
	const BUYERHASNOTCOMPLETEDCHECKOUT = 'BuyerHasNotCompletedCheckout';
	const PAYMENTPENDINGWITHPAYPAL     = 'PaymentPendingWithPayPal';
	const PAIDWITHPAYPAL               = 'PaidWithPayPal';
	const MARKEDASPAID                 = 'MarkedAsPaid';
	const PAYMENTPENDINGWITHESCROW     = 'PaymentPendingWithEscrow';
	const PAIDWITHESCROW               = 'PaidWithEscrow';
	const ESCROWPAYMENTCANCELLED       = 'EscrowPaymentCancelled';
	const PAYMENTPENDINGWITHPAISAPAY   = 'PaymentPendingWithPaisaPay';
	const PAIDWITHPAISAPAY             = 'PaidWithPaisaPay';
	const PAYMENTPENDING               = 'PaymentPending';
	const CUSTOMCODE                   = 'CustomCode';
}

class PayPalAccountLevelCodeType
{
	const UNVERIFIED              = 'Unverified';
	const INTERNATIONALUNVERIFIED = 'InternationalUnverified';
	const VERIFIED                = 'Verified';
	const INTERNATIONALVERIFIED   = 'InternationalVerified';
	const TRUSTED                 = 'Trusted';
	const UNKNOWN                 = 'Unknown';
	const INVALID                 = 'Invalid';
	const CUSTOMCODE              = 'CustomCode';
}

class PayPalAccountStatusCodeType
{
	const ACTIVE         = 'Active';
	const CLOSED         = 'Closed';
	const HIGHRESTRICTED = 'HighRestricted';
	const LOWRESTRICTED  = 'LowRestricted';
	const LOCKED         = 'Locked';
	const CUSTOMCODE     = 'CustomCode';
	const WIREOFF        = 'WireOff';
	const UNKNOWN        = 'Unknown';
	const INVALID        = 'Invalid';
}

class PayPalAccountTypeCodeType
{
	const PERSONAL   = 'Personal';
	const PREMIER    = 'Premier';
	const BUSINESS   = 'Business';
	const UNKNOWN    = 'Unknown';
	const INVALID    = 'Invalid';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * PaymentDetailsType
 * Data associated with payment (payment durations).
 */
class PaymentDetailsType
{
	/**
	 * @var int | Applies to US eBay Motors site (except Parts and Accessories category). Number of hours
	 * after a listing closes that the buyer can put down a deposit on an item (if the seller
	 * specified a deposit). Only takes effect if listing also includes the Deposit Amount and
	 * Deposit Type attributes (see AttributeSetArray). The choices are 24, 48, and 72, and the
	 * default is 48. Deposits can only be paid using PayPal, so the listing must offer PayPal
	 * as a payment method (in addition to the payment methods offered for the full payment).
	 */
	public $hourstodeposit;
	/**
	 * @var int | Applies to vehicle categories on the US and Canada eBay Motors sites (not Parts and Accessories
	 * categories). Number of days after a listing closes that the buyer can take to pay the full
	 * cost of the vehicle. The choices are 3, 7, 10, and 14, and the default is 7. PayPal and
	 * credit cards cannot be used to pay the full cost of a vehicle, so the listing must offer
	 * MOCC (cashier's check), PersonalCheck, LoanCheck, CashInPerson, and/or PaymentSeeDescription
	 * as payment methods.
	 */
	public $daystofullpayment;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setHoursToDeposit($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->hourstodeposit = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDaysToFullPayment($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->daystofullpayment = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PaymentMethodSearchCodeType
{
	const PAYPAL           = 'PayPal';
	const PAISAPAY         = 'PaisaPay';
	const PAYPALORPAISAPAY = 'PayPalOrPaisaPay';
}

/**
 * PaymentOptionDetailsType
 * Details about a specific payment option.
 */
class PaymentOptionDetailsType
{
	/**
	 * @var BuyerPaymentMethodCodeType | A payment method value defined in the schema.<br><br> Related fields:<br> Item.PaymentMethods
	 * in AddItem<br> PaymentMethodUsed in ReviseCheckoutStatus
	 */
	public $paymentoption;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentOption($val)
	{
        $this->paymentoption = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PaymentStatusCodeType
{
	const NOPAYMENTFAILURE                   = 'NoPaymentFailure';
	const BUYERECHECKBOUNCED                 = 'BuyerECheckBounced';
	const BUYERCREDITCARDFAILED              = 'BuyerCreditCardFailed';
	const BUYERFAILEDPAYMENTREPORTEDBYSELLER = 'BuyerFailedPaymentReportedBySeller';
	const PAYPALPAYMENTINPROCESS             = 'PayPalPaymentInProcess';
	const PAYMENTINPROCESS                   = 'PaymentInProcess';
	const CUSTOMCODE                         = 'CustomCode';
}

class PaymentTypeCodeType
{
	const SALE                = 'Sale';
	const REFUND              = 'Refund';
	const SELLERDENIEDPAYMENT = 'SellerDeniedPayment';
	const ADMINREVERSAL       = 'AdminReversal';
	const ALLOTHER            = 'AllOther';
	const CUSTOMCODE          = 'CustomCode';
}

class PhotoDisplayCodeType
{
	const NONE                    = 'None';
	const SLIDESHOW               = 'SlideShow';
	const SUPERSIZE               = 'SuperSize';
	const PICTUREPACK             = 'PicturePack';
	const SITEHOSTEDPICTURESHOW   = 'SiteHostedPictureShow';
	const VENDORHOSTEDPICTURESHOW = 'VendorHostedPictureShow';
	const SUPERSIZEPICTURESHOW    = 'SuperSizePictureShow';
	const CUSTOMCODE              = 'CustomCode';
}

/**
 * PictureDetailsType
 * Contains the data for a picture associated with an item. Replaces the deprecated SiteHostedPicture
 * and VendorHostedPicture in the response with compatibility level 439 or greater. With the
 * future deprecation of SiteHostedPicture and VendorHostedPicture as input, applications should
 * use PictureDetails in the input instead. Not applicable to Half.com.
 */
class PictureDetailsType
{
	/**
	 * @var GalleryTypeCodeType | Indicates whether a picture for the item is included in the Gallery and, if so whether
	 * the item is also featured or Plus in the Gallery. If the value is Gallery or Plus or Featured,
	 * eBay checks the available image URLs in the following order to determine which URL to use (if
	 * more than one of these URLs is available):<br><br>            a) Use the URL in GalleryURL,
	 * if it is specified.<br>            b) Otherwise, if ProductListingDetails.UseStockPhotoURLAsGallery
	 * is true, use the eBay stock photo.<br>            c) Otherwise, use the value of the first
	 * SelfHostedURL in the array of SelfHostedURL fields, if any.<br>            d) Otherwise,
	 * if ProductListingDetails.ProductID is specified, use the eBay stock photo
	 *  (eBay resets UseStockPhotoURLAsGallery to true in this case).<br>            e) If eBay
	 * is unable to find an image URL for the listing, an error is returned.<br><br>
	 *   See "Describing Items in a Listing" in the eBay Web Services Guide for additional information
	 *            about working with pictures and related validation rules.            You cannot
	 * remove Gallery or Plus or Featured when you revise a listing.
	 */
	public $gallerytype;
	/**
	 * @var anyURI | URL for a picture to be used as the Gallery thumbnail. Ignored if GalleryType is None or
	 * unspecified. If the value of GalleryType is Gallery or Featured, you can either specify
	 * GalleryURL or allow eBay to use another picture that you have included in the listing.
	 * (See GalleryType for the rules that determine which URL is used if you do not specify GalleryURL.)
	 * The image used for the Gallery thumbnail must be in one of the graphics formats JPEG, BMP,
	 * TIF, or GIF. eBay Live Auctions lots are listed in the gallery for free. With the future
	 * deprecation of VendorHostedPicture as input, Applications should use Item.PictureDetails.GalleryURL
	 * instead. If the item has bids (or items have been sold) or the listing ends within 12 hours, you
	 * can add GalleryURL or change its value, but you cannot remove the gallery picture if it
	 * was previously specified. Not applicable to eBay Motors listings. See "Describing Items
	 * in a Listing" in the If the value of GalleryType is Gallery or Plus or Featured, see eBay
	 * Web Services Guide for additional validation rules. <br><br> Note that the Gallery Plus
	 * image enhancement does not support VendorHostedPicture. Use Item.PictureDetails with that
	 * feature.
	 */
	public $galleryurl;
	/**
	 * @var PhotoDisplayCodeType | Specifies the type of image display used in a listing. Some options are only available
	 * if images are hosted through eBay Picture Services (EPS). eBay determines this by parsing
	 * the associated PictureURL. Cannot be used in combination with Listing Designer layouts. Specify
	 * None or do not add PhotoDisplay when ListingDesigner.LayoutID is a value other than 0.
	 */
	public $photodisplay;
	/**
	 * @var anyURI | Deprecated with compatibility level 383 and higher. Contains the URL for an image hosted
	 * on a location of the seller's choice (other than eBay) and associated with an item. If
	 * specified, this cannot have an empty/null value. You cannot specify multiple PictureURL
	 * fields. In most cases, the picture URL is also used for the picture at the top of the View
	 * Item page on the Web site.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL argument.<br> With compatibility 383 and higher,
	 * see SelfHostedURL instead.<br> With the future deprecation of VendorHostedPicture as input, applications
	 * should use Item.PictureDetails.PictureURL instead. See Item.PictureDetails.PictureURL for
	 * information about how to remove pictures from a listing.<br> For retrieval calls (e.g.,
	 * GetItem):<br> With compatibility levels lower than 383, PictureURL is returned.<br> With
	 * compatibility levels between 383 and 439, SelfHostedURL is returned instead.<br> With compatibility
	 * 439 and higher,  Item.PictureDetails.PictureURL is returned instead. <br><br> Note that
	 * the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
	 * with that feature.
	 */
	public $pictureurl;
	/**
	 * @var PictureSourceCodeType | The service hosting the images in PictureURL, if any. This information is primarily useful
	 * for Picture Manager subscribers, who pay a flat subscription fee instead of individual
	 * picture fees per listing. Only returned when PictureURL is returned.
	 */
	public $picturesource;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param GalleryTypeCodeType $val
	 * @throws Exception
	 */
	public function setGalleryType($val)
	{
        $this->gallerytype = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setGalleryURL($val)
	{
        $this->galleryurl = (int)$val;
	}

	/**
	 * @param PhotoDisplayCodeType $val
	 * @throws Exception
	 */
	public function setPhotoDisplay($val)
	{
        $this->photodisplay = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setPictureURL($val)
	{
        $this->pictureurl = (int)$val;
	}

	/**
	 * @param PictureSourceCodeType $val
	 * @throws Exception
	 */
	public function setPictureSource($val)
	{
        $this->picturesource = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PictureManagerActionCodeType
{
	const ADD        = 'Add';
	const DELETE     = 'Delete';
	const RENAME     = 'Rename';
	const MOVE       = 'Move';
	const CHANGE     = 'Change';
	const CUSTOMCODE = 'CustomCode';
}

class PictureManagerDetailLevelCodeType
{
	const RETURNALL          = 'ReturnAll';
	const RETURNSUBSCRIPTION = 'ReturnSubscription';
	const RETURNPICTURE      = 'ReturnPicture';
	const CUSTOMCODE         = 'CustomCode';
}

class PictureManagerDetailsType
{
	/**
	 * @var PictureManagerSubscriptionLevelCodeType | Subscription level (tier) for the user's eBay Store.
	 */
	public $subscriptionlevel;
	/**
	 * @var int | The amount of storage already in use. Measured in bytes. Read-only value.
	 */
	public $storageused;
	/**
	 * @var int | The amount of storage space remaining in the authenticated user's album. Measured in bytes.
	 * Read-only value.
	 */
	public $totalstorageavailable;
	/**
	 * @var boolean | Whether to keep a copy of the original picture without resizing. Default is false. true
	 * = keep originals.
	 */
	public $keeporiginal;
	/**
	 * @var boolean | Whether to show the EPS watermark when photos are displayed. Default is false. true = show.
	 */
	public $watermarkeps;
	/**
	 * @var boolean | Whether to show the user ID watermark when photos are displayed. Default is false. true
	 * = show.
	 */
	public $watermarkuserid;
	/**
	 * @var PictureManagerFolderType | The folder requested in the album.
	 */
	public $folder;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param PictureManagerSubscriptionLevelCodeType $val
	 * @throws Exception
	 */
	public function setSubscriptionLevel($val)
	{
        $this->subscriptionlevel = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setStorageUsed($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->storageused = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalStorageAvailable($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalstorageavailable = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setKeepOriginal($val)
	{
        $this->keeporiginal = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setWatermarkEPS($val)
	{
        $this->watermarkeps = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setWatermarkUserID($val)
	{
        $this->watermarkuserid = (int)$val;
	}

	/**
	 * @param PictureManagerFolderType $val
	 * @throws Exception
	 */
	public function setFolder($val)
	{
        $this->folder = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * PictureManagerFolderType
 * A folder in the authenticated user's album. By default, all folders and their pictures are
 * returned. If a folder ID is specified, the folders' metadata and contents are returned.
 */
class PictureManagerFolderType
{
	/**
	 * @var int | The ID of the folder.
	 */
	public $folderid;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var PictureManagerPictureType | Indicates whether a listing has an image associated with it.
	 */
	public $picture;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFolderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->folderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param PictureManagerPictureType $val
	 * @throws Exception
	 */
	public function setPicture($val)
	{
        $this->picture = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * PictureManagerPictureDisplayType
 * Defines various styles of picture display for images in Picture Manager albums.
 */
class PictureManagerPictureDisplayType
{
	/**
	 * @var PictureManagerPictureDisplayTypeCodeType | Display type for the custom listing header.
	 */
	public $displaytype;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var int | The total file size of the picture, in bytes.
	 */
	public $size;
	/**
	 * @var int | The height of a specific image, or the maximum allowed height, in pixels. Varies for different
	 * calls.
	 */
	public $height;
	/**
	 * @var int | The width of a specific image, or the maximum allowed width, in pixels. Varies for different
	 * calls.
	 */
	public $width;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param PictureManagerPictureDisplayTypeCodeType $val
	 * @throws Exception
	 */
	public function setDisplayType($val)
	{
        $this->displaytype = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSize($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->size = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setHeight($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->height = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setWidth($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->width = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PictureManagerPictureDisplayTypeCodeType
{
	const THUMBNAIL  = 'Thumbnail';
	const BIBO       = 'BIBO';
	const STANDARD   = 'Standard';
	const LARGE      = 'Large';
	const SUPERSIZE  = 'Supersize';
	const ORIGINAL   = 'Original';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * PictureManagerPictureType
 * A picture in a Picture Manager album.
 */
class PictureManagerPictureType
{
	/**
	 * @var anyURI | Deprecated with compatibility level 383 and higher. Contains the URL for an image hosted
	 * on a location of the seller's choice (other than eBay) and associated with an item. If
	 * specified, this cannot have an empty/null value. You cannot specify multiple PictureURL
	 * fields. In most cases, the picture URL is also used for the picture at the top of the View
	 * Item page on the Web site.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL argument.<br> With compatibility 383 and higher,
	 * see SelfHostedURL instead.<br> With the future deprecation of VendorHostedPicture as input, applications
	 * should use Item.PictureDetails.PictureURL instead. See Item.PictureDetails.PictureURL for
	 * information about how to remove pictures from a listing.<br> For retrieval calls (e.g.,
	 * GetItem):<br> With compatibility levels lower than 383, PictureURL is returned.<br> With
	 * compatibility levels between 383 and 439, SelfHostedURL is returned instead.<br> With compatibility
	 * 439 and higher,  Item.PictureDetails.PictureURL is returned instead. <br><br> Note that
	 * the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
	 * with that feature.
	 */
	public $pictureurl;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var dateTime | The date the picture was uploaded to the Picture Manager account.
	 */
	public $date;
	/**
	 * @var PictureManagerPictureDisplayType | The type of picture display in Picture Manager.
	 */
	public $displayformat;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setPictureURL($val)
	{
        $this->pictureurl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setDate($val)
	{
        $this->date = (int)$val;
	}

	/**
	 * @param PictureManagerPictureDisplayType $val
	 * @throws Exception
	 */
	public function setDisplayFormat($val)
	{
        $this->displayformat = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PictureManagerSubscriptionLevelCodeType
{
	const FREE       = 'Free';
	const LEVEL1     = 'Level1';
	const LEVEL2     = 'Level2';
	const LEVEL3     = 'Level3';
	const LEVEL4     = 'Level4';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * PictureManagerSubscriptionType
 * Describes one type of Picture Manager subscription that is available.
 */
class PictureManagerSubscriptionType
{
	/**
	 * @var PictureManagerSubscriptionLevelCodeType | Subscription level (tier) for the user's eBay Store.
	 */
	public $subscriptionlevel;
	/**
	 * @var AmountType | Monthly fee for the Store subscription level.
	 */
	public $fee;
	/**
	 * @var int | The total amount of storage space available for the subscription type.      Read-only value.
	 */
	public $storagesize;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param PictureManagerSubscriptionLevelCodeType $val
	 * @throws Exception
	 */
	public function setSubscriptionLevel($val)
	{
        $this->subscriptionlevel = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setFee($val)
	{
        $this->fee = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setStorageSize($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->storagesize = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PictureSourceCodeType
{
	const EPS            = 'EPS';
	const PICTUREMANAGER = 'PictureManager';
	const VENDOR         = 'Vendor';
	const CUSTOMCODE     = 'CustomCode';
}

/**
 * PriceRangeFilterType
 * One of the data filters used when searching for items using        GetSearchResults. Allows
 * filtering based on the current price of items.        Properties allow for defining a range
 * within prices must fall to be        returned in the result set, a minimum price for items
 * returned, or a        maximum price for items returned.
 */
class PriceRangeFilterType
{
	/**
	 * @var AmountType | Specifies the upper limit of price range for the automatic search criteria.
	 */
	public $maxprice;
	/**
	 * @var AmountType | Specifies the lower limit of price range for the automatic search criteria.
	 */
	public $minprice;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMaxPrice($val)
	{
        $this->maxprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinPrice($val)
	{
        $this->minprice = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * PricingRecommendationsType
 * Pricing data returned from the Product Pricing engine.
 */
class PricingRecommendationsType
{
	/**
	 * @var ProductInfoType | A product's pricing data (if any) and brief information about the product.
	 */
	public $productinfo;
	/**
	 * @param ProductInfoType $val
	 * @throws Exception
	 */
	public function setProductInfo($val)
	{
        $this->productinfo = (int)$val;
	}
}

/**
 * ProPackEnabledDefinitionType
 * Defines the ProPack feature (a feature pack). If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class ProPackEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProPackPlusEnabledDefinitionType
 * Defines the ProPackPlus feature (a feature pack). If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class ProPackPlusEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProStoresCheckoutPreferenceType
 * Details about ProStores and checkout preferences.
 */
class ProStoresCheckoutPreferenceType
{
	/**
	 * @var boolean | Indicates whether third party checkout is to be redirected to the ProStores application
	 * specified via My eBay preferences.
	 */
	public $checkoutredirectprostores;
	/**
	 * @var ProStoresDetailsType | Details about the store.
	 */
	public $prostoresdetails;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCheckoutRedirectProStores($val)
	{
        $this->checkoutredirectprostores = (int)$val;
	}

	/**
	 * @param ProStoresDetailsType $val
	 * @throws Exception
	 */
	public function setProStoresDetails($val)
	{
        $this->prostoresdetails = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProStoresDetailsType
 * Details about the store.
 */
class ProStoresDetailsType
{
	/**
	 * @var string | The username associated with the store.  Returned only if the parent container is returned.
	 */
	public $sellerthirdpartyusername;
	/**
	 * @var string | The name of the seller's eBay Store.
	 */
	public $storename;
	/**
	 * @var EnableCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerThirdPartyUsername($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerThirdPartyUsername');
        }
        $this->sellerthirdpartyusername = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStoreName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for StoreName');
        }
        $this->storename = (int)$val;
	}

	/**
	 * @param EnableCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProductArrayType
 * Container for a list of eBay Express products. Can contain zero, one, or multiple ExpressProductType
 * objects, each of which conveys the data for one product.
 */
class ProductArrayType
{
	/**
	 * @var ExpressProductType | A suggested product to use to list an item with Pre-filled Item Information.
	 *  Returned from GetItemRecommendations when the Suggested Attributes engine is used
	 *         See the Developer's Guide for additional details.
	 */
	public $product;
	/**
	 * @param ExpressProductType $val
	 * @throws Exception
	 */
	public function setProduct($val)
	{
        $this->product = (int)$val;
	}
}

/**
 * ProductFamilyType
 * A set of results returned from a catalog product search. Use GetProductSearchResults or
 * GetProductFamilyMembers to perform the search.      See the guide for information about
 * Pre-filled Item Information (Catalogs) functionality.
 */
class ProductFamilyType
{
	/**
	 * @var ProductType | A transient header that describes the current search results. Contains a             an
	 * ID, a subset of attributes, and a typical stock photo             to help a user easily
	 * distinguish the products in the current result set            from products in other result
	 * sets returned in the same response.             One ParentProduct is returned per ProductFamily.
	 */
	public $parentproduct;
	/**
	 * @var ProductType | A set of products (within the same product family) that match the search query.
	 */
	public $familymembers;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var boolean
	 */
	public $hasmorechildren;
	/**
	 * @param ProductType $val
	 * @throws Exception
	 */
	public function setParentProduct($val)
	{
        $this->parentproduct = (int)$val;
	}

	/**
	 * @param ProductType $val
	 * @throws Exception
	 */
	public function setFamilyMembers($val)
	{
        $this->familymembers = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMoreChildren($val)
	{
        $this->hasmorechildren = (int)$val;
	}
}

/**
 * ProductFinderConstraintType
 * An attribute (constraint) that was specified in a search request that was       based on
 * a product finder query. Used to help you map each query in a batch      request to the corresponding
 * search result in the response.
 */
class ProductFinderConstraintType
{
	/**
	 * @var string | The search attribute name (e.g., Manufacturer).
	 */
	public $displayname;
	/**
	 * @var string | The search attribute value the user specified in the query             (e.g., the actual
	 * name the user chose for the manufacturer).
	 */
	public $displayvalue;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDisplayName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DisplayName');
        }
        $this->displayname = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDisplayValue($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DisplayValue');
        }
        $this->displayvalue = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ProductInfoType
{
	/**
	 * @var AmountType | The average start price (minimum bid), if any, of completed auction items that were listed
	 *            with Pre-filled Item Information from this product.
	 */
	public $averagestartprice;
	/**
	 * @var AmountType | The average sold price (winning bid, Buy It Now price, or fixed price), if any, of completed
	 * items that were listed with Pre-filled Item Information from this product.
	 */
	public $averagesoldprice;
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @var string
	 */
	public $productinfoid;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAverageStartPrice($val)
	{
        $this->averagestartprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAverageSoldPrice($val)
	{
        $this->averagesoldprice = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductInfoID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for productInfoID');
        }
        $this->productinfoid = (int)$val;
	}
}

/**
 * ProductListingDetailsType
 * Contains product information that can be included in a listing. Applicable for listings
 * that use eBay's Pre-filled Item Information feature. See the Developer's Guide for details
 * on working with Pre-filled Item Information.
 */
class ProductListingDetailsType
{
	/**
	 * @var string | Identifier for a representative stock product in a product family.            Used as input
	 * in GetProductFamilyMembers requests to identify a product family.            Use GetProductSearchResults
	 * to determine the available IDs.
	 */
	public $productid;
	/**
	 * @var boolean | If true, indicates that the item listing includes the stock photo. To use an eBay stock
	 * photo in an item listing, set IncludeStockPhotoURL to true. If a stock photo is available,
	 * it is used at the top of the View Item page and in the Item Specifics section of the listing.
	 * If you also include Item.PictureDetails.PictureURL, the stock photo only appears in the
	 * Item Specifics section of the listing. Other pictures you specify by using Item.PictureDetails.PictureURL
	 * appear in a separate section of the listing. If you use Item.ExternalProductID instead
	 * of Item.ProductListingDetails, eBay sets IncludeStockPhotoURL to true (and you cannot set
	 * it to false). In GetItem, the URL of the stock photo will be returned in StockPhotoURL. If
	 * you set IncludeStockPhotoURL to false, the stock photo does not appear in the listing at
	 * all.<br> <br> To be considered for eBay Express, in most cases a listing must include a
	 * picture or a gallery URL. You can choose to use the eBay stock photo for this purpose. See
	 * the eBay Web Services Guide links below for details.<br> <br> Not applicable to Half.com.
	 */
	public $includestockphotourl;
	/**
	 * @var boolean | If true, specifies that the listing should include additional information about the product, such
	 * as a publisher's description or film credits. Such information is hosted through the eBay
	 * site and cannot be edited. If true, Item.Description is optional in item-listing requests.
	 */
	public $includeprefillediteminformation;
	/**
	 * @var boolean | If true, indicates that the stock photo for an item (if available) is used as the gallery
	 * thumbnail. When listing an item, IncludeStockPhotoURL must also be true and Item.PictureDetails.GalleryType
	 * must be passed in with a value of Gallery or Gallery Featured (but not both). Passing in
	 * Item.PictureDetails.GalleryURL takes precedence over UseStockPhotoURLAsGallery. See the eBay
	 * Web Services Guide for additional validation rules for pictures. To be considered for eBay
	 * Express, in most cases a listing must include a picture or a gallery URL. You can choose
	 * to use the eBay stock photo for this purpose. See "Working with eBay Express Listings"
	 * in the eBay Web Services Guide.
	 */
	public $usestockphotourlasgallery;
	/**
	 * @var anyURI | Fully qualified URL for a standard image (if any) that is associated with the product. A
	 * seller includes the stock photo in the listing by setting IncludeStockPhotoURL.
	 */
	public $stockphotourl;
	/**
	 * @var string | Copyright statement indicating the source of the product information. This information
	 * will be included in the listing with Pre-filled Item Information. Your application should
	 * also display the copyright statement when rendering the Pre-filled Item Information. If
	 * more than one copyright statement is applicable, they can be presented to the user in alphabetical
	 * order. Returned as HTML. Output only.
	 */
	public $copyright;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductID');
        }
        $this->productid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludeStockPhotoURL($val)
	{
        $this->includestockphotourl = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIncludePrefilledItemInformation($val)
	{
        $this->includeprefillediteminformation = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUseStockPhotoURLAsGallery($val)
	{
        $this->usestockphotourlasgallery = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setStockPhotoURL($val)
	{
        $this->stockphotourl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCopyright($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Copyright');
        }
        $this->copyright = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProductRecommendationsType
 * A list of products returned from the Suggested Attributes engine.
 */
class ProductRecommendationsType
{
	/**
	 * @var ProductInfoType | A suggested product to use to list an item with Pre-filled Item Information.
	 *  Returned from GetItemRecommendations when the Suggested Attributes engine is used
	 *         See the Developer's Guide for additional details.
	 */
	public $product;
	/**
	 * @param ProductInfoType $val
	 * @throws Exception
	 */
	public function setProduct($val)
	{
        $this->product = (int)$val;
	}
}

/**
 * ProductSearchPageType
 *
 */
class ProductSearchPageType
{
	/**
	 * @var string | Applications should remove dependencies on this element.
	 */
	public $dataelements;
	/**
	 * @var CharacteristicsSetType | A list of attributes that describe the choice of search criteria          for the specified
	 * characteristic set. The order in which the criteria are returned          is not significant
	 * and may vary for different requests. See the eBay Web Services guide          for details
	 * about how to use this data as input to GetProductSearchResults.
	 */
	public $searchcharacteristicsset;
	/**
	 * @var CharacteristicsSearchCodeType | Indicates whether one attribute or multiple attributes can be used as the search keyword
	 *          when calling GetProductSearchResults. Applications can ignore this data because
	 *          GetProductSearchPage only supports single-attribute searches.          Use GetProductFinder
	 * to determine valid multi-attribute searches.
	 */
	public $searchtype;
	/**
	 * @var CharacteristicType | A product aspect or feature that can be used as a key for sorting catalog search results.
	 *          This does not necessarily match a searchable attribute. For example, you might
	 * be able to          search on a product's title but sort the results by the release date
	 * or the manufacturer's          suggested retail price (MSRP). At least one sort attribute
	 * is always returned.          Applications should ensure that only one attribute is selected
	 * as a sort key from          these results (before calling GetProductSearchResults). The
	 * default sort key is the one          with the lowest DisplaySequence value.          The
	 * order in which the SortCharacteristics nodes are returned is not significant and may vary
	 * for          different requests.          See the eBay Web Services guide for details about
	 * how to use this data as input to          GetProductSearchResults.
	 */
	public $sortcharacteristics;
	/**
	 * @var DataElementSetType | Contains helpful hints for the user. Usage of this information is optional.
	 */
	public $dataelementset;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDataElements($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DataElements');
        }
        $this->dataelements = (int)$val;
	}

	/**
	 * @param CharacteristicsSetType $val
	 * @throws Exception
	 */
	public function setSearchCharacteristicsSet($val)
	{
        $this->searchcharacteristicsset = (int)$val;
	}

	/**
	 * @param CharacteristicsSearchCodeType $val
	 * @throws Exception
	 */
	public function setSearchType($val)
	{
        $this->searchtype = (int)$val;
	}

	/**
	 * @param CharacteristicType $val
	 * @throws Exception
	 */
	public function setSortCharacteristics($val)
	{
        $this->sortcharacteristics = (int)$val;
	}

	/**
	 * @param DataElementSetType $val
	 * @throws Exception
	 */
	public function setDataElementSet($val)
	{
        $this->dataelementset = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProductSearchResultType
 * Container for the results of a product query. Supports Pre-filled Product Information functionality. See
 * the Developer's Guide for more information about working with this data.
 */
class ProductSearchResultType
{
	/**
	 * @var int | The approximate quantity of pages of results that match the product search query
	 *         (TotalProducts divided by the median number of products per page examined so far).
	 *               Always returned when AttributeSet is returned.               For GetProductSearchResults,
	 * only returned with compatibility level 387 and higher.               For GetProductFamilyMembers,
	 * only returned with compatibility level 415 and higher.               With lower compatibility
	 * levels, ProductSearchResult.ApproximatePages is returned instead.
	 */
	public $approximatepages;
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @var boolean | If true, the query results contain additional pages (higher than the current page number). You
	 * can retrieve more results by incrementing the PageNumber value that was passed in the request.
	 *               For GetProductSearchResults, only returned with compatibility level 387 and
	 * higher.               For GetProductFamilyMembers, only returned with compatibility level
	 * 415 and higher.               With lower compatibility levels, ProductSearchResult.HasMore
	 * is returned instead.
	 */
	public $hasmore;
	/**
	 * @var ProductFamilyType | ProductFamilies represents one product family. Multiple ProductFamilies               properties
	 * can be returned. A product family identifies a group of related products.
	 *  For example, the movie "My Favorite Movie: The Sequel" might be released on DVD, but there
	 *               might be several editions of the DVD (e.g., in different languages) with
	 * different ISBN numbers.               All variations are part of the same product family
	 * ("My Favorite Movie: The Sequel" in the DVD format).               See "Limit the Quantity
	 * of Products Returned Per Family" in the eBay Web Services Guide.               Always returned
	 * when AttributeSet is returned.               For GetProductSearchResults, only returned
	 * with compatibility level 387 and higher.               For GetProductFamilyMembers, only
	 * returned with compatibility level 415 and higher.               With lower compatibility
	 * levels, ProductSearchResult.ProductFamilies is returned instead.
	 */
	public $productfamilies;
	/**
	 * @var ProductFinderConstraintType | A list of attributes (constraints) that were specified in the search request.
	 *      This information is useful when multiple queries were specified in a
	 *  GetProductSearchResults request. Use this information to map each query
	 * to each result in the response object.               Applicable when the search request
	 * was constructed based on a product finder.               For GetProductSearchResults, only
	 * returned with compatibility level 387 and higher.               With lower compatibility
	 * levels, ProductSearchResult.ProductFinderConstraints is returned instead.
	 *  Not applicable to GetProductFamilyMembers.
	 */
	public $productfinderconstraints;
	/**
	 * @var boolean | If too many search results match the query, the TooManyMatchesFound tag is returned
	 *         with a value of true, and a warning is returned.            If this occurs, it
	 * may be a good idea to ask the user to specify more details to narrow the search
	 *     (e.g., specify "My Favorite Movie" instead of "My").            For GetProductSearchResults,
	 * only returned with compatibility level 387 and higher.            With lower compatibility
	 * levels, ProductSearchResult.TooManyMatchesFound is returned instead. Returns false for
	 * GetProductFamilyMembers.
	 */
	public $toomanymatchesfound;
	/**
	 * @var int | The total quantity of products that match the query (within               the characteristic
	 * set). This can exceed the actual number               of products returned in the current
	 * virtual page. Always returned when AttributeSet is returned.               For GetProductSearchResults,
	 * only returned with compatibility level 387 and higher.               For GetProductFamilyMembers,
	 * only returned with compatibility level 415 and higher.               With lower compatibility
	 * levels, ProductSearchResult.TotalProducts is returned instead.
	 */
	public $totalproducts;
	/**
	 * @var string | Key you specified in ProductSearchID in the search request to distinguish between query
	 * results. Primarily useful when conducting multiple searches in the same call. If no ProductSearchID
	 * value was specified in the request, returns the array index of the search result (beginning
	 * with 0). Not applicable to GetProductFamilyMembers.
	 */
	public $id;
	/**
	 * @var string | Total quantity of products that match the search request (across all characteristic sets).
	 * This value can exceed the actual quantity of products returned in the current virtual page. Not
	 * applicable to GetProductFamilyMembers.
	 */
	public $numproducts;
	/**
	 * @var ResponseAttributeSetType | A result containing a set of one or more product families. For GetProductSearchResults,
	 * if QueryKeywords and multiple characteristic set IDs were specified in the request, multiple
	 * AttributeSet objects can be returned. Each AttributeSet corresponds to a characteristic
	 * set ID specified in the request. See the eBay Web Services guide for more information about
	 * working with this data. For GetProductSearchResults, only returned with request version
	 * 387 and higher. For GetProductFamilyMembers, only returned with request version 415 and
	 * higher.
	 */
	public $attributeset;
	/**
	 * @var boolean | If true, your application should attempt to display stock photos that are returned. If
	 * false, your application should not attempt to display any stock photos that are returned.
	 * This recommendation is useful for catalog data related to products like coins, where stock
	 * photos are not applicable. An application with a graphical user interface can use this
	 * flag to determine when to hide stock photo widgets for a set of search results.
	 */
	public $displaystockphotos;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setApproximatePages($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->approximatepages = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMore($val)
	{
        $this->hasmore = (int)$val;
	}

	/**
	 * @param ProductFamilyType $val
	 * @throws Exception
	 */
	public function setProductFamilies($val)
	{
        $this->productfamilies = (int)$val;
	}

	/**
	 * @param ProductFinderConstraintType $val
	 * @throws Exception
	 */
	public function setProductFinderConstraints($val)
	{
        $this->productfinderconstraints = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setTooManyMatchesFound($val)
	{
        $this->toomanymatchesfound = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalProducts($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalproducts = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ID');
        }
        $this->id = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setNumProducts($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for NumProducts');
        }
        $this->numproducts = (int)$val;
	}

	/**
	 * @param ResponseAttributeSetType $val
	 * @throws Exception
	 */
	public function setAttributeSet($val)
	{
        $this->attributeset = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDisplayStockPhotos($val)
	{
        $this->displaystockphotos = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProductSearchType
 * Container for a product query and pagination instructions.      This data is applicable
 * when searching eBay catalogs for stock product      information (to use in listings with
 * Pre-filled Item Information.)      Input only.
 */
class ProductSearchType
{
	/**
	 * @var string | Unique alphanumeric key help you distinguish between query results in the response.
	 *         You define the key. Each search request ID must be unique within the same call.
	 *            Primarily useful when conducting multiple searches in the same call.
	 *     If not specified, the ProductSearchResult.ID values in the response are
	 * indexed starting from 0 (zero).
	 */
	public $productsearchid;
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @var int | Numeric identifier for a buy-side product finder. A product finder defines how to
	 *        search for Item Specifics in listings (e.g., how to search against a particular
	 * shoe size).            See the eBay Web Services guide for details about product finders.
	 *            You need to specify a product finder ID when you are searching against a listing's
	 *             Item Specifics (i.e., when you use SearchAttributes). A few categories, such
	 * as US Event Tickets and US eBay Motors, can also return a subset of Item Specifics (e.g.,
	 * the event venue, section, and row for a ticket listing) in the search results. To retrieve
	 * this data, you must specify the product finder ID, and also specify a detail level of ItemReturnAttributes
	 * or ReturnAll. Use GetProductFinder to determine valid product finder IDs.
	 */
	public $productfinderid;
	/**
	 * @var string | Identifier for a representative stock product in a product family.            Used as input
	 * in GetProductFamilyMembers requests to identify a product family.            Use GetProductSearchResults
	 * to determine the available IDs.
	 */
	public $productid;
	/**
	 * @var int | Unique identifier for a sortable attribute. Use GetProductSearchPage or GetProductFinder
	 * to determine the valid sort attribute IDs for the specified characteristic set (including
	 * the default sort attribute that will be used if you do not specify this field).
	 */
	public $sortattributeid;
	/**
	 * @var int | Pagination instruction that specifies the maximum quantity of products to return for each
	 *            product family within the search response whose ID matches the current request's
	 * ID.            In the response, if the last family returned contains MaxChildrenPerFamily
	 * or fewer            additional products, those additional products are also returned (i.e.,
	 * the actual quantity            returned for the last family can exceed the specified maximum
	 * value).            See "Limit the Quantity of Products Returned Per Family" in the eBay
	 * Web Services Guide.            The value should not include punctuation (i.e., a thousands
	 * separator is not valid).
	 */
	public $maxchildrenperfamily;
	/**
	 * @var SearchAttributesType | A query consisting of a set of attributes (search criteria). If the query             includes
	 * multiple attributes, the search engine will apply "AND" logic to the             query.
	 * Use GetProductFinder to determine the list of valid attributes             and how many
	 * are permitted for the specified characteristic set.            If specified, ProductFinderID
	 * must also be specified.
	 */
	public $searchattributes;
	/**
	 * @var PaginationType | Pagination instruction that specifies the virtual page of data to return            per
	 * search request. Default page number is 0 (the first page).            Specify a page number
	 * of 0 or a positive value lower            than the approximate number of pages available.
	 */
	public $pagination;
	/**
	 * @var boolean | Filter to only retrieve products that match active eBay listings. This may be used as an
	 * indicator to determine which products other sellers recently used to pre-fill similar listings. If
	 * true, only retrieve products that have been used to pre-fill active listings on the
	 *         specified eBay site. If false, retrieve all products that match the query.
	 */
	public $availableitemsonly;
	/**
	 * @var string | One or more keywords to search for in the characteristic set specified in            CharacteristicSetIDs.
	 * Both the product title and Item Specifics are searched. For each ProductSearch, either
	 * SearchAttributes or QueryKeywords is required (but do not pass both). Blank searches are
	 * not applicable (and result in a warning). The words "and" and "or" are treated like any
	 * other word. Only use "and", "or", or "the" if you are searching for products containing these
	 * words. To use AND or OR logic, use eBay's standard search string modifiers. Wildcards (+,
	 * -, or *) are also supported. Be careful when using spaces before or after modifiers and
	 * wildcards.
	 */
	public $querykeywords;
	/**
	 * @var CharacteristicSetIDsType | List of one or more characteristic set IDs that indicate which characteristic sets
	 *         to search in. If not specified, the search is conducted across all characteristic
	 * sets. Only applicable when QueryKeywords is specified. Ignored when SearchAttributes is
	 * specified.
	 */
	public $characteristicsetids;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductSearchID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductSearchID');
        }
        $this->productsearchid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductFinderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productfinderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductID');
        }
        $this->productid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSortAttributeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->sortattributeid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxChildrenPerFamily($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxchildrenperfamily = (int)$val;
	}

	/**
	 * @param SearchAttributesType $val
	 * @throws Exception
	 */
	public function setSearchAttributes($val)
	{
        $this->searchattributes = (int)$val;
	}

	/**
	 * @param PaginationType $val
	 * @throws Exception
	 */
	public function setPagination($val)
	{
        $this->pagination = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAvailableItemsOnly($val)
	{
        $this->availableitemsonly = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setQueryKeywords($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for QueryKeywords');
        }
        $this->querykeywords = (int)$val;
	}

	/**
	 * @param CharacteristicSetIDsType $val
	 * @throws Exception
	 */
	public function setCharacteristicSetIDs($val)
	{
        $this->characteristicsetids = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProductType
 * A prototype description of a well-known type of item, such as a popular book.      Applicable
 * when working with eBay's Pre-filled Item Information feature.
 */
class ProductType
{
	/**
	 * @var CharacteristicsSetType | Container for site-wide characteristics set information.
	 */
	public $characteristicsset;
	/**
	 * @var anyURI | Fully qualified URL for optional information about the product,            such as a movie's
	 * description or film credits. This information            is hosted through the eBay site
	 * and cannot be edited.            Applications can include this URL as a link in product
	 * search results            so that end users can view additional descriptive details about
	 * the product.
	 */
	public $detailsurl;
	/**
	 * @var int | Total number of active listings on the specified eBay site            that were pre-filled
	 * based on this product.
	 */
	public $numitems;
	/**
	 * @var AmountType | Specifies the lower limit of price range for the automatic search criteria.
	 */
	public $minprice;
	/**
	 * @var AmountType | Specifies the upper limit of price range for the automatic search criteria.
	 */
	public $maxprice;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var string
	 */
	public $productid;
	/**
	 * @var anyURI
	 */
	public $stockphotourl;
	/**
	 * @var string
	 */
	public $title;
	/**
	 * @param CharacteristicsSetType $val
	 * @throws Exception
	 */
	public function setCharacteristicsSet($val)
	{
        $this->characteristicsset = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setDetailsURL($val)
	{
        $this->detailsurl = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setNumItems($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->numitems = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinPrice($val)
	{
        $this->minprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMaxPrice($val)
	{
        $this->maxprice = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for productID');
        }
        $this->productid = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setStockPhotoURL($val)
	{
        $this->stockphotourl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for title');
        }
        $this->title = (int)$val;
	}
}

class ProductUseCaseCodeType
{
	const ADDITEM    = 'AddItem';
	const REVISEITEM = 'ReviseItem';
	const RELISTITEM = 'RelistItem';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * PromotedItemType
 * Contains the data describing one cross-promoted item.
 */
class PromotedItemType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Deprecated with compatibility level 383 and higher. Contains the URL for an image hosted
	 * on a location of the seller's choice (other than eBay) and associated with an item. If
	 * specified, this cannot have an empty/null value. You cannot specify multiple PictureURL
	 * fields. In most cases, the picture URL is also used for the picture at the top of the View
	 * Item page on the Web site.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL argument.<br> With compatibility 383 and higher,
	 * see SelfHostedURL instead.<br> With the future deprecation of VendorHostedPicture as input, applications
	 * should use Item.PictureDetails.PictureURL instead. See Item.PictureDetails.PictureURL for
	 * information about how to remove pictures from a listing.<br> For retrieval calls (e.g.,
	 * GetItem):<br> With compatibility levels lower than 383, PictureURL is returned.<br> With
	 * compatibility levels between 383 and 439, SelfHostedURL is returned instead.<br> With compatibility
	 * 439 and higher,  Item.PictureDetails.PictureURL is returned instead. <br><br> Note that
	 * the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
	 * with that feature.
	 */
	public $pictureurl;
	/**
	 * @var string | URL for multiple, self-hosted pictures (if any) that are stored/hosted at a non-eBay site
	 * and used for the item. If specified, do not pass an empty/null value. On the main eBay
	 * site, if you specify multiple SelfHostedURL fields in listing calls, PhotoDisplay must
	 * be set to VendorHostedPictureShow.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL field.<br> With compatibility 383 and higher,
	 * specify up to 6 SelfHostedURL fields.<br> For eBay Live Auctions, specify up to 5 SelfHostedURL
	 * fields. With the future deprecation of VendorHostedPicture as input, Applications should
	 * use Item.PictureDetails.PictureURL instead.<br> For retrieval calls (e.g., GetItem):<br> With
	 * compatibility levels lower than 383, PictureURL is returned.<br> With compatibility levels
	 * between 383 and 439, SelfHostedURL is returned.<br> With compatibility 439 and higher,
	 *  Item.PictureDetails.PictureURL is returned.
	 */
	public $selfhostedurl;
	/**
	 * @var int | The ordinal position of the cross-promoted item in the display. If the display is from
	 * top to bottom, 1 is at top. If the display is from left to right, 1 is at left. Output
	 * only.
	 */
	public $position;
	/**
	 * @var AmountType | The price of the cross-promoted item in the currency of the site upon which the item is
	 * listed. Output only. If the item is listed on a site different from the site specified
	 * in the request, then ConvertedPromotionPrice is also returned.
	 */
	public $promotionprice;
	/**
	 * @var PromotionItemPriceTypeCodeType | The listing type for the promoted item and how the item price is used.
	 */
	public $promotionpricetype;
	/**
	 * @var PromotionItemSelectionCodeType | The manner in which the cross-promoted item was chosen to be associated with the referring
	 * item. Output only.
	 */
	public $selectiontype;
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @var ListingTypeCodeType | The listing format (fixed price, auction, etc) for the automatic item search criteria.
	 */
	public $listingtype;
	/**
	 * @var PromotionDetailsType | Contains the details about the promoted item for a given PromotionPriceType. Output only.
	 * Returned with request versions 485 or higher.
	 */
	public $promotiondetails;
	/**
	 * @var duration | Time left before the listing for the cross-promoted item ends. Output only. The duration
	 * is represented in the ISO 8601 duration format (PnYnMnDTnHnMnS). See Data Types in the
	 * eBay Web Services guide for information about this format. For ended listings, the time
	 * left is PT0S (zero seconds).
	 */
	public $timeleft;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPictureURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PictureURL');
        }
        $this->pictureurl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSelfHostedURL($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SelfHostedURL');
        }
        $this->selfhostedurl = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPosition($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->position = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setPromotionPrice($val)
	{
        $this->promotionprice = (int)$val;
	}

	/**
	 * @param PromotionItemPriceTypeCodeType $val
	 * @throws Exception
	 */
	public function setPromotionPriceType($val)
	{
        $this->promotionpricetype = (int)$val;
	}

	/**
	 * @param PromotionItemSelectionCodeType $val
	 * @throws Exception
	 */
	public function setSelectionType($val)
	{
        $this->selectiontype = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setListingType($val)
	{
        $this->listingtype = (int)$val;
	}

	/**
	 * @param PromotionDetailsType $val
	 * @throws Exception
	 */
	public function setPromotionDetails($val)
	{
        $this->promotiondetails = (int)$val;
	}

	/**
	 * @param duration $val
	 * @throws Exception
	 */
	public function setTimeLeft($val)
	{
        $this->timeleft = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * PromotionDetailsType
 * Contains information about a promoted item.
 */
class PromotionDetailsType
{
	/**
	 * @var AmountType | The price of the cross-promoted item in the currency of the site upon which the item is
	 * listed. Output only. If the item is listed on a site different from the site specified
	 * in the request, then ConvertedPromotionPrice is also returned.
	 */
	public $promotionprice;
	/**
	 * @var PromotionItemPriceTypeCodeType | The listing type for the promoted item and how the item price is used.
	 */
	public $promotionpricetype;
	/**
	 * @var int | Number of bids placed so far against the item. Only applicable to competitive-bidding listings
	 * (Chinese and Dutch auctions).
	 */
	public $bidcount;
	/**
	 * @var AmountType | The converted price of the cross-promoted item. Output only. Emitted only when the item
	 * is listed on a site other than the site specified in the request. Returns the price in
	 * the currency of the site specified in the request.
	 */
	public $convertedpromotionprice;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setPromotionPrice($val)
	{
        $this->promotionprice = (int)$val;
	}

	/**
	 * @param PromotionItemPriceTypeCodeType $val
	 * @throws Exception
	 */
	public function setPromotionPriceType($val)
	{
        $this->promotionpricetype = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidcount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedPromotionPrice($val)
	{
        $this->convertedpromotionprice = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PromotionItemPriceTypeCodeType
{
	const AUCTIONPRICE       = 'AuctionPrice';
	const BUYITNOWPRICE      = 'BuyItNowPrice';
	const BESTOFFERONLYPRICE = 'BestOfferOnlyPrice';
	const CLASSIFIEDADPRICE  = 'ClassifiedAdPrice';
	const CUSTOMCODE         = 'CustomCode';
}

class PromotionItemSelectionCodeType
{
	const MANUAL     = 'Manual';
	const AUTOMATIC  = 'Automatic';
	const CUSTOMCODE = 'CustomCode';
}

class PromotionMethodCodeType
{
	const CROSSSELL  = 'CrossSell';
	const UPSELL     = 'UpSell';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * PromotionRuleArrayType
 * Contains a list of cross-promotion rules. Each PromotionRuleType defines one rule.
 */
class PromotionRuleArrayType
{
	/**
	 * @var PromotionRuleType | Defines one cross-promotion rule.
	 */
	public $promotionrule;
	/**
	 * @param PromotionRuleType $val
	 * @throws Exception
	 */
	public function setPromotionRule($val)
	{
        $this->promotionrule = (int)$val;
	}
}

/**
 * PromotionRuleType
 * Defines a rule that promotes items or a store category when  a buyer views a specific item
 * or store category.
 */
class PromotionRuleType
{
	/**
	 * @var PromotedItemType | The unique item ID of the cross-promoted item. Use for an ItemToItem rule.
	 */
	public $promoteditem;
	/**
	 * @var SiteCodeType | 	 */
	public $siteid;
	/**
	 * @var int | The ID of the Store category being promoted. Use with a promotion scheme of ItemToStoreCat,
	 * StoreToStoreCat, ItemToDefaultRule, or DefaultRule. Only for Store owners.
	 */
	public $promotedstorecategoryid;
	/**
	 * @var string | The ID of the eBay category being promoted. Use with a promotion scheme of ItemToDefaultRule
	 * or DefaultRule.
	 */
	public $promotedebaycategoryid;
	/**
	 * @var string | The keywords that identify promoted items. Use with a promotion scheme of ItemToDefaultRule
	 * or DefaultRule. Only for Store owners.
	 */
	public $promotedkeywords;
	/**
	 * @var ItemIDType | The unique ID of the item the buyer is viewing or purchasing. Use with a promotion scheme
	 * of ItemToItem or ItemToStoreCat. Always use ReferringItemID or ReferringStoreCategoryID,
	 * but not both.
	 */
	public $referringitemid;
	/**
	 * @var int | The ID of the store category the user is browsing. Use with a promotion scheme of StoreToStoreCat,
	 * ItemToDefaultRule or DefaultRule. Always use ReferringStoreCategoryID or ReferringItemID,
	 * but not both.
	 */
	public $referringstorecategoryid;
	/**
	 * @var string | The ID of the eBay category being referred. Use with a promotion scheme or ItemToDefaultRule
	 * or DefaultRule.
	 */
	public $referringebaycategoryid;
	/**
	 * @var string | The keywords that identify referring items. Use with a promotion scheme of ItemToDefaultRule
	 * or DefaultRule. Only for Store owners.
	 */
	public $referringkeywords;
	/**
	 * @var PromotionSchemeCodeType | The type of cross-promotion scheme you are defining.
	 */
	public $promotionscheme;
	/**
	 * @var PromotionMethodCodeType | The type of cross promotion, CrossSell or UpSell.
	 */
	public $promotionmethod;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param PromotedItemType $val
	 * @throws Exception
	 */
	public function setPromotedItem($val)
	{
        $this->promoteditem = (int)$val;
	}

	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSiteID($val)
	{
        $this->siteid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPromotedStoreCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->promotedstorecategoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPromotedeBayCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PromotedeBayCategoryID');
        }
        $this->promotedebaycategoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPromotedKeywords($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PromotedKeywords');
        }
        $this->promotedkeywords = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setReferringItemID($val)
	{
        $this->referringitemid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setReferringStoreCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->referringstorecategoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setReferringeBayCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ReferringeBayCategoryID');
        }
        $this->referringebaycategoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setReferringKeywords($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ReferringKeywords');
        }
        $this->referringkeywords = (int)$val;
	}

	/**
	 * @param PromotionSchemeCodeType $val
	 * @throws Exception
	 */
	public function setPromotionScheme($val)
	{
        $this->promotionscheme = (int)$val;
	}

	/**
	 * @param PromotionMethodCodeType $val
	 * @throws Exception
	 */
	public function setPromotionMethod($val)
	{
        $this->promotionmethod = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class PromotionSchemeCodeType
{
	const ITEMTOITEM            = 'ItemToItem';
	const ITEMTOSTORECAT        = 'ItemToStoreCat';
	const STORETOSTORECAT       = 'StoreToStoreCat';
	const ITEMTODEFAULTRULE     = 'ItemToDefaultRule';
	const DEFAULTRULE           = 'DefaultRule';
	const CATEGORYPROXIMITY     = 'CategoryProximity';
	const RELATEDCATEGORYRULE   = 'RelatedCategoryRule';
	const DEFAULTUPSELLLOGIC    = 'DefaultUpSellLogic';
	const DEFAULTCROSSSELLLOGIC = 'DefaultCrossSellLogic';
	const CUSTOMCODE            = 'CustomCode';
}

/**
 * ProximitySearchDetailsType
 * Contains information for use in proximity search.
 */
class ProximitySearchDetailsType
{
	/**
	 * @var string | The postal code to use as the basis for the proximity search.
	 */
	public $postalcode;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PostalCode');
        }
        $this->postalcode = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ProximitySearchType
 * Contains data for filtering a search by proximity.
 */
class ProximitySearchType
{
	/**
	 * @var int | The maximum distance from the specified postal code to search for items.
	 */
	public $maxdistance;
	/**
	 * @var string | The postal code to use as the basis for the proximity search.
	 */
	public $postalcode;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxDistance($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxdistance = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PostalCode');
        }
        $this->postalcode = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class QuantityOperatorCodeType
{
	const LESSTHAN           = 'LessThan';
	const LESSTHANOREQUAL    = 'LessThanOrEqual';
	const EQUAL              = 'Equal';
	const GREATERTHAN        = 'GreaterThan';
	const GREATERTHANOREQUAL = 'GreaterThanOrEqual';
	const CUSTOMCODE         = 'CustomCode';
}

class QuestionTypeCodeType
{
	const GENERAL              = 'General';
	const SHIPPING             = 'Shipping';
	const PAYMENT              = 'Payment';
	const MULTIPLEITEMSHIPPING = 'MultipleItemShipping';
	const CUSTOMCODE           = 'CustomCode';
}

class RcSpaymentStatusCodeType
{
	const CANCELED   = 'Canceled';
	const PAID       = 'Paid';
	const PENDING    = 'Pending';
	const CUSTOMCODE = 'CustomCode';
}

class RangeCodeType
{
	const HIGH       = 'High';
	const LOW        = 'Low';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * ReasonCodeDetailType
 * A container for VeRO reason code details.
 */
class ReasonCodeDetailType
{
	/**
	 * @var string | The short description of the infringement associated with the reason code ID.
	 */
	public $brieftext;
	/**
	 * @var string | The long description of the infringement associated with the reason code ID.
	 */
	public $detailedtext;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @var long
	 */
	public $codeid;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBriefText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BriefText');
        }
        $this->brieftext = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDetailedText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DetailedText');
        }
        $this->detailedtext = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setCodeID($val)
	{
        $this->codeid = (int)$val;
	}
}

class RecipientRelationCodeType
{
	const VALUE_1    = 'value_1';
	const VALUE_2    = 'value_2';
	const VALUE_3    = 'value_3';
	const VALUE_4    = 'value_4';
	const CUSTOMCODE = 'CustomCode';
}

class RecommendationEngineCodeType
{
	const LISTINGANALYZER     = 'ListingAnalyzer';
	const SIFFTAS             = 'SIFFTAS';
	const PRODUCTPRICING      = 'ProductPricing';
	const CUSTOMCODE          = 'CustomCode';
	const SUGGESTEDATTRIBUTES = 'SuggestedAttributes';
}

/**
 * RefundArrayType
 * Contains an array of refunds.
 */
class RefundArrayType
{
	/**
	 * @var RefundType | Contains information about one refund. Applicable to Half.com (for GetOrders).
	 */
	public $refund;
	/**
	 * @param RefundType $val
	 * @throws Exception
	 */
	public function setRefund($val)
	{
        $this->refund = (int)$val;
	}
}

class RefundReasonCodeType
{
	const CANNOTSHIPPRODUCT = 'CannotShipProduct';
	const WRONGITEMSHIPPED  = 'WrongItemShipped';
	const ITEMBADQUALITY    = 'ItemBadQuality';
	const ITEMDAMAGED       = 'ItemDamaged';
	const BUYERREMORSE      = 'BuyerRemorse';
	const OTHER             = 'Other';
	const CUSTOMCODE        = 'CustomCode';
}

/**
 * RefundType
 * Contains information about a single refund. A refund contains information about the amount
 * refunded for a transaction to a single buyer. This refund contains information about the
 * amount refunded from seller, refunded time and total amount refunded to buyer (amount from
 * seller + half)
 */
class RefundType
{
	/**
	 * @var AmountType | Total amount refunded by the seller for this transaction. Applicable to Half.com (for GetOrders).
	 */
	public $refundfromseller;
	/**
	 * @var AmountType | Total amount refunded to the buyer for this transaction. Applicable to Half.com (for GetOrders).
	 */
	public $totalrefundtobuyer;
	/**
	 * @var dateTime | The date and time at which the refund was issued. Applicable to Half.com (for GetOrders).
	 */
	public $refundtime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setRefundFromSeller($val)
	{
        $this->refundfromseller = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalRefundToBuyer($val)
	{
        $this->totalrefundtobuyer = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setRefundTime($val)
	{
        $this->refundtime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class RefundTypeCodeType
{
	const FULL             = 'Full';
	const FULLPLUSSHIPPING = 'FullPlusShipping';
	const CUSTOMORPARTIAL  = 'CustomOrPartial';
	const CUSTOMCODE       = 'CustomCode';
}

/**
 * RegionDetailsType
 * Details about a region.
 */
class RegionDetailsType
{
	/**
	 * @var string | Specifies a region ID. The item must have been listed for the specified region to be returned
	 * in the search result set.
	 */
	public $regionid;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRegionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RegionID');
        }
        $this->regionid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * RelatedSearchKeywordArrayType
 * Container for a list of related keywords.
 */
class RelatedSearchKeywordArrayType
{
	/**
	 * @var string | Related keyword.
	 */
	public $keyword;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setKeyword($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Keyword');
        }
        $this->keyword = (int)$val;
	}
}

/**
 * ReminderCustomizationType
 * Specifies how to return certain reminder types from the user's My eBay account.
 */
class ReminderCustomizationType
{
	/**
	 * @var int | The length of time the reminder has existed in the user's My eBay account, in days. Valid
	 * values are 1-60.
	 */
	public $durationindays;
	/**
	 * @var boolean | Whether to include information about this type of reminder in the response. When true,
	 * the container is returned with default input parameters.
	 */
	public $include;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setDurationInDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->durationindays = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setInclude($val)
	{
        $this->include = (int)$val;
	}
}

/**
 * RemindersType
 * Specifies the type of reminders for which you want information.
 */
class RemindersType
{
	/**
	 * @var int | The number of reminders requesting that the buyer send payment.
	 */
	public $paymenttosendcount;
	/**
	 * @var int | The number of reminders that feedback has not yet been received by the buyer or seller.
	 */
	public $feedbacktoreceivecount;
	/**
	 * @var int | The number of reminders that feedback has not yet been sent by the buyer or seller.
	 */
	public $feedbacktosendcount;
	/**
	 * @var int | The number of reminders advising the buyer that the buyer has been outbid.
	 */
	public $outbidcount;
	/**
	 * @var int | The number of reminders that the seller has not yet received a payment.
	 */
	public $paymenttoreceivecount;
	/**
	 * @var int | The number of reminders requesting that the seller review second chance offers.
	 */
	public $secondchanceoffercount;
	/**
	 * @var int | The number of reminders advising the seller that shipping is needed.
	 */
	public $shippingneededcount;
	/**
	 * @var int | The number of reminders advising the seller that relisting is needed.
	 */
	public $relistingneededcount;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPaymentToSendCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->paymenttosendcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackToReceiveCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbacktoreceivecount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackToSendCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbacktosendcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setOutbidCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->outbidcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPaymentToReceiveCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->paymenttoreceivecount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSecondChanceOfferCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->secondchanceoffercount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingNeededCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingneededcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setRelistingNeededCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->relistingneededcount = (int)$val;
	}
}

/**
 * RequestCategoriesType
 * A set of parameters that control the retrieval of categories (not items) that match a search
 * query. In GetSearchResults, at least one child element must be specified in order to retrieve
 * matching categories. If empty or not present, no matching category information is returned.
 * .
 */
class RequestCategoriesType
{
	/**
	 * @var boolean | Filter to retrieve matching categories but not matching items or buying guides. If true,
	 * only matching categories are returned (with no item or buying guide details). If false
	 * or not present, matching items and matching categories are both returned, along with buying
	 * guide details (if any). If TotalOnly and Categories.CategoriesOnly are both specified in
	 * the request and their values are inconsistent with each other, TotalOnly overrides Categories.CategoriesOnly. That
	 * is, if TotalOnly is true and Categories.CategoriesOnly is false, the results include matching
	 * categories but no item data or buying guides. If TotalOnly is false and Categories.CategoriesOnly
	 * is true, the results include matching categories, item data, and buying guides.
	 */
	public $categoriesonly;
	/**
	 * @var int | Maximum quantity of matching categories to return at the first level of the
	 *  category hierarchy (CategoryLevel 1).
	 */
	public $maxcategories;
	/**
	 * @var int | Maximum quantity of matching subcategories to return at each lower level             of
	 * the hierarchy.
	 */
	public $maxsubcategories;
	/**
	 * @var int | Filter to control the deepest matching category level to return.             If you specify
	 * 0, no category data is returned. If you specify a negative number,             the results
	 * are unpredictable.
	 */
	public $levels;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCategoriesOnly($val)
	{
        $this->categoriesonly = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxCategories($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxcategories = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxSubcategories($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxsubcategories = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLevels($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->levels = (int)$val;
	}
}

/**
 * ResponseAttributeSetType
 * A single set of one or more product families and related information returned in the results
 * of a product search. Supports Pre-filled Item Information functionality. See the Developer's
 * Guide for more information about working with this data.
 */
class ResponseAttributeSetType
{
	/**
	 * @var int | The approximate quantity of pages of results that match the product search query
	 *         (TotalProducts divided by the median number of products per page examined so far).
	 *               Always returned when AttributeSet is returned.               For GetProductSearchResults,
	 * only returned with compatibility level 387 and higher.               For GetProductFamilyMembers,
	 * only returned with compatibility level 415 and higher.               With lower compatibility
	 * levels, ProductSearchResult.ApproximatePages is returned instead.
	 */
	public $approximatepages;
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @var boolean | If true, the query results contain additional pages (higher than the current page number). You
	 * can retrieve more results by incrementing the PageNumber value that was passed in the request.
	 *               For GetProductSearchResults, only returned with compatibility level 387 and
	 * higher.               For GetProductFamilyMembers, only returned with compatibility level
	 * 415 and higher.               With lower compatibility levels, ProductSearchResult.HasMore
	 * is returned instead.
	 */
	public $hasmore;
	/**
	 * @var ProductFamilyType | ProductFamilies represents one product family. Multiple ProductFamilies               properties
	 * can be returned. A product family identifies a group of related products.
	 *  For example, the movie "My Favorite Movie: The Sequel" might be released on DVD, but there
	 *               might be several editions of the DVD (e.g., in different languages) with
	 * different ISBN numbers.               All variations are part of the same product family
	 * ("My Favorite Movie: The Sequel" in the DVD format).               See "Limit the Quantity
	 * of Products Returned Per Family" in the eBay Web Services Guide.               Always returned
	 * when AttributeSet is returned.               For GetProductSearchResults, only returned
	 * with compatibility level 387 and higher.               For GetProductFamilyMembers, only
	 * returned with compatibility level 415 and higher.               With lower compatibility
	 * levels, ProductSearchResult.ProductFamilies is returned instead.
	 */
	public $productfamilies;
	/**
	 * @var ProductFinderConstraintType | A list of attributes (constraints) that were specified in the search request.
	 *      This information is useful when multiple queries were specified in a
	 *  GetProductSearchResults request. Use this information to map each query
	 * to each result in the response object.               Applicable when the search request
	 * was constructed based on a product finder.               For GetProductSearchResults, only
	 * returned with compatibility level 387 and higher.               With lower compatibility
	 * levels, ProductSearchResult.ProductFinderConstraints is returned instead.
	 *  Not applicable to GetProductFamilyMembers.
	 */
	public $productfinderconstraints;
	/**
	 * @var boolean | If too many search results match the query, the TooManyMatchesFound tag is returned
	 *         with a value of true, and a warning is returned.            If this occurs, it
	 * may be a good idea to ask the user to specify more details to narrow the search
	 *     (e.g., specify "My Favorite Movie" instead of "My").            For GetProductSearchResults,
	 * only returned with compatibility level 387 and higher.            With lower compatibility
	 * levels, ProductSearchResult.TooManyMatchesFound is returned instead. Returns false for
	 * GetProductFamilyMembers.
	 */
	public $toomanymatchesfound;
	/**
	 * @var int | The total quantity of products that match the query (within               the characteristic
	 * set). This can exceed the actual number               of products returned in the current
	 * virtual page. Always returned when AttributeSet is returned.               For GetProductSearchResults,
	 * only returned with compatibility level 387 and higher.               For GetProductFamilyMembers,
	 * only returned with compatibility level 415 and higher.               With lower compatibility
	 * levels, ProductSearchResult.TotalProducts is returned instead.
	 */
	public $totalproducts;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setApproximatePages($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->approximatepages = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHasMore($val)
	{
        $this->hasmore = (int)$val;
	}

	/**
	 * @param ProductFamilyType $val
	 * @throws Exception
	 */
	public function setProductFamilies($val)
	{
        $this->productfamilies = (int)$val;
	}

	/**
	 * @param ProductFinderConstraintType $val
	 * @throws Exception
	 */
	public function setProductFinderConstraints($val)
	{
        $this->productfinderconstraints = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setTooManyMatchesFound($val)
	{
        $this->toomanymatchesfound = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalProducts($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalproducts = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ReviseStatusType
 * Contains data indicating whether an item has been revised since the        listing became
 * active and, if so, which among a subset of properties        have been changed by the revision.
 *        Output only.
 */
class ReviseStatusType
{
	/**
	 * @var boolean | If true, indicates the item was revised since the listing became            active.
	 *         Output only.
	 */
	public $itemrevised;
	/**
	 * @var boolean | If true, indicates that a Buy It Now Price was added for the item.            Only applicable
	 * to US eBay Motors items.            Output only.
	 */
	public $buyitnowadded;
	/**
	 * @var boolean | If true, indicates that the item's Buy It Now price was lowered.            Only applicable
	 * to US eBay Motors items.            Output only.
	 */
	public $buyitnowlowered;
	/**
	 * @var boolean | If true, indicates that the reserve price was lowered for            the item. Only applicable
	 * to US eBay Motors items.            Output only.
	 */
	public $reservelowered;
	/**
	 * @var boolean | If true, indicates that the reserve price was removed            from the item. Only applicable
	 * to US eBay Motors items.            Output only.
	 */
	public $reserveremoved;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setItemRevised($val)
	{
        $this->itemrevised = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBuyItNowAdded($val)
	{
        $this->buyitnowadded = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBuyItNowLowered($val)
	{
        $this->buyitnowlowered = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReserveLowered($val)
	{
        $this->reservelowered = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReserveRemoved($val)
	{
        $this->reserveremoved = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SIFFTASRecommendationsType
 * Reserved for future use..
 */
class SiFfTaSrecommendationsType
{
	/**
	 * @var AttributeSetArrayType | Reserved for future use.
	 */
	public $attributesetarray;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AttributeSetArrayType $val
	 * @throws Exception
	 */
	public function setAttributeSetArray($val)
	{
        $this->attributesetarray = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SKUArrayType
 * A list of stock-keeping unit (SKU) identifiers that a seller uses in listings.
 */
class SkUarrayType
{
	/**
	 * @var SKUType | Identifier defined and used by a seller to identify an item. The seller can use a SKU to
	 * identify one item or use the same SKU for multiple items. Preferable to ApplicationData
	 * for SKUs and inventory tracking. Different sellers can use the same SKUs. This element
	 * can be used by sellers to track complex flows of products and information. This element
	 * preserves a SKU, enabling a seller to obtain it before and after a transaction is created.
	 */
	public $sku;
	/**
	 * @param SKUType $val
	 * @throws Exception
	 */
	public function setSKU($val)
	{
        $this->sku = (int)$val;
	}
}

class SkUtype
{}

class SmSsubscriptionErrorCodeCodeType
{
	const SMSAGGREGATORNOTAVAILABLE   = 'SMSAggregatorNotAvailable';
	const PHONENUMBERINVALID          = 'PhoneNumberInvalid';
	const PHONENUMBERCHANGED          = 'PhoneNumberChanged';
	const PHONENUMBERCARRIERCHANGED   = 'PhoneNumberCarrierChanged';
	const USERREQUESTEDUNREGISTRATION = 'UserRequestedUnregistration';
	const CUSTOMCODE                  = 'CustomCode';
}

/**
 * SMSSubscriptionType
 * (in/out) User data related to notifications.
 */
class SmSsubscriptionType
{
	/**
	 * @var string | The wireless phone number to be used for receiving SMS messages. Max length of phone number
	 * varies by country.
	 */
	public $smsphone;
	/**
	 * @var SMSSubscriptionUserStatusCodeType | Registered/Unregistered/Pending.
	 */
	public $userstatus;
	/**
	 * @var WirelessCarrierIDCodeType | The wireless carrier ID.
	 */
	public $carrierid;
	/**
	 * @var SMSSubscriptionErrorCodeCodeType | Reason for SMS subscription error (postback from thired-party integrator).
	 */
	public $errorcode;
	/**
	 * @var ItemIDType | ID of item to unsubscribe from SMS notification.
	 */
	public $itemtounsubscribe;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSMSPhone($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SMSPhone');
        }
        $this->smsphone = (int)$val;
	}

	/**
	 * @param SMSSubscriptionUserStatusCodeType $val
	 * @throws Exception
	 */
	public function setUserStatus($val)
	{
        $this->userstatus = (int)$val;
	}

	/**
	 * @param WirelessCarrierIDCodeType $val
	 * @throws Exception
	 */
	public function setCarrierID($val)
	{
        $this->carrierid = (int)$val;
	}

	/**
	 * @param SMSSubscriptionErrorCodeCodeType $val
	 * @throws Exception
	 */
	public function setErrorCode($val)
	{
        $this->errorcode = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemToUnsubscribe($val)
	{
        $this->itemtounsubscribe = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SmSsubscriptionUserStatusCodeType
{
	const REGISTERED   = 'Registered';
	const UNREGISTERED = 'Unregistered';
	const PENDING      = 'Pending';
	const FAILED       = 'Failed';
	const CUSTOMCODE   = 'CustomCode';
}

/**
 * SalesTaxType
 * Type for expressing sales tax data.
 */
class SalesTaxType
{
	/**
	 * @var float | The tax percent to apply for a listing shipped to this jurisdiction. The value passed in
	 * is stored with a precision of 3 digits after the decimal point (##.###). GetTaxTable: this
	 * tag has no value if the user's tax table has not been set.
	 */
	public $salestaxpercent;
	/**
	 * @var string | State or jurisdiction for which the sales tax is being collected.            Also returned
	 * for Half.com (for GetOrders).
	 */
	public $salestaxstate;
	/**
	 * @var boolean | Whether shipping costs are to be part of the base amount that is taxed. GetTaxTable: This
	 * tag is empty if the user did not previously provide information.
	 */
	public $shippingincludedintax;
	/**
	 * @var AmountType | (US only) The amount of sales tax. Also returned for Half.com (for GetOrders).
	 */
	public $salestaxamount;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param float $val
	 * @throws Exception
	 */
	public function setSalesTaxPercent($val)
	{
        $this->salestaxpercent = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSalesTaxState($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SalesTaxState');
        }
        $this->salestaxstate = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingIncludedInTax($val)
	{
        $this->shippingincludedintax = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setSalesTaxAmount($val)
	{
        $this->salestaxamount = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ScheduleType
 * Sellers create live auction catalogs and schedule their live auction events by using the
 * eBay Live Auctions Web site user interface. The seller can create a catalog in the Live
 * Auctions system several months before a sale.
 */
class ScheduleType
{
	/**
	 * @var int | Identifier for an event schedule in the seller's Live Auctions catalog.
	 */
	public $scheduleid;
	/**
	 * @var dateTime | Date and time that the sale schedule starts.
	 */
	public $scheduletime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setScheduleID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->scheduleid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setScheduleTime($val)
	{
        $this->scheduletime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SchedulingInfoType
 * Contains information for scheduling limits for the user.
 */
class SchedulingInfoType
{
	/**
	 * @var int | Maximum number of minutes that a listing may be scheduled in advance of its going live.
	 *            Output only.
	 */
	public $maxscheduledminutes;
	/**
	 * @var int | Minimum number of minutes that a listing may be scheduled in advance of its going live.
	 *            Output only.
	 */
	public $minscheduledminutes;
	/**
	 * @var int | Maximum number of Items that a user may schedule.            Output only.
	 */
	public $maxscheduleditems;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxScheduledMinutes($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxscheduledminutes = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMinScheduledMinutes($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->minscheduledminutes = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMaxScheduledItems($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->maxscheduleditems = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SearchAttributesType
 * A product or item aspect or feature that can be used as a criterion in a search      for
 * catalog content or for listed items.      For example, "Format" might be a criterion for
 * searching the catalogs for      Pre-filled Item Information related to hardcover books.
 */
class SearchAttributesType
{
	/**
	 * @var int | Unique identifier for the attribute within the characteristic set.            Required
	 * if SearchAttributes is specified.
	 */
	public $attributeid;
	/**
	 * @var DateSpecifierCodeType | Specifies the date sub-component that the attribute represents. This only applies to date
	 * attributes. Required when searching by date attributes.            Allows for separate
	 * text fields or drop-down lists to be rendered for            each sub-component. For example,
	 * the day, month, and year can be rendered as            separate drop-down lists. See DateSpecifierCodeType
	 * for possible values.
	 */
	public $datespecifier;
	/**
	 * @var RangeCodeType | Indicates that the attribute represents the high or low end in a range, such as a date
	 * range or a price range. Required when searching on ranges.
	 */
	public $rangespecifier;
	/**
	 * @var ValType | Container for the list of one or more valid values that the user has selected for the searchable
	 * attribute. If multiple values are specified, the search engine applies "OR" logic to the
	 * query (i.e., at least one of the specified values must match). Required if SearchAttributes
	 * is specified.
	 */
	public $valuelist;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributeid = (int)$val;
	}

	/**
	 * @param DateSpecifierCodeType $val
	 * @throws Exception
	 */
	public function setDateSpecifier($val)
	{
        $this->datespecifier = (int)$val;
	}

	/**
	 * @param RangeCodeType $val
	 * @throws Exception
	 */
	public function setRangeSpecifier($val)
	{
        $this->rangespecifier = (int)$val;
	}

	/**
	 * @param ValType $val
	 * @throws Exception
	 */
	public function setValueList($val)
	{
        $this->valuelist = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SearchDetailsType
{
	/**
	 * @var boolean | Indicates whether a listing uses the Buy It Now feature.
	 */
	public $buyitnowenabled;
	/**
	 * @var boolean | Indicates whether a listing has an image associated with it.
	 */
	public $picture;
	/**
	 * @var boolean | Indicates whether a listing is no more than one day old.
	 */
	public $recentlisting;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBuyItNowEnabled($val)
	{
        $this->buyitnowenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPicture($val)
	{
        $this->picture = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRecentListing($val)
	{
        $this->recentlisting = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SearchFlagsCodeType
{
	const CHARITY                  = 'Charity';
	const SEARCHINDESCRIPTION      = 'SearchInDescription';
	const PAYPALBUYERPAYMENTOPTION = 'PayPalBuyerPaymentOption';
	const NOWANDNEW                = 'NowAndNew';
	const CUSTOMCODE               = 'CustomCode';
}

/**
 * SearchLocationFilterType
 * One of the data filters used when searching for items using        GetSearchResults. Allows
 * filtering based on an item's location (where        the seller would be shipping the item
 * from) or an item's availability        (which eBay sites the item can be purchased from).
 */
class SearchLocationFilterType
{
	/**
	 * @var CountryCodeType | Country the item is either located in or available to (depending on the value
	 *   specified in ItemLocation).
	 */
	public $countrycode;
	/**
	 * @var ItemLocationCodeType | Specifies whether the filter should be for items located in the country            specified
	 * in Country or available to that country.
	 */
	public $itemlocation;
	/**
	 * @var SearchLocationType | Specifies filtering based on site ID.
	 */
	public $searchlocation;
	/**
	 * @var CurrencyCodeType | Limits the result set to just those items with a specified currency.
	 */
	public $currency;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CountryCodeType $val
	 * @throws Exception
	 */
	public function setCountryCode($val)
	{
        $this->countrycode = (int)$val;
	}

	/**
	 * @param ItemLocationCodeType $val
	 * @throws Exception
	 */
	public function setItemLocation($val)
	{
        $this->itemlocation = (int)$val;
	}

	/**
	 * @param SearchLocationType $val
	 * @throws Exception
	 */
	public function setSearchLocation($val)
	{
        $this->searchlocation = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setCurrency($val)
	{
        $this->currency = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SearchLocationType
 * One of the data filters used when searching for items using GetSearchResults. Allows filtering
 * based on the location of the item or its availability relative to an eBay site. Or allows
 * for filtering based on regional listing.
 */
class SearchLocationType
{
	/**
	 * @var string | Specifies a region ID. The item must have been listed for the specified region to be returned
	 * in the search result set.
	 */
	public $regionid;
	/**
	 * @var SiteLocationType | Specifies a filter based on a particular eBay site and the             item's relation
	 * to            that site (items listed with a site's currency, items located
	 *  in the country            for the site, items available to the country for the site, and
	 *             items listed            on the specified site).
	 */
	public $sitelocation;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRegionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RegionID');
        }
        $this->regionid = (int)$val;
	}

	/**
	 * @param SiteLocationType $val
	 * @throws Exception
	 */
	public function setSiteLocation($val)
	{
        $this->sitelocation = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SearchRequestType
 * Specifies a query consisting of attributes. Only attributes that are returned       from
 * GetProductFinder can be used. See the Developer's Guide for more information.
 */
class SearchRequestType
{
	/**
	 * @var int | Numeric identifier for a characteristic set that defines the attributes            (unique
	 * across all eBay sites).
	 */
	public $attributesetid;
	/**
	 * @var int | Numeric identifier for a buy-side product finder. A product finder defines how to
	 *        search for Item Specifics in listings (e.g., how to search against a particular
	 * shoe size).            See the eBay Web Services guide for details about product finders.
	 *            You need to specify a product finder ID when you are searching against a listing's
	 *             Item Specifics (i.e., when you use SearchAttributes). A few categories, such
	 * as US Event Tickets and US eBay Motors, can also return a subset of Item Specifics (e.g.,
	 * the event venue, section, and row for a ticket listing) in the search results. To retrieve
	 * this data, you must specify the product finder ID, and also specify a detail level of ItemReturnAttributes
	 * or ReturnAll. Use GetProductFinder to determine valid product finder IDs.
	 */
	public $productfinderid;
	/**
	 * @var SearchAttributesType | A query consisting of a set of attributes (search criteria). If the query             includes
	 * multiple attributes, the search engine will apply "AND" logic to the             query.
	 * Use GetProductFinder to determine the list of valid attributes             and how many
	 * are permitted for the specified characteristic set.            If specified, ProductFinderID
	 * must also be specified.
	 */
	public $searchattributes;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAttributeSetID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->attributesetid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setProductFinderID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->productfinderid = (int)$val;
	}

	/**
	 * @param SearchAttributesType $val
	 * @throws Exception
	 */
	public function setSearchAttributes($val)
	{
        $this->searchattributes = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SearchResultItemArrayType
 * Container for a list of search result items, such as returned by        GetSearchResults.
 * Will contain zero, one, or multiple        SearchResultItemType items, each of which represents
 * one item listing        that was found by the search.        Output only.
 */
class SearchResultItemArrayType
{
	/**
	 * @var SearchResultItemType | Contains data for an item listing found by a search.            Output only.
	 */
	public $searchresultitem;
	/**
	 * @param SearchResultItemType $val
	 * @throws Exception
	 */
	public function setSearchResultItem($val)
	{
        $this->searchresultitem = (int)$val;
	}
}

/**
 * SearchResultItemType
 * Contains the data for one item listing found by a search (such as by        GetSearchResults).
 */
class SearchResultItemType
{
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var NameValueListArrayType | A list of attribute and value pairs. GetSearchResults can return this            when the
	 * request either specifies IncludeCondition as true or specifies a product finder
	 *     search by using SearchRequest.            If IncludeCondition was true, this returns
	 * the item condition (e.g., New).            If SearchRequest was used to perform a product
	 * finder search, the list            is limited to attributes that would be included in the
	 *            summary search results on the Web site, if any. In some categories,
	 *    no summary attributes are returned in search results (even when the item
	 * is listed with Item Specifics.)
	 */
	public $itemspecific;
	/**
	 * @var SearchResultValuesCodeType | Contains additional information about the item listing returned in Item. This
	 *   information includes whether the item has an image associated with it,            and
	 * more. May contain zero, one, or multiple SearchResultValuesCodeType            values indicating
	 * different pieces of additional information about            the listing. These values are
	 * analogous to the icons that appear in an            item listing's line in a Search page.
	 *            Output only.
	 */
	public $searchresultvalues;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param NameValueListArrayType $val
	 * @throws Exception
	 */
	public function setItemSpecific($val)
	{
        $this->itemspecific = (int)$val;
	}

	/**
	 * @param SearchResultValuesCodeType $val
	 * @throws Exception
	 */
	public function setSearchResultValues($val)
	{
        $this->searchresultvalues = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SearchResultValuesCodeType
{
	const ESCROW         = 'Escrow';
	const _NEW           = '_New';
	const CHARITYLISTING = 'CharityListing';
	const PICTURE        = 'Picture';
	const GIFT           = 'Gift';
	const CUSTOMCODE     = 'CustomCode';
}

class SearchSortOrderCodeType
{
	const SORTBYENDDATE        = 'SortByEndDate';
	const SORTBYSTARTDATE      = 'SortByStartDate';
	const SORTBYCURRENTBID     = 'SortByCurrentBid';
	const SORTBYLISTINGDATE    = 'SortByListingDate';
	const SORTBYCURRENTBIDASC  = 'SortByCurrentBidAsc';
	const SORTBYCURRENTBIDDESC = 'SortByCurrentBidDesc';
	const SORTBYPAYPALASC      = 'SortByPayPalAsc';
	const SORTBYPAYPALDESC     = 'SortByPayPalDesc';
	const SORTBYESCROWASC      = 'SortByEscrowAsc';
	const SORTBYESCROWDESC     = 'SortByEscrowDesc';
	const SORTBYCOUNTRYASC     = 'SortByCountryAsc';
	const SORTBYCOUNTRYDESC    = 'SortByCountryDesc';
	const SORTBYDISTANCEASC    = 'SortByDistanceAsc';
	const SORTBYBIDCOUNTASC    = 'SortByBidCountAsc';
	const SORTBYBIDCOUNTDESC   = 'SortByBidCountDesc';
	const BESTMATCHSORT        = 'BestMatchSort';
	const CUSTOMCODE           = 'CustomCode';
}

/**
 * SearchStoreFilterType
 * One of the data filters used when searching for items using        GetSearchResults. Allows
 * filtering based on an item's appearing in a        specific eBay Store.
 */
class SearchStoreFilterType
{
	/**
	 * @var string | The name of the seller's eBay Store.
	 */
	public $storename;
	/**
	 * @var StoreSearchCodeType | Specifies the type of store search used in the filtering: one eBay Store (name
	 *    specified in StoreName) or all eBay stores, and also by listing type. Possible
	 *       values are enumerated in the StoreSearchCodeType code list.
	 */
	public $storesearch;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStoreName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for StoreName');
        }
        $this->storename = (int)$val;
	}

	/**
	 * @param StoreSearchCodeType $val
	 * @throws Exception
	 */
	public function setStoreSearch($val)
	{
        $this->storesearch = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SearchTypeCodeType
{
	const ALL        = 'All';
	const GALLERY    = 'Gallery';
	const CUSTOMCODE = 'CustomCode';
}

class SecondChanceOfferDurationCodeType
{
	const DAYS_1     = 'Days_1';
	const DAYS_3     = 'Days_3';
	const DAYS_5     = 'Days_5';
	const DAYS_7     = 'Days_7';
	const CUSTOMCODE = 'CustomCode';
}

class SellerBusinessCodeType
{
	const UNDEFINED  = 'Undefined';
	const _PRIVATE   = '_Private';
	const COMMERCIAL = 'Commercial';
}

/**
 * SellerContactDetailsEnabledDefinitionType
 * Defines the SellerContactDetailsEnabled feature. If the field is present, the category allows
 * retrieval of seller-level contact information. The field is returned as an empty element
 * (e.g., a boolean value is not returned).
 */
class SellerContactDetailsEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SellerFavoriteItemPreferencesType
 * Contains the data for the seller favorite item preferences, i.e.  the manual or automatic
 * selection criteria to display items for buyer's favourite seller opt in email marketing.
 */
class SellerFavoriteItemPreferencesType
{
	/**
	 * @var string | The keywords in the item title for the automatic item search criteria.
	 */
	public $searchkeywords;
	/**
	 * @var int | Numeric ID for a custom category that the seller created in their eBay Store, if any. eBay
	 * Stores sellers can create up to three levels of custom categories for their stores. Items
	 * can only be listed in store categories that have no child categories (subcategories). If
	 * you attempt to list an item in a category that has subcategories, the call response contains
	 * a warning, and the item is listed in the Other store category. In GetSearchResults, this
	 * field currently returns 0. As a workaround, use GetItem or related calls to get the ID.
	 */
	public $storecategoryid;
	/**
	 * @var ListingTypeCodeType | The listing format (fixed price, auction, etc) for the automatic item search criteria.
	 */
	public $listingtype;
	/**
	 * @var StoreItemListSortOrderCodeType | The sort order chosen from the standard ebay sorts for the automatic search criteria.
	 */
	public $searchsortorder;
	/**
	 * @var AmountType | Specifies the lower limit of price range for the automatic search criteria.
	 */
	public $minprice;
	/**
	 * @var AmountType | Specifies the upper limit of price range for the automatic search criteria.
	 */
	public $maxprice;
	/**
	 * @var ItemIDType | Specifies the list of favorite items.
	 */
	public $favoriteitemid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSearchKeywords($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SearchKeywords');
        }
        $this->searchkeywords = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setStoreCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->storecategoryid = (int)$val;
	}

	/**
	 * @param ListingTypeCodeType $val
	 * @throws Exception
	 */
	public function setListingType($val)
	{
        $this->listingtype = (int)$val;
	}

	/**
	 * @param StoreItemListSortOrderCodeType $val
	 * @throws Exception
	 */
	public function setSearchSortOrder($val)
	{
        $this->searchsortorder = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinPrice($val)
	{
        $this->minprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMaxPrice($val)
	{
        $this->maxprice = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setFavoriteItemID($val)
	{
        $this->favoriteitemid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SellerGuaranteeLevelCodeType
{
	const NOTELIGIBLE = 'NotEligible';
	const REGULAR     = 'Regular';
	const PREMIUM     = 'Premium';
	const ULTRA       = 'Ultra';
	const CUSTOMCODE  = 'CustomCode';
}

class SellerLevelCodeType
{
	const BRONZE     = 'Bronze';
	const SILVER     = 'Silver';
	const GOLD       = 'Gold';
	const PLATINUM   = 'Platinum';
	const TITANIUM   = 'Titanium';
	const NONE       = 'None';
	const CUSTOMCODE = 'CustomCode';
}

class SellerPaymentMethodCodeType
{
	const NOTHINGONFILE                      = 'NothingOnFile';
	const CREDITCARD                         = 'CreditCard';
	const DIRECTDEBIT                        = 'DirectDebit';
	const DIRECTDEBITPENDINGSIGNATUREMANDATE = 'DirectDebitPendingSignatureMandate';
	const EBAYDIRECTPAY                      = 'eBayDirectPay';
	const CUSTOMCODE                         = 'CustomCode';
}

/**
 * SellerPaymentPreferencesType
 * Defines the values that make up the seller's preferences.
 */
class SellerPaymentPreferencesType
{
	/**
	 * @var boolean | Indicates whether the seller wants all transactions with eBay to use the address specified
	 * in SellerPaymentAddress.
	 */
	public $alwaysusethispaymentaddress;
	/**
	 * @var DisplayPayNowButtonCodeType | Determines whether the Pay Now button should always be displayed for the user's listings.
	 */
	public $displaypaynowbutton;
	/**
	 * @var boolean | Specifies whether a seller wants to let buyers know that PayPal payments are preferred.
	 */
	public $paypalpreferred;
	/**
	 * @var string | Specifies the default email address the seller uses for receiving PayPal payments.
	 */
	public $defaultpaypalemailaddress;
	/**
	 * @var boolean | Indicates whether PayPal is always accepted for the seller's listings.
	 */
	public $paypalalwayson;
	/**
	 * @var AddressType | Address used by eBay for purposes of billing the user for seller fees.
	 */
	public $sellerpaymentaddress;
	/**
	 * @var UPSRateOptionCodeType | Specifies the type of United Postal Service rates to use.
	 */
	public $upsrateoption;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAlwaysUseThisPaymentAddress($val)
	{
        $this->alwaysusethispaymentaddress = (int)$val;
	}

	/**
	 * @param DisplayPayNowButtonCodeType $val
	 * @throws Exception
	 */
	public function setDisplayPayNowButton($val)
	{
        $this->displaypaynowbutton = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPayPalPreferred($val)
	{
        $this->paypalpreferred = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDefaultPayPalEmailAddress($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DefaultPayPalEmailAddress');
        }
        $this->defaultpaypalemailaddress = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPayPalAlwaysOn($val)
	{
        $this->paypalalwayson = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setSellerPaymentAddress($val)
	{
        $this->sellerpaymentaddress = (int)$val;
	}

	/**
	 * @param UPSRateOptionCodeType $val
	 * @throws Exception
	 */
	public function setUPSRateOption($val)
	{
        $this->upsrateoption = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SellerPaymentType
 * A payment between Half.com and a seller. The financial value of a payment is typically based
 * on an amount that a buyer paid to Half.com for a transaction, plus the shipping cost the
 * buyer paid for the item, minus Half.com's commission. Each payment is for one transaction
 * for one item in one order.
 */
class SellerPaymentType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var OrderIDType | ID of the Half.com order associated with the payment. Returns 0 for single-transaction
	 * orders.
	 */
	public $orderid;
	/**
	 * @var string | An ID that the seller specified when they listed the Half.com item, if any. It can be used
	 * for the seller's SKU. Note that SellerInventoryID is not returned if no ID was specified.
	 * (Note: The SKU field used for eBay.com listings is not applicable to Half.com listings.)
	 */
	public $sellerinventoryid;
	/**
	 * @var string | A text note that the seller specified for the Half.com item, if any. Only visible to the
	 * seller. Not returned if the seller specified no notes.
	 */
	public $privatenotes;
	/**
	 * @var ExternalProductIDType | Contains an ISBN, UPC, or EAN value from the catalog product associated with the Half.com
	 * item. All Half.com items are listed with Pre-filled Item Information.
	 */
	public $externalproductid;
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @var PaymentTypeCodeType | Indicates whether the payment is for a Half.com sale or a refund.
	 */
	public $paymenttype;
	/**
	 * @var AmountType | Price of the transaction (before shipping and sales tax) that the buyer needs to pay to
	 * complete the purchase. For eBay Motors, TransactionPrice is the deposit amount. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $transactionprice;
	/**
	 * @var AmountType | The adjusted shipping cost that Half.com pays the seller. If multiple items from the same
	 * seller are in the same order, this amount may be less than the rate for shipping the item
	 * individually. This amount may also be adjusted due to Half.com handling charges. (Due to
	 * the way shipping costs are calculated, this value may be different for identical items
	 * in different orders.)
	 */
	public $shippingreimbursement;
	/**
	 * @var AmountType | Amount of commission charged by Half.com.
	 */
	public $commission;
	/**
	 * @var AmountType | The amount the buyer paid for the item(s) in the transaction. If the seller allowed the
	 * buyer to change the item total, the buyer is able to change the total until the time that
	 * the transaction's status moves to Complete. Determine whether the buyer changed the amount
	 * by retrieving the transaction data and comparing the AmountPaid value to what the seller
	 * expected. For combined payment (the transaction is part of an order), GetSellerTransactions
	 * and GetItemTransactions return the amount paid for the order to which the transaction belongs. For
	 * Motors items, AmountPaid is the amount paid by the buyer for the deposit. Not applicable
	 * to Half.com.
	 */
	public $amountpaid;
	/**
	 * @var dateTime | Indicates the time when the transaction was marked paid, if known. The value is set by
	 * eBay when payment is made via PayPal or a third-party checkout flow. This value is also
	 * set when the seller marks the item as paid by using ReviseCheckoutStatus or CompleteSale. The
	 * seller can also mark the item as paid by using My eBay or Selling Manager Pro. Note that
	 * this value is only visible if the request user is the buyer or seller associated with the
	 * transaction. If the item is marked as paid but the seller is not a Selling Manager Pro
	 * user, PaidTime returns the transaction creation time instead. Not applicable to Half.com.
	 */
	public $paidtime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param OrderIDType $val
	 * @throws Exception
	 */
	public function setOrderID($val)
	{
        $this->orderid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerInventoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerInventoryID');
        }
        $this->sellerinventoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPrivateNotes($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PrivateNotes');
        }
        $this->privatenotes = (int)$val;
	}

	/**
	 * @param ExternalProductIDType $val
	 * @throws Exception
	 */
	public function setExternalProductID($val)
	{
        $this->externalproductid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}

	/**
	 * @param PaymentTypeCodeType $val
	 * @throws Exception
	 */
	public function setPaymentType($val)
	{
        $this->paymenttype = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTransactionPrice($val)
	{
        $this->transactionprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingReimbursement($val)
	{
        $this->shippingreimbursement = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setCommission($val)
	{
        $this->commission = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountPaid($val)
	{
        $this->amountpaid = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setPaidTime($val)
	{
        $this->paidtime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SellerType
 * Information about a user returned in the context of an item's seller.
 */
class SellerType
{
	/**
	 * @var int | Indicates the seller's PaisaPay registration status. India site only.<br> 0 - Seller not
	 * registered<br> 1 - Seller registered<br> 2 - Seller registered but registration suspended<br> 3
	 * - Seller registered but outbound payment suspended<br>
	 */
	public $paisapaystatus;
	/**
	 * @var boolean | Instead of using this tag, see the PaymentEdited tag. Originally, the AllowPaymentEdit
	 * tag specified whether the seller allows the buyer to edit the payment amount for the transaction.
	 * (Sellers enabled this property in their My eBay user preferences on the eBay site.) ShippingDetails.AllowPaymentEdit
	 * is no longer being populated by calls to GetItemTransactions. Not applicable to Half.com.
	 */
	public $allowpaymentedit;
	/**
	 * @var CurrencyCodeType | Currency type in which the user is billed seller fees.
	 */
	public $billingcurrency;
	/**
	 * @var boolean | Indicates whether the user as a seller has the option set to default new item listings
	 * to go through checkout. (Sellers enable this property in their My eBay user preferences
	 * on the eBay site.)
	 */
	public $checkoutenabled;
	/**
	 * @var boolean | If true, indicates that the user has stored bank account information with eBay in order
	 * to use the "CIP in checkout" feature. Applicable to all eBay sites that support CIP as
	 * a payment method.
	 */
	public $cipbankaccountstored;
	/**
	 * @var boolean | If true, indicates that the user is in good standing with eBay. (One of the requirements
	 * for listing a new item with Immediate Payment.)
	 */
	public $goodstanding;
	/**
	 * @var boolean | If true, the user is authorized to list lot items to the eBay Live Auctions site.
	 */
	public $liveauctionauthorized;
	/**
	 * @var MerchandizingPrefCodeType | Indicates whether the seller participates in the Merchandising Manager feature. If so,
	 * the seller can set up rules for cross-promoting items from the seller's store. If not,
	 * eBay cross-promotes items as the seller's items are being viewed or purchased.
	 */
	public $merchandizingpref;
	/**
	 * @var boolean | Indicates whether the user is subject to VAT. Users who have registered with eBay as VAT-exempt
	 * are not subject to VAT.
	 */
	public $qualifiesforb2bvat;
	/**
	 * @var SellerGuaranteeLevelCodeType | Maximum level of Motor's Seller guarantee the seller is authorized to offer.
	 */
	public $sellerguaranteelevel;
	/**
	 * @var SellerLevelCodeType | The user's eBay PowerSeller tier. Possible values are enumerated in the SellerLevelCodeType
	 * code list.
	 */
	public $sellerlevel;
	/**
	 * @var AddressType | Address used by eBay for purposes of billing the user for seller fees.
	 */
	public $sellerpaymentaddress;
	/**
	 * @var SchedulingInfoType | Container for scheduling limits for the user. Conveys the minimum and maximum minutes the
	 * user may schedule listings in advance, as well as the maximum number of items the user
	 * may schedule.
	 */
	public $schedulinginfo;
	/**
	 * @var boolean | Indicates whether the user has an eBay Store (boolean value).
	 */
	public $storeowner;
	/**
	 * @var anyURI | The URL of the seller's eBay Store page. Output only.
	 */
	public $storeurl;
	/**
	 * @var SellerBusinessCodeType | Type of seller account. This value is returned if the German site (site ID 77) or eBay
	 * Motors site (site ID 100) is specified.
	 */
	public $sellerbusinesstype;
	/**
	 * @var boolean | If true, the user is registered as a vehicle dealer on the eBay Motors site.
	 */
	public $registeredbusinessseller;
	/**
	 * @var boolean | If true, the user is currently eligible to sell items on eBay Express, based on the data
	 * available to eBay at the time you execute the call (e.g., GetUser). Users registered in
	 * the US or Canada are eligible to sell on Express US. Users registered in Germany are eligible
	 * to sell on Express Germany. However, a user can still be disqualified at any time if their
	 * feedback score changes or some other event occurs that would normally disqualify a seller
	 * for Express.<br> <br> If false, the user is not currently eligible to sell items on Express. In
	 * this case, you can determine probable causes by calling GetUser and examining the fields
	 * in the ExpressSellerRequirements node.<br> <br> Due to latency of batch jobs that update
	 * the seller's Express eligibility, it may be possible for the value of ExpressEligible and
	 * the values in ExpressSellerRequirements to be inconsistent. For example, if the seller
	 * changes their combined payment preference, the value of the CombinedPaymentsAccepted flag
	 * in ExpressSellerRequirements could change, but it could take up to 7 days for the seller's
	 * Express eligibility to change.
	 */
	public $expresseligible;
	/**
	 * @var SellerPaymentMethodCodeType | 	 */
	public $paymentmethod;
	/**
	 * @var ProStoresCheckoutPreferenceType | Details about the checkout preferences related to the ProStores store. Returned only if
	 * set.
	 */
	public $prostorespreference;
	/**
	 * @var boolean | If true, the seller has an Express wallet, which is used to store information about multiple
	 * credit cards associated with the seller's account.
	 */
	public $expresswallet;
	/**
	 * @var ExpressSellerRequirementsType | Contains detailed data relating to whether a seller qualifies as an Express seller. Whether
	 * a child tag is returned can depend on whether its value would be true or false, whether
	 * the seller is registered on an applicable eBay site, or the order of eligibility precedence. The
	 * seller requirements are assessed in this order:<br> - ExpressSellingPreference<br> - ExpressApproved<br> -
	 * All other settings<br> <br> Due to latency of batch jobs that update the seller's Express
	 * eligibility, it may be possible for the value of ExpressEligible and the values in ExpressSellerRequirements
	 * to be inconsistent. For example, if the seller changes their combined payment preference, the
	 * value of the CombinedPaymentsAccepted flag in ExpressSellerRequirements could change, but
	 * it could take up to 7 days for the seller's Express eligibility to change.
	 */
	public $expresssellerrequirements;
	/**
	 * @var boolean | Indicates whether or not the seller is a registered charity seller. If CharityRegistered
	 * is false, the user must register with the eBay Giving Works provider to list items with
	 * eBay Giving Works.
	 */
	public $charityregistered;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPaisaPayStatus($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->paisapaystatus = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAllowPaymentEdit($val)
	{
        $this->allowpaymentedit = (int)$val;
	}

	/**
	 * @param CurrencyCodeType $val
	 * @throws Exception
	 */
	public function setBillingCurrency($val)
	{
        $this->billingcurrency = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCheckoutEnabled($val)
	{
        $this->checkoutenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCIPBankAccountStored($val)
	{
        $this->cipbankaccountstored = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setGoodStanding($val)
	{
        $this->goodstanding = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLiveAuctionAuthorized($val)
	{
        $this->liveauctionauthorized = (int)$val;
	}

	/**
	 * @param MerchandizingPrefCodeType $val
	 * @throws Exception
	 */
	public function setMerchandizingPref($val)
	{
        $this->merchandizingpref = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setQualifiesForB2BVAT($val)
	{
        $this->qualifiesforb2bvat = (int)$val;
	}

	/**
	 * @param SellerGuaranteeLevelCodeType $val
	 * @throws Exception
	 */
	public function setSellerGuaranteeLevel($val)
	{
        $this->sellerguaranteelevel = (int)$val;
	}

	/**
	 * @param SellerLevelCodeType $val
	 * @throws Exception
	 */
	public function setSellerLevel($val)
	{
        $this->sellerlevel = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setSellerPaymentAddress($val)
	{
        $this->sellerpaymentaddress = (int)$val;
	}

	/**
	 * @param SchedulingInfoType $val
	 * @throws Exception
	 */
	public function setSchedulingInfo($val)
	{
        $this->schedulinginfo = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setStoreOwner($val)
	{
        $this->storeowner = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setStoreURL($val)
	{
        $this->storeurl = (int)$val;
	}

	/**
	 * @param SellerBusinessCodeType $val
	 * @throws Exception
	 */
	public function setSellerBusinessType($val)
	{
        $this->sellerbusinesstype = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRegisteredBusinessSeller($val)
	{
        $this->registeredbusinessseller = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressEligible($val)
	{
        $this->expresseligible = (int)$val;
	}

	/**
	 * @param SellerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethod($val)
	{
        $this->paymentmethod = (int)$val;
	}

	/**
	 * @param ProStoresCheckoutPreferenceType $val
	 * @throws Exception
	 */
	public function setProStoresPreference($val)
	{
        $this->prostorespreference = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressWallet($val)
	{
        $this->expresswallet = (int)$val;
	}

	/**
	 * @param ExpressSellerRequirementsType $val
	 * @throws Exception
	 */
	public function setExpressSellerRequirements($val)
	{
        $this->expresssellerrequirements = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCharityRegistered($val)
	{
        $this->charityregistered = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SellingManagerProductDetailsType
 * Returned if the user is a Selling Manager Pro user.
 */
class SellingManagerProductDetailsType
{
	/**
	 * @var string | The exact product name of an item.
	 */
	public $productname;
	/**
	 * @var int | The numeric part number of an item.
	 */
	public $partnumber;
	/**
	 * @var string | The alphanumeric part number of an item.
	 */
	public $productpartnumber;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductName');
        }
        $this->productname = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPartNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->partnumber = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setProductPartNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ProductPartNumber');
        }
        $this->productpartnumber = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SellingStatusType
 * Contains various details about the current status of a listing. These values are computed
 * by eBay and cannot be specified at listing time.
 */
class SellingStatusType
{
	/**
	 * @var int | Number of bids placed so far against the item. Only applicable to competitive-bidding listings
	 * (Chinese and Dutch auctions).
	 */
	public $bidcount;
	/**
	 * @var AmountType | Smallest amount a bid must be above the current high bid. Only applicable to competitive-bidding
	 * listings (Chinese and Dutch auctions). Returns zero (0.00) for Ad type, eBay Stores Inventory
	 * (Stores Fixed-price), and Basic Fixed-Price (Fixed Price Item) listings.
	 */
	public $bidincrement;
	/**
	 * @var AmountType | Converted value of the CurrentPrice in the currency of the site that returned this response.
	 * For active items, refresh the listing's data every 24 hours to pick up the current conversion
	 * rates.
	 */
	public $convertedcurrentprice;
	/**
	 * @var AmountType | For competitive-bidding listings (Chinese and Dutch auctions), current minimum asking price
	 * (start price) or the current highest bid for the item if bids have been placed. Shows minimum
	 * bid if no bids have been placed on the item. For Basic Fixed-Price (FixedPriceItem), Store
	 * Inventory (StoresFixedPrice), or Ad type (AdType) listings this returns the original price
	 * specified when the item was listed/re-listed or the revised price if the item was revised.<br> <br> For
	 * GetSearchResultsExpress, this is the current fixed price of the listing, and it is always
	 * returned when ItemArray.Item is returned.
	 */
	public $currentprice;
	/**
	 * @var UserType | For single-item (Quantity = 1) auction listings that have ended and have a winning bidder,
	 * indicates the user who is the current high bidder. For single-item basic fixed price (FixedPriceItem)
	 * or Store Inventory (StoresFixedPrice) listings that have ended, indicates the user who purchased
	 * the item. Not returned for auctions that have received no bids, fixed price and Store Inventory
	 * listings that are still active, or any multi-item (Quantity > 1) listings.
	 */
	public $highbidder;
	/**
	 * @var int | Applicable to Ad type listings only. Indicates how many leads to potential buyers are associated
	 * with this item. Returns 0 (zero) for listings in other formats.
	 */
	public $leadcount;
	/**
	 * @var AmountType | Smallest amount the next bid on the item can be. Returns same value as Item.StartPrice
	 * (if no bids have yet been placed) or CurrentPrice plus BidIncrement (if at least one bid
	 * has been placed). Only applicable to Chinese and Dutch auction listings. Returns null for
	 * basic Fixed Price (FixedPriceItem), Store Inventory (StoresFixedPrice), and Ad type listings.
	 */
	public $minimumtobid;
	/**
	 * @var int | Number of items purchased so far. (Subtract from the value returned in the Item.Quantity
	 * field to calculate the number of items remaining.)
	 */
	public $quantitysold;
	/**
	 * @var boolean | Indicates whether the reserve price has been met for the listing. Returns true if the reserve
	 * price was met or no reserve price was specified.
	 */
	public $reservemet;
	/**
	 * @var boolean | Part of the Second Chance Offer feature, indicates whether the seller can extend a second
	 * chance offer for the item.
	 */
	public $secondchanceeligible;
	/**
	 * @var long | Number of bidders for an item. Only applicable to competitive-bidding listings (Chinese
	 * and Dutch auctions). Only returned for the seller of the item.
	 */
	public $biddercount;
	/**
	 * @var ListingStatusCodeType | Specifies an active or ended listing's status in eBay's processing workflow. If a listing
	 * ends with a sale (or sales), eBay needs to update the sale details (e.g., total price and
	 * buyer/high bidder) and the final value fee. This processing can take several minutes. If
	 * you retrieve a sold item and no details about the buyer/high bidder are returned or no
	 * final value fee is available, use this listing status information to determine whether
	 * eBay has finished processing the listing.
	 */
	public $listingstatus;
	/**
	 * @var AmountType | You are charged a Final Value Fee if your item is sold, ends with a winning bid, or is
	 * purchased. This fee applies whether or not you actually complete the sale with the buyer.
	 * If you request a Final Value Fee Credit, the value of Transaction.FinalValueFee will not
	 * change for the item if a credit is issued. (The credit only appears in the seller's account
	 * data.) See the eBay.com Web site online help for more information about the Final Value
	 * Fee. The Final Value Fee for FixedPriceItem, StoresFixedPrice, and Buy It Now Dutch listing types
	 * is returned by GetSellerTransactions and GetItemTransactions on a transaction by transaction
	 * basis. For all other listing types, including Chinese and Dutch (no Buy It Now purchases),
	 * the Final Value Fee is returned when the listing status is Completed. If the item was a
	 * Dutch auction that ended with bids (not Buy It Now purchases), the Final Value Fee is returned
	 * in Item.SellingStatus.FinalValueFee. For all other listing types, including Dutch auctions
	 * that end with Buy It Now purchases, the Final Value Fee is returned in Transaction.FinalValueFee.
	 * Not applicable to Half.com.
	 */
	public $finalvaluefee;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setBidCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->bidcount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setBidIncrement($val)
	{
        $this->bidincrement = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedCurrentPrice($val)
	{
        $this->convertedcurrentprice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setCurrentPrice($val)
	{
        $this->currentprice = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setHighBidder($val)
	{
        $this->highbidder = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLeadCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->leadcount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setMinimumToBid($val)
	{
        $this->minimumtobid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantitySold($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantitysold = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setReserveMet($val)
	{
        $this->reservemet = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSecondChanceEligible($val)
	{
        $this->secondchanceeligible = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setBidderCount($val)
	{
        $this->biddercount = (int)$val;
	}

	/**
	 * @param ListingStatusCodeType $val
	 * @throws Exception
	 */
	public function setListingStatus($val)
	{
        $this->listingstatus = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setFinalValueFee($val)
	{
        $this->finalvaluefee = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SellingSummaryType
 * Contains summary information about the items the user is selling.
 */
class SellingSummaryType
{
	/**
	 * @var int | The number of currently active auctions that will sell. That is, there is at least one
	 * bidder, and any reserve price has been met. Equivalent to the "Will Sell" value in My eBay.
	 */
	public $activeauctioncount;
	/**
	 * @var int | The total number of currently active auctions for a given seller. Note that this does not
	 * include listings that are FixedPriceItem or StoresFixedPrice. Equivalent to the "Auction
	 * Quantity" value in My eBay.
	 */
	public $auctionsellingcount;
	/**
	 * @var int | The total number of bids made on the user's active listings.
	 */
	public $auctionbidcount;
	/**
	 * @var AmountType | The total value of all items the user has for sale in all listings.
	 */
	public $totalauctionsellingvalue;
	/**
	 * @var int | The total number of items the user has sold.
	 */
	public $totalsoldcount;
	/**
	 * @var AmountType | The total monetary value of the items the user has sold.
	 */
	public $totalsoldvalue;
	/**
	 * @var int | The average duration, in days, of all items sold.
	 */
	public $solddurationindays;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setActiveAuctionCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->activeauctioncount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAuctionSellingCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->auctionsellingcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setAuctionBidCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->auctionbidcount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalAuctionSellingValue($val)
	{
        $this->totalauctionsellingvalue = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTotalSoldCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->totalsoldcount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalSoldValue($val)
	{
        $this->totalsoldvalue = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSoldDurationInDays($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->solddurationindays = (int)$val;
	}
}

class SetUserNotesActionCodeType
{
	const ADDORUPDATE = 'AddOrUpdate';
	const DELETE      = 'Delete';
}

class ShipmentDeliveryStatusCodeType
{
	const CREATED      = 'Created';
	const DROPPEDOFF   = 'DroppedOff';
	const INTRANSIT    = 'InTransit';
	const DELIVERED    = 'Delivered';
	const RETURNED     = 'Returned';
	const CANCELED     = 'Canceled';
	const LABELPRINTED = 'LabelPrinted';
	const CUSTOMCODE   = 'CustomCode';
}

class ShipmentStatusCodeType
{
	const ACTIVE     = 'Active';
	const CANCELED   = 'Canceled';
	const CUSTOMCODE = 'CustomCode';
}

class ShippingCarrierCodeType
{
	const UPS          = 'UPS';
	const USPS         = 'USPS';
	const DEUTSCHEPOST = 'DeutschePost';
	const DHL          = 'DHL';
	const HERMES       = 'Hermes';
	const ILOXX        = 'iLoxx';
	const OTHER        = 'Other';
	const CUSTOMCODE   = 'CustomCode';
}

/**
 * ShippingDetailsType
 * Type for the shipping-related details for an item or transaction, including flat and calculated
 * shipping costs and shipping insurance costs.
 */
class ShippingDetailsType
{
	/**
	 * @var boolean | Instead of using this tag, see the PaymentEdited tag. Originally, the AllowPaymentEdit
	 * tag specified whether the seller allows the buyer to edit the payment amount for the transaction.
	 * (Sellers enabled this property in their My eBay user preferences on the eBay site.) ShippingDetails.AllowPaymentEdit
	 * is no longer being populated by calls to GetItemTransactions. Not applicable to Half.com.
	 */
	public $allowpaymentedit;
	/**
	 * @var boolean | Whether the seller specifies that a shipping discount is to be applied (in the event that
	 * an item's transaction is later combined with others into a single order). Not applicable
	 * to Half.com.
	 */
	public $applyshippingdiscount;
	/**
	 * @var CalculatedShippingRateType | Details pertinent to one or more items for which calculated shipping has been offered by
	 * the seller, such as package dimension and weight and packaging/handling costs. Not applicable
	 * to Half.com or eBay Motors vehicle listings. For Germany and the UK, this field is ignored
	 * when Item.ListingType=Express.
	 */
	public $calculatedshippingrate;
	/**
	 * @var boolean | Whether the seller specified payment and shipping instructions during checkout (for example,
	 * to update the details of a transaction). Flat and calculated shipping. Not applicable to
	 * Half.com.
	 */
	public $changepaymentinstructions;
	/**
	 * @var AmountType | Cost of shipping insurance set by the seller. If the buyer bought more than one of this
	 * item, this is the insurance for just a single item. Exception: for GetItemShipping, this
	 * is proportional to QuantitySold. Value should be greater than 0.00 if InsuranceOption is
	 * Optional or Required. For flat shipping only. Optional as input and only allowed if ChangePaymentInstructions is
	 * true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express. Not
	 * applicable to eBay Motors vehicle listings.
	 */
	public $insurancefee;
	/**
	 * @var InsuranceOptionCodeType | Whether the seller offers shipping insurance and, if so, whether the insurance is optional
	 * or required. Flat and calculated shipping. Optional as input and only allowed if ChangePaymentInstructions
	 * is true. Also applicable to Half.com (for GetOrders). This field is ignored when Item.ListingType=Express.
	 */
	public $insuranceoption;
	/**
	 * @var boolean | Whether the buyer selected to pay for insurance offered by the seller as an option. This
	 * only has a value after the buyer has gone through checkout and selected the insurance preference. Also
	 * applicable to Half.com (for GetOrders).
	 */
	public $insurancewanted;
	/**
	 * @var boolean | Whether the seller allows the buyer to edit the payment amount for the transaction. (Sellers
	 * enable this property in their My eBay user preferences on the eBay site.) Not applicable
	 * to Half.com.
	 */
	public $paymentedited;
	/**
	 * @var string | Payment instructions/message from the seller to the buyer. These instructions appear on
	 * eBay's View Item page and on eBay's checkout page when the buyer pays for the item. Sellers
	 * usually use this field to specify payment instructions, return policy details, how soon
	 * the item will shipped, feedback instructions, and other reminders that the buyer should
	 * be aware of when they bid on or buy an item. This field can be specified regardless of
	 * the shipping type. Some sites also let you specify a standard return policy by using Item.AttributeSetArray
	 * in addition or instead. eBay only allows 500 characters as input (250 for China and Taiwan), but
	 * due to the way the eBay Web site UI treats characters, this field can return more than
	 * 500 characters in the response. Characters like & and ' (apostrophe/single quote) count as
	 * 5 characters each. To remove this value when revising or relisting an item, use DeletedField. Applicable
	 * to eBay Motors (usually used for the return policy). Not applicable to Half.com.
	 */
	public $paymentinstructions;
	/**
	 * @var SalesTaxType | Sales tax details. US site only. Flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders). If your application normally calculates sales tax without using eBay's
	 * tax tables, you should understand how purchases via eBay Express will affect the way you
	 * process payments. For general information about listings on eBay Express, see the eBay
	 * Web Services Guide links below. Not applicable to eBay Motors vehicle listings.
	 */
	public $salestax;
	/**
	 * @var string | Not be returned with compatibility level 483 and higher. See Item.PostalCode instead. This
	 * field will be deleted from the schema in early 2007. Not for calculating shipping costs--see CalculatedShippingRateType.OriginatingPostalCode.
	 */
	public $sellerpostalcode;
	/**
	 * @var string | For most applicable calls, returns the words No Error or returns an error message related
	 * to an attempt to calculate shipping rates. For calculated shipping only. Not applicable
	 * to Half.com or eBay Motors vehicle listings. <br> <br> GetSearchResultsExpress returns
	 * this when no PostalCode was specified in the request and the item was listed with calculated
	 * shipping rates. The message text explains that a postal code is needed to calculate shipping.
	 * Only returned when ItemDetails is set to Fine.
	 */
	public $shippingrateerrormessage;
	/**
	 * @var ShippingRateTypeCodeType | A shipping rate scale for shipping through UPS that affects the shipping cost calculated
	 * for UPS (lower if ShippingRateType is DailyPickup). ShippingRateType is only returned if
	 * ShippingService is one of the UPS shipping services. For calculated shipping only. Not
	 * applicable to Half.com or eBay Motors vehicle listings.
	 */
	public $shippingratetype;
	/**
	 * @var ShippingServiceOptionsType | Shipping costs and options related to domestic shipping services offered by the seller.
	 * Flat and calculated shipping. Required if InternationalShippingServiceOption is specified.<br> <br> If
	 * you specify multiple ShippingServiceOptions nodes, the repeating nodes must be contiguous.
	 * For example, you can insert InternationalShippingServiceOption nodes after a list of repeating
	 * ShippingServiceOptions nodes, but not between them:<br> <br> &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br> &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br> &lt;ShippingServiceOptions&gt;...&lt;/ShippingServiceOptions&gt;<br> &lt;InternationalShippingServiceOption&gt;...&lt;/InternationalShippingServiceOption&gt;<br> &lt;InternationalShippingServiceOption&gt;...&lt;/InternationalShippingServiceOption&gt;<br><br> <br> If
	 * you specify ShippingDetails when you revise or relist an item but you omit ShippingServiceOptions,
	 * eBay will drop the domestic shipping services from the listing. This may also have unintended
	 * side effects, as other fields that depend on this data may be dropped as well. To retain
	 * the shipping services and dependent fields when you modify other shipping details, it may
	 * be simplest to specify all ShippingDetails that you still want to include in the listing.<br> <br> Not
	 * applicable to Half.com or eBay Motors vehicle listings.
	 */
	public $shippingserviceoptions;
	/**
	 * @var InternationalShippingServiceOptionsType | Shipping costs and options related to an international shipping service. If used, at least
	 * one domestic shipping service must also be provided in ShippingServiceOptions.<br> <br> If
	 * you specify multiple InternationalShippingServiceOption nodes, the repeating nodes must
	 * be contiguous. That is, you cannot insert other nodes between InternationalShippingServiceOption
	 * nodes.<br> <br> If you specify ShippingDetails when you revise or relist an item but you
	 * omit InternationalShippingServiceOption, eBay will drop the international shipping services
	 * from the listing. This may also have unintended side effects, as other fields that depend
	 * on this data may be dropped as well. To retain the shipping services and dependent fields
	 * when you modify other shipping details, it may be simplest to specify all ShippingDetails
	 * that you still want to include in the listing.<br> <br> Not applicable to Half.com or eBay
	 * Motors vehicle listings. This field is ignored when Item.ListingType=Express.
	 */
	public $internationalshippingserviceoption;
	/**
	 * @var ShippingTypeCodeType | The shipping cost model offered by the seller. This is not returned for various calls since
	 * shipping type can be deduced: if a CalculatedShippingRate structure is returned by the
	 * call, the shipping type is Calculated. Otherwise, it is one of the other non-Calculated
	 * shipping types. Not applicable to Half.com.
	 */
	public $shippingtype;
	/**
	 * @var int | Applicable to Selling Manager Pro sellers. Also applicable to Half.com (for GetOrders).
	 * For GetOrders, the Transaction container includes this element within ShippingDetails.
	 */
	public $sellingmanagersalesrecordnumber;
	/**
	 * @var boolean | Whether checkout for this is to be handled by a Third-Party Checkout application. The counterpart
	 * in the Add family of calls is Item.ThirdPartyCheckout. Not applicable to Half.com.
	 */
	public $thirdpartycheckout;
	/**
	 * @var TaxTableType | Tax details for a jurisdiction such as a state or province. Returns empty in GetItem if
	 * no tax table was used. Not applicable to Half.com.
	 */
	public $taxtable;
	/**
	 * @var boolean | Indicates whether the seller has opted the listing into the Get It Fast feature. If GetItFast
	 * is true and if at least one of the domestic shipping services offered by the seller is
	 * an expedited shipping service, every shipping service offered by the seller is considered
	 * a Get It Fast service, and the seller commits to delivering the item to the buyer-selected
	 * shipping service within one day. Also applicable to Half.com (for GetOrders).
	 */
	public $getitfast;
	/**
	 * @var string | Shipment tracking number supplied by the shipping carrier. Not applicable to Half.com.
	 */
	public $shipmenttrackingnumber;
	/**
	 * @var token | The shipping service that actually shipped the item(s). Not applicable to Half.com.
	 */
	public $shippingserviceused;
	/**
	 * @var AmountType | The default shipping cost for the item. If the seller specified multiple shipping services,
	 * this is the "first" shipping service as specified by the seller when they listed the item.
	 * <br> <br> For GetSearchResults:<br> If ShippingType has the value Flat, then the actual
	 * shipping cost is shown. If ShippingType has the value Free, then zero is shown. If ShippingType
	 * has the value Calculated, then this tag (DefaultShippingCost) is not shown. If ShippingType
	 * has the value NotSpecified, then this tag (DefaultShippingCost) is not shown. If ShippingType
	 * has the value Freight, then this tag (DefaultShippingCost) is not shown. <br> <br> In GetSearchResultsExpress:<br> If
	 * flat shipping was specified or the shipping cost is 0.00 (free) for the item, then the
	 * actual shipping cost is shown. If calculated shipping was specified for the item, then
	 * this tag (DefaultShippingCost) is only shown if PostalCode is specified in the GetSearchResultsExpress
	 * request. Otherwise, ShippingRateErrorMessage is returned with a message that the postal
	 * code is required for the shipping calculation. Only returned when ItemDetails is set to
	 * Fine. <br> <br> Not applicable to Half.com.
	 */
	public $defaultshippingcost;
	/**
	 * @var InsuranceDetailsType | Container for domestic insurance information. If provided on input, ShippingDetails.InsuranceFee
	 * and ShippingDetails.InsuranceOption are ignored if provided. If omitted on input, InsuranceDetails.InsuranceFee
	 * and InsuranceDetails.InsuranceOption are set to match ShippingDetails.InsuranceFee and
	 * ShippingDetails.InsuranceOption.
	 */
	public $insurancedetails;
	/**
	 * @var InsuranceDetailsType | Container for international insurance information. If provided on input, ShippingDetails.InsuranceFee
	 * and ShippingDetails.InsuranceOption are ignored if provided. If omitted on input, InternationalInsuranceDetails.InsuranceFee
	 * and InternationalInsuranceDetails.InsuranceOption are set to match ShippingDetails.InsuranceFee
	 * and ShippingDetails.InsuranceOption.
	 */
	public $internationalinsurancedetails;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAllowPaymentEdit($val)
	{
        $this->allowpaymentedit = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setApplyShippingDiscount($val)
	{
        $this->applyshippingdiscount = (int)$val;
	}

	/**
	 * @param CalculatedShippingRateType $val
	 * @throws Exception
	 */
	public function setCalculatedShippingRate($val)
	{
        $this->calculatedshippingrate = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setChangePaymentInstructions($val)
	{
        $this->changepaymentinstructions = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setInsuranceFee($val)
	{
        $this->insurancefee = (int)$val;
	}

	/**
	 * @param InsuranceOptionCodeType $val
	 * @throws Exception
	 */
	public function setInsuranceOption($val)
	{
        $this->insuranceoption = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setInsuranceWanted($val)
	{
        $this->insurancewanted = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPaymentEdited($val)
	{
        $this->paymentedited = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPaymentInstructions($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for PaymentInstructions');
        }
        $this->paymentinstructions = (int)$val;
	}

	/**
	 * @param SalesTaxType $val
	 * @throws Exception
	 */
	public function setSalesTax($val)
	{
        $this->salestax = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSellerPostalCode($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SellerPostalCode');
        }
        $this->sellerpostalcode = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShippingRateErrorMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShippingRateErrorMessage');
        }
        $this->shippingrateerrormessage = (int)$val;
	}

	/**
	 * @param ShippingRateTypeCodeType $val
	 * @throws Exception
	 */
	public function setShippingRateType($val)
	{
        $this->shippingratetype = (int)$val;
	}

	/**
	 * @param ShippingServiceOptionsType $val
	 * @throws Exception
	 */
	public function setShippingServiceOptions($val)
	{
        $this->shippingserviceoptions = (int)$val;
	}

	/**
	 * @param InternationalShippingServiceOptionsType $val
	 * @throws Exception
	 */
	public function setInternationalShippingServiceOption($val)
	{
        $this->internationalshippingserviceoption = (int)$val;
	}

	/**
	 * @param ShippingTypeCodeType $val
	 * @throws Exception
	 */
	public function setShippingType($val)
	{
        $this->shippingtype = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSellingManagerSalesRecordNumber($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->sellingmanagersalesrecordnumber = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setThirdPartyCheckout($val)
	{
        $this->thirdpartycheckout = (int)$val;
	}

	/**
	 * @param TaxTableType $val
	 * @throws Exception
	 */
	public function setTaxTable($val)
	{
        $this->taxtable = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setGetItFast($val)
	{
        $this->getitfast = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShipmentTrackingNumber($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShipmentTrackingNumber');
        }
        $this->shipmenttrackingnumber = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setShippingServiceUsed($val)
	{
        $this->shippingserviceused = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setDefaultShippingCost($val)
	{
        $this->defaultshippingcost = (int)$val;
	}

	/**
	 * @param InsuranceDetailsType $val
	 * @throws Exception
	 */
	public function setInsuranceDetails($val)
	{
        $this->insurancedetails = (int)$val;
	}

	/**
	 * @param InsuranceDetailsType $val
	 * @throws Exception
	 */
	public function setInternationalInsuranceDetails($val)
	{
        $this->internationalinsurancedetails = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ShippingFeatureCodeType
{
	const DELIVERYCONFIRMATION  = 'DeliveryConfirmation';
	const SIGNATURECONFIRMATION = 'SignatureConfirmation';
	const STEALTHPOSTAGE        = 'StealthPostage';
	const SATURDAYDELIVERY      = 'SaturdayDelivery';
	const OTHER                 = 'Other';
	const NOTDEFINED            = 'NotDefined';
	const CUSTOMCODE            = 'CustomCode';
}

/**
 * ShippingLocationDetailsType
 * Details about a region or location to which the seller is willing to ship.
 */
class ShippingLocationDetailsType
{
	/**
	 * @var string | Short name or abbreviation for a region (e.g., Asia) or location (e.g. Japan).<br><br> Related
	 * field:<br> Item.ShippingDetails.InternationalShippingServiceOption.ShipToLocation in AddItem
	 */
	public $shippinglocation;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setShippingLocation($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ShippingLocation');
        }
        $this->shippinglocation = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ShippingOptionCodeType
{
	const SITEONLY        = 'SiteOnly';
	const WORLDWIDE       = 'WorldWide';
	const SITEPLUSREGIONS = 'SitePlusRegions';
	const WILLNOTSHIP     = 'WillNotShip';
	const CUSTOMCODE      = 'CustomCode';
}

class ShippingPackageCodeType
{
	const NONE                 = 'None';
	const LETTER               = 'Letter';
	const LARGEENVELOPE        = 'LargeEnvelope';
	const USPSLARGEPACK        = 'USPSLargePack';
	const VERYLARGEPACK        = 'VeryLargePack';
	const EXTRALARGEPACK       = 'ExtraLargePack';
	const UPSLETTER            = 'UPSLetter';
	const USPSFLATRATEENVELOPE = 'USPSFlatRateEnvelope';
	const PACKAGETHICKENVELOPE = 'PackageThickEnvelope';
	const ROLL                 = 'Roll';
	const EUROPALLET           = 'Europallet';
	const ONEWAYPALLET         = 'OneWayPallet';
	const BULKYGOODS           = 'BulkyGoods';
	const FURNITURE            = 'Furniture';
	const CARS                 = 'Cars';
	const MOTORBIKES           = 'Motorbikes';
	const CARAVAN              = 'Caravan';
	const INDUSTRYVEHICLES     = 'IndustryVehicles';
	const CUSTOMCODE           = 'CustomCode';
}

class ShippingRateTypeCodeType
{
	const ONDEMAND    = 'OnDemand';
	const DAILYPICKUP = 'DailyPickup';
	const CUSTOMCODE  = 'CustomCode';
}

class ShippingRegionCodeType
{
	const AFRICA        = 'Africa';
	const ASIA          = 'Asia';
	const CARIBBEAN     = 'Caribbean';
	const EUROPE        = 'Europe';
	const LATINAMERICA  = 'LatinAmerica';
	const MIDDLEEAST    = 'MiddleEast';
	const NORTHAMERICA  = 'NorthAmerica';
	const OCEANIA       = 'Oceania';
	const SOUTHAMERICA  = 'SouthAmerica';
	const EUROPEANUNION = 'EuropeanUnion';
	const WILLNOTSHIP   = 'WillNotShip';
	const WORLDWIDE     = 'Worldwide';
	const AMERICAS      = 'Americas';
	const NONE          = 'None';
	const CUSTOMCODE    = 'CustomCode';
}

class ShippingServiceCodeType
{
	const UPSGROUND                                           = 'UPSGround';
	const UPS3RDDAY                                           = 'UPS3rdDay';
	const UPS2NDDAY                                           = 'UPS2ndDay';
	const UPSNEXTDAY                                          = 'UPSNextDay';
	const USPSPRIORITY                                        = 'USPSPriority';
	const USPSPARCEL                                          = 'USPSParcel';
	const USPSMEDIA                                           = 'USPSMedia';
	const USPSFIRSTCLASS                                      = 'USPSFirstClass';
	const SHIPPINGMETHODSTANDARD                              = 'ShippingMethodStandard';
	const SHIPPINGMETHODEXPRESS                               = 'ShippingMethodExpress';
	const USPSEXPRESSMAIL                                     = 'USPSExpressMail';
	const UPSNEXTDAYAIR                                       = 'UPSNextDayAir';
	const UPS2DAYAIRAM                                        = 'UPS2DayAirAM';
	const OTHER                                               = 'Other';
	const LOCALDELIVERY                                       = 'LocalDelivery';
	const NOTSELECTED                                         = 'NotSelected';
	const INTERNATIONALNOTSELECTED                            = 'InternationalNotSelected';
	const STANDARDINTERNATIONAL                               = 'StandardInternational';
	const EXPEDITEDINTERNATIONAL                              = 'ExpeditedInternational';
	const USPSGLOBALEXPRESS                                   = 'USPSGlobalExpress';
	const USPSGLOBALPRIORITY                                  = 'USPSGlobalPriority';
	const USPSECONOMYPARCEL                                   = 'USPSEconomyParcel';
	const USPSECONOMYLETTER                                   = 'USPSEconomyLetter';
	const USPSAIRMAILLETTER                                   = 'USPSAirmailLetter';
	const USPSAIRMAILPARCEL                                   = 'USPSAirmailParcel';
	const UPSWORLDWIDEEXPRESSPLUS                             = 'UPSWorldWideExpressPlus';
	const UPSWORLDWIDEEXPRESS                                 = 'UPSWorldWideExpress';
	const UPSWORLDWIDEEXPEDITED                               = 'UPSWorldWideExpedited';
	const UPSSTANDARDTOCANADA                                 = 'UPSStandardToCanada';
	const OTHERINTERNATIONAL                                  = 'OtherInternational';
	const AT_STANDARDDISPATCH                                 = 'AT_StandardDispatch';
	const AT_INSUREDDISPATCH                                  = 'AT_InsuredDispatch';
	const AT_WRITING                                          = 'AT_Writing';
	const AT_COD                                              = 'AT_COD';
	const AT_EXPRESSORCOURIER                                 = 'AT_ExpressOrCourier';
	const AT_INSUREDEXPRESSORCOURIER                          = 'AT_InsuredExpressOrCourier';
	const AT_SPECIALDISPATCH                                  = 'AT_SpecialDispatch';
	const AT_INSUREDSPECIALDISPATCH                           = 'AT_InsuredSpecialDispatch';
	const AT_SONSTIGE                                         = 'AT_Sonstige';
	const AT_UNVERSICHERTERVERSANDINTERNATIONAL               = 'AT_UnversicherterVersandInternational';
	const AT_VERSICHERTERVERSANDINTERNATIONAL                 = 'AT_VersicherterVersandInternational';
	const AT_SONSTIGERVERSANDINTERNATIONAL                    = 'AT_SonstigerVersandInternational';
	const AT_UNVERSICHERTEREXPRESSVERSANDINTERNATIONAL        = 'AT_UnversicherterExpressVersandInternational';
	const AT_VERSICHERTEREXPRESSVERSANDINTERNATIONAL          = 'AT_VersicherterExpressVersandInternational';
	const AU_REGULAR                                          = 'AU_Regular';
	const AU_EXPRESS                                          = 'AU_Express';
	const AU_REGISTERED                                       = 'AU_Registered';
	const AU_COURIER                                          = 'AU_Courier';
	const AU_OTHER                                            = 'AU_Other';
	const AU_EMSINTERNATIONALCOURIERPARCELS                   = 'AU_EMSInternationalCourierParcels';
	const AU_EMSINTERNATIONALCOURIERDOCUMENTS                 = 'AU_EMSInternationalCourierDocuments';
	const AU_EXPRESSPOSTINTERNATIONALDOCUMENTS                = 'AU_ExpressPostInternationalDocuments';
	const AU_AIRMAILINTERNATIONAL                             = 'AU_AirMailInternational';
	const AU_ECONOMYAIRINTERNATIONAL                          = 'AU_EconomyAirInternational';
	const AU_SEAMAILINTERNATIONAL                             = 'AU_SeaMailInternational';
	const AU_STANDARDINTERNATIONAL                            = 'AU_StandardInternational';
	const AU_EXPEDITEDINTERNATIONAL                           = 'AU_ExpeditedInternational';
	const AU_OTHERINTERNATIONAL                               = 'AU_OtherInternational';
	const BEFR_STANDARDDELIVERY                               = 'BEFR_StandardDelivery';
	const BEFR_PRIORITYDELIVERY                               = 'BEFR_PriorityDelivery';
	const BEFR_PARCELPOST                                     = 'BEFR_ParcelPost';
	const BEFR_REGISTEREDMAIL                                 = 'BEFR_RegisteredMail';
	const BEFR_OTHER                                          = 'BEFR_Other';
	const BEFR_DEPOSTINTERNATIONAL                            = 'BEFR_DePostInternational';
	const BEFR_UPSINTERNATIONAL                               = 'BEFR_UPSInternational';
	const BEFR_FEDEXINTERNATIONAL                             = 'BEFR_FedExInternational';
	const BEFR_DHLINTERNATIONAL                               = 'BEFR_DHLInternational';
	const BEFR_TPGPOSTTNTINTERNATIONAL                        = 'BEFR_TPGPostTNTInternational';
	const BEFR_STANDARDINTERNATIONAL                          = 'BEFR_StandardInternational';
	const BEFR_EXPEDITEDINTERNATIONAL                         = 'BEFR_ExpeditedInternational';
	const BEFR_OTHERINTERNATIONAL                             = 'BEFR_OtherInternational';
	const BEFR_LAPOSTEINTERNATIONAL                           = 'BEFR_LaPosteInternational';
	const BENL_STANDARDDELIVERY                               = 'BENL_StandardDelivery';
	const BENL_PRIORITYDELIVERY                               = 'BENL_PriorityDelivery';
	const BENL_PARCELPOST                                     = 'BENL_ParcelPost';
	const BENL_REGISTEREDMAIL                                 = 'BENL_RegisteredMail';
	const BENL_OTHER                                          = 'BENL_Other';
	const BENL_DEPOSTINTERNATIONAL                            = 'BENL_DePostInternational';
	const BENL_UPSINTERNATIONAL                               = 'BENL_UPSInternational';
	const BENL_FEDEXINTERNATIONAL                             = 'BENL_FedExInternational';
	const BENL_DHLINTERNATIONAL                               = 'BENL_DHLInternational';
	const BENL_TPGPOSTTNTINTERNATIONAL                        = 'BENL_TPGPostTNTInternational';
	const BENL_STANDARDINTERNATIONAL                          = 'BENL_StandardInternational';
	const BENL_EXPEDITEDINTERNATIONAL                         = 'BENL_ExpeditedInternational';
	const BENL_OTHERINTERNATIONAL                             = 'BENL_OtherInternational';
	const BENL_LAPOSTEINTERNATIONAL                           = 'BENL_LaPosteInternational';
	const CA_STANDARDDELIVERY                                 = 'CA_StandardDelivery';
	const CA_EXPEDITEDDELIVERY                                = 'CA_ExpeditedDelivery';
	const CA_POSTLETTERMAIL                                   = 'CA_PostLettermail';
	const CA_POSTREGULARPARCEL                                = 'CA_PostRegularParcel';
	const CA_POSTEXPEDITEDPARCEL                              = 'CA_PostExpeditedParcel';
	const CA_POSTXPRESSPOST                                   = 'CA_PostXpresspost';
	const CA_POSTPRIORITYCOURIER                              = 'CA_PostPriorityCourier';
	const CA_STANDARDINTERNATIONAL                            = 'CA_StandardInternational';
	const CA_EXPEDITEDINTERNATIONAL                           = 'CA_ExpeditedInternational';
	const CA_OTHERINTERNATIONAL                               = 'CA_OtherInternational';
	const CA_POSTEXPEDITEDPARCELUSA                           = 'CA_PostExpeditedParcelUSA';
	const CA_POSTSMALLPACKETSUSA                              = 'CA_PostSmallPacketsUSA';
	const CA_POSTXPRESSPOSTUSA                                = 'CA_PostXpresspostUSA';
	const CA_POSTXPRESSPOSTINTERNATIONAL                      = 'CA_PostXpresspostInternational';
	const CA_POSTINTERNATIONALPARCELSURFACE                   = 'CA_PostInternationalParcelSurface';
	const CA_POSTINTERNATIONALPARCELAIR                       = 'CA_PostInternationalParcelAir';
	const CA_SMALLPACKETSINTERNATIONAL                        = 'CA_SmallPacketsInternational';
	const CA_PUROLATORINTERNATIONAL                           = 'CA_PurolatorInternational';
	const CA_POSTSMALLPACKETSUSAGROUND                        = 'CA_PostSmallPacketsUSAGround';
	const CA_POSTSMALLPACKETSUSAAIR                           = 'CA_PostSmallPacketsUSAAir';
	const CA_SMALLPACKETSINTERNATIONALGROUND                  = 'CA_SmallPacketsInternationalGround';
	const CA_SMALLPACKETSINTERNATIONALAIR                     = 'CA_SmallPacketsInternationalAir';
	const CA_POSTUSALETTERPOST                                = 'CA_PostUSALetterPost';
	const CA_POSTINTERNATIONALLETTERPOST                      = 'CA_PostInternationalLetterPost';
	const CA_UPSEXPRESSCANADA                                 = 'CA_UPSExpressCanada';
	const CA_UPSEXPRESSSAVERCANADA                            = 'CA_UPSExpressSaverCanada';
	const CA_UPSEXPEDITEDCANADA                               = 'CA_UPSExpeditedCanada';
	const CA_UPSSTANDARDCANADA                                = 'CA_UPSStandardCanada';
	const CA_UPSEXPRESSUNITEDSTATES                           = 'CA_UPSExpressUnitedStates';
	const CA_UPSEXPEDITEDUNITEDSTATES                         = 'CA_UPSExpeditedUnitedStates';
	const CA_UPS3DAYSELECTUNITEDSTATES                        = 'CA_UPS3DaySelectUnitedStates';
	const CA_UPSSTANDARDUNITEDSTATES                          = 'CA_UPSStandardUnitedStates';
	const CA_UPSWORLDWIDEEXPRESS                              = 'CA_UPSWorldWideExpress';
	const CA_UPSWORLDWIDEEXPEDITED                            = 'CA_UPSWorldWideExpedited';
	const CH_STANDARDDISPATCHAPOST                            = 'CH_StandardDispatchAPost';
	const CH_STANDARDDISPATCHBPOST                            = 'CH_StandardDispatchBPost';
	const CH_INSUREDDISPATCH                                  = 'CH_InsuredDispatch';
	const CH_WRITING                                          = 'CH_Writing';
	const CH_COD                                              = 'CH_COD';
	const CH_EXPRESSORCOURIER                                 = 'CH_ExpressOrCourier';
	const CH_INSUREDEXPRESSORCOURIER                          = 'CH_InsuredExpressOrCourier';
	const CH_SPECIALDISPATCH                                  = 'CH_SpecialDispatch';
	const CH_INSUREDSPECIALDISPATCH                           = 'CH_InsuredSpecialDispatch';
	const CH_SONSTIGE                                         = 'CH_Sonstige';
	const CH_SONSTIGERVERSANDINTERNATIONAL                    = 'CH_SonstigerVersandInternational';
	const CH_ECONOMYSENDUNGENINTERNATIONAL                    = 'CH_EconomySendungenInternational';
	const CH_PRIORITYSENDUNGENINTERNATIONAL                   = 'CH_PrioritySendungenInternational';
	const CH_URGENTSENDUNGENINTERNATIONAL                     = 'CH_UrgentSendungenInternational';
	const CN_PERSONALDELIVERY                                 = 'CN_PersonalDelivery';
	const CN_REGULARPACKAGE                                   = 'CN_RegularPackage';
	const CN_DELIVERYCOMPANYEXPRESS                           = 'CN_DeliveryCompanyExpress';
	const CN_POSTOFFICEEXPRESS                                = 'CN_PostOfficeExpress';
	const CN_OTHERS                                           = 'CN_Others';
	const CN_FASTPOSTOFFICE                                   = 'CN_FastPostOffice';
	const CN_EXPRESSDELIVERYSAMECITY                          = 'CN_ExpressDeliverySameCity';
	const CN_EXPRESSDELIVERYOTHERCITIES                       = 'CN_ExpressDeliveryOtherCities';
	const CN_STANDARDINTERNATIONAL                            = 'CN_StandardInternational';
	const CN_EXPEDITEDINTERNATIONAL                           = 'CN_ExpeditedInternational';
	const CN_OTHERINTERNATIONAL                               = 'CN_OtherInternational';
	const CN_CODINTERNATIONAL                                 = 'CN_CODInternational';
	const CN_STANDARDMAILINGINTERNATIONAL                     = 'CN_StandardMailingInternational';
	const CN_REGULARLOGISTICSINTERNATIONAL                    = 'CN_RegularLogisticsInternational';
	const CN_EMSINTERNATIONAL                                 = 'CN_EMSInternational';
	const CN_OTHERSINTERNATIONAL                              = 'CN_OthersInternational';
	const DE_STANDARDDISPATCH                                 = 'DE_StandardDispatch';
	const DE_INSUREDDISPATCH                                  = 'DE_InsuredDispatch';
	const DE_WRITING                                          = 'DE_Writing';
	const DE_COD                                              = 'DE_COD';
	const DE_EXPRESSORCOURIER                                 = 'DE_ExpressOrCourier';
	const DE_INSUREDEXPRESSORCOURIER                          = 'DE_InsuredExpressOrCourier';
	const DE_SPECIALDISPATCH                                  = 'DE_SpecialDispatch';
	const DE_INSUREDSPECIALDISPATCH                           = 'DE_InsuredSpecialDispatch';
	const DE_UNVERSICHERTERVERSAND                            = 'DE_UnversicherterVersand';
	const DE_DEUTSCHEPOSTBRIEF                                = 'DE_DeutschePostBrief';
	const DE_DHLPOSTPAKET                                     = 'DE_DHLPostpaket';
	const DE_DHLPACKCHEN                                      = 'DE_DHLPackchen';
	const DE_DEUTSCHEPOSTWARENSENDUNG                         = 'DE_DeutschePostWarensendung';
	const DE_DEUTSCHEPOSTBUCHERSENDUNG                        = 'DE_DeutschePostBuchersendung';
	const DE_HERMESPAKETUNVERSICHERT                          = 'DE_HermesPaketUnversichert';
	const DE_HERMESPAKETVERSICHERT                            = 'DE_HermesPaketVersichert';
	const DE_ILOXXTRANSPORTXXL                                = 'DE_IloxxTransportXXL';
	const DE_ILOXXUBERNACHTEXPRESS                            = 'DE_IloxxUbernachtExpress';
	const DE_ILOXXSTANDARD                                    = 'DE_IloxxStandard';
	const DE_SONSTIGE                                         = 'DE_Sonstige';
	const DE_UNVERSICHERTERVERSANDINTERNATIONAL               = 'DE_UnversicherterVersandInternational';
	const DE_VERSICHERTERVERSANDINTERNATIONAL                 = 'DE_VersicherterVersandInternational';
	const DE_DHLPOSTPAKETINTERNATIONAL                        = 'DE_DHLPostpaketInternational';
	const DE_DHLPACKCHENINTERNATIONAL                         = 'DE_DHLPackchenInternational';
	const DE_SONSTIGERVERSANDINTERNATIONAL                    = 'DE_SonstigerVersandInternational';
	const DE_UNVERSICHERTEREXPRESSVERSANDINTERNATIONAL        = 'DE_UnversicherterExpressVersandInternational';
	const DE_VERSICHERTEREXPRESSVERSANDINTERNATIONAL          = 'DE_VersicherterExpressVersandInternational';
	const DE_DEUTSCHEPOSTBRIEFLANDINTERNATIONAL               = 'DE_DeutschePostBriefLandInternational';
	const DE_DEUTSCHEPOSTBRIEFLUFTINTERNATIONAL               = 'DE_DeutschePostBriefLuftInternational';
	const DE_ILOXXEUROPAINTERNATIONAL                         = 'DE_IloxxEuropaInternational';
	const DE_ILOXXWORLDWIDEINTERNATIONAL                      = 'DE_IloxxWorldWideInternational';
	const ES_CARTASNACIONALESHASTA20                          = 'ES_CartasNacionalesHasta20';
	const ES_CARTASNACIONALESDEMAS20                          = 'ES_CartasNacionalesDeMas20';
	const ES_CARTASINTERNACIONALESHASTA20                     = 'ES_CartasInternacionalesHasta20';
	const ES_CARTASINTERNACIONALESDEMAS20                     = 'ES_CartasInternacionalesDeMas20';
	const ES_PAQUETEAZULHASTA2KG                              = 'ES_PaqueteAzulHasta2kg';
	const ES_PAQUETEAZULDEMAS2KG                              = 'ES_PaqueteAzulDeMas2kg';
	const ES_PAQUETEINTERNACIONALECONOMICO                    = 'ES_PaqueteInternacionalEconomico';
	const ES_URGENTE                                          = 'ES_Urgente';
	const ES_OTROS                                            = 'ES_Otros';
	const ES_STANDARDINTERNATIONAL                            = 'ES_StandardInternational';
	const ES_EXPEDITEDINTERNATIONAL                           = 'ES_ExpeditedInternational';
	const ES_OTHERINTERNATIONAL                               = 'ES_OtherInternational';
	const ES_CARTASPOSTALINTERNATIONAL                        = 'ES_CartasPostalInternational';
	const ES_EMSPOSTALEXPRESSINTERNATIONAL                    = 'ES_EmsPostalExpressInternational';
	const ES_ECONOMYPACKETINTERNATIONAL                       = 'ES_EconomyPacketInternational';
	const FR_CHRONOPOSTEINTERNATIONALCLASSIC                  = 'FR_ChronoposteInternationalClassic';
	const FR_COLIPOSTECOLISSIMODIRECT                         = 'FR_ColiposteColissimoDirect';
	const FR_DHLEXPRESSEUROPACK                               = 'FR_DHLExpressEuropack';
	const FR_UPSSTANDARD                                      = 'FR_UPSStandard';
	const FR_POSTOFFICELETTER                                 = 'FR_PostOfficeLetter';
	const FR_POSTOFFICELETTERFOLLOWED                         = 'FR_PostOfficeLetterFollowed';
	const FR_POSTOFFICELETTERRECOMMENDED                      = 'FR_PostOfficeLetterRecommended';
	const FR_COLIPOSTECOLISSIMO                               = 'FR_ColiposteColissimo';
	const FR_COLIPOSTECOLISSIMORECOMMENDED                    = 'FR_ColiposteColissimoRecommended';
	const FR_UPSSTANDARDAGAINSTREFUND                         = 'FR_UPSStandardAgainstRefund';
	const FR_AUTRE                                            = 'FR_Autre';
	const FR_ECOPLI                                           = 'FR_Ecopli';
	const FR_COLIECO                                          = 'FR_Colieco';
	const FR_AUTEMODEDENVOIDECOLIS                            = 'FR_AuteModeDenvoiDeColis';
	const FR_REMISEENMAINPROPRE                               = 'FR_RemiseEnMainPropre';
	const FR_STANDARDINTERNATIONAL                            = 'FR_StandardInternational';
	const FR_EXPEDITEDINTERNATIONAL                           = 'FR_ExpeditedInternational';
	const FR_OTHERINTERNATIONAL                               = 'FR_OtherInternational';
	const FR_LAPOSTEINTERNATIONALPRIORITYCOURIER              = 'FR_LaPosteInternationalPriorityCourier';
	const FR_LAPOSTEINTERNATIONALECONOMYCOURIER               = 'FR_LaPosteInternationalEconomyCourier';
	const FR_LAPOSTECOLISSIMOINTERNATIONAL                    = 'FR_LaPosteColissimoInternational';
	const FR_LAPOSTECOLISECONOMIQUEINTERNATIONAL              = 'FR_LaPosteColisEconomiqueInternational';
	const FR_LAPOSTECOLISSIMOEMBALLAGEINTERNATIONAL           = 'FR_LaPosteColissimoEmballageInternational';
	const FR_CHRONOPOSTCLASSICINTERNATIONAL                   = 'FR_ChronopostClassicInternational';
	const FR_CHRONOPOSTPREMIUMINTERNATIONAL                   = 'FR_ChronopostPremiumInternational';
	const FR_UPSSTANDARDINTERNATIONAL                         = 'FR_UPSStandardInternational';
	const FR_UPSEXPRESSINTERNATIONAL                          = 'FR_UPSExpressInternational';
	const FR_DHLINTERNATIONAL                                 = 'FR_DHLInternational';
	const IN_REGULAR                                          = 'IN_Regular';
	const IN_EXPRESS                                          = 'IN_Express';
	const IN_NATIONALCOD                                      = 'IN_NationalCOD';
	const IN_COURIER                                          = 'IN_Courier';
	const IN_LOCALCOD                                         = 'IN_LocalCOD';
	const IN_STANDARDINTERNATIONAL                            = 'IN_StandardInternational';
	const IN_EXPEDITEDINTERNATIONAL                           = 'IN_ExpeditedInternational';
	const IN_OTHERINTERNATIONAL                               = 'IN_OtherInternational';
	const IN_FLATRATECOD                                      = 'IN_FlatRateCOD';
	const IN_BUYERPICKSUPANDPAYS                              = 'IN_BuyerPicksUpAndPays';
	const IT_REGULARMAIL                                      = 'IT_RegularMail';
	const IT_PRIORITYMAIL                                     = 'IT_PriorityMail';
	const IT_MAILREGISTEREDLETTER                             = 'IT_MailRegisteredLetter';
	const IT_MAILREGISTEREDLETTERWITHMARK                     = 'IT_MailRegisteredLetterWithMark';
	const IT_INSUREDMAIL                                      = 'IT_InsuredMail';
	const IT_QUICKMAIL                                        = 'IT_QuickMail';
	const IT_REGULARPACKAGE                                   = 'IT_RegularPackage';
	const IT_QUICKPACKAGE1                                    = 'IT_QuickPackage1';
	const IT_QUICKPACKAGE3                                    = 'IT_QuickPackage3';
	const IT_EXPRESSCOURIER                                   = 'IT_ExpressCourier';
	const IT_STANDARDINTERNATIONAL                            = 'IT_StandardInternational';
	const IT_EXPEDITEDINTERNATIONAL                           = 'IT_ExpeditedInternational';
	const IT_OTHERINTERNATIONAL                               = 'IT_OtherInternational';
	const NL_STANDARDDELIVERY                                 = 'NL_StandardDelivery';
	const NL_PARCELPOST                                       = 'NL_ParcelPost';
	const NL_REGISTEREDMAIL                                   = 'NL_RegisteredMail';
	const NL_OTHER                                            = 'NL_Other';
	const NL_TPGPOSTTNTINTERNATIONAL                          = 'NL_TPGPostTNTInternational';
	const NL_UPSINTERNATIONAL                                 = 'NL_UPSInternational';
	const NL_FEDEXINTERNATIONAL                               = 'NL_FedExInternational';
	const NL_DHLINTERNATIONAL                                 = 'NL_DHLInternational';
	const NL_DPDGBRINTERNATIONAL                              = 'NL_DPDGBRInternational';
	const NL_GLSBUSINESSINTERNATIONAL                         = 'NL_GLSBusinessInternational';
	const NL_STANDARDINTERNATIONAL                            = 'NL_StandardInternational';
	const NL_EXPEDITEDINTERNATIONAL                           = 'NL_ExpeditedInternational';
	const NL_OTHERINTERNATIONAL                               = 'NL_OtherInternational';
	const TW_REGISTEREDMAIL                                   = 'TW_RegisteredMail';
	const TW_UNREGISTEREDMAIL                                 = 'TW_UnregisteredMail';
	const TW_COD                                              = 'TW_COD';
	const TW_DWELLINGMATCHPOST                                = 'TW_DwellingMatchPost';
	const TW_DWELLINGMATCHCOD                                 = 'TW_DwellingMatchCOD';
	const TW_SELFPICKUP                                       = 'TW_SelfPickup';
	const TW_PARCELPOST                                       = 'TW_ParcelPost';
	const TW_EXPRESSMAIL                                      = 'TW_ExpressMail';
	const TW_OTHER                                            = 'TW_Other';
	const TW_CPINTERNATIONALLETTERPOST                        = 'TW_CPInternationalLetterPost';
	const TW_CPINTERNATIONALPARCELPOST                        = 'TW_CPInternationalParcelPost';
	const TW_CPINTERNATIONALREGISTEREDLETTERPOST              = 'TW_CPInternationalRegisteredLetterPost';
	const TW_CPINTERNATIONALREGISTEREDPARCELPOST              = 'TW_CPInternationalRegisteredParcelPost';
	const TW_CPINTERNATIONALEMS                               = 'TW_CPInternationalEMS';
	const TW_CPINTERNATIONALOCEANSHIPPINGPARCEL               = 'TW_CPInternationalOceanShippingParcel';
	const TW_FEDEXINTERNATIONALPRIORITY                       = 'TW_FedExInternationalPriority';
	const TW_FEDEXINTERNATIONALECONOMY                        = 'TW_FedExInternationalEconomy';
	const TW_UPSWORLDWIDEEXPEDITED                            = 'TW_UPSWorldwideExpedited';
	const TW_UPSWORLDWIDEEXPRESS                              = 'TW_UPSWorldwideExpress';
	const TW_UPSWORLDWIDEEXPRESSPLUS                          = 'TW_UPSWorldwideExpressPlus';
	const TW_OTHERINTERNATIONAL                               = 'TW_OtherInternational';
	const UK_ROYALMAILFIRSTCLASSSTANDARD                      = 'UK_RoyalMailFirstClassStandard';
	const UK_ROYALMAILSECONDCLASSSTANDARD                     = 'UK_RoyalMailSecondClassStandard';
	const UK_ROYALMAILFIRSTCLASSRECORDED                      = 'UK_RoyalMailFirstClassRecorded';
	const UK_ROYALMAILSECONDCLASSRECORDED                     = 'UK_RoyalMailSecondClassRecorded';
	const UK_ROYALMAILSPECIALDELIVERY                         = 'UK_RoyalMailSpecialDelivery';
	const UK_ROYALMAILSTANDARDPARCEL                          = 'UK_RoyalMailStandardParcel';
	const UK_PARCELFORCE24                                    = 'UK_Parcelforce24';
	const UK_PARCELFORCE48                                    = 'UK_Parcelforce48';
	const UK_OTHERCOURIER                                     = 'UK_OtherCourier';
	const UK_SELLERSSTANDARDRATE                              = 'UK_SellersStandardRate';
	const UK_COLLECTINPERSON                                  = 'UK_CollectInPerson';
	const UK_SELLERSSTANDARDINTERNATIONALRATE                 = 'UK_SellersStandardInternationalRate';
	const UK_ROYALMAILAIRMAILINTERNATIONAL                    = 'UK_RoyalMailAirmailInternational';
	const UK_ROYALMAILAIRSUREINTERNATIONAL                    = 'UK_RoyalMailAirsureInternational';
	const UK_ROYALMAILSURFACEMAILINTERNATIONAL                = 'UK_RoyalMailSurfaceMailInternational';
	const UK_ROYALMAILINTERNATIONALSIGNEDFOR                  = 'UK_RoyalMailInternationalSignedFor';
	const UK_ROYALMAILHMFORCESMAILINTERNATIONAL               = 'UK_RoyalMailHMForcesMailInternational';
	const UK_PARCELFORCEINTERNATIONALDATAPOST                 = 'UK_ParcelForceInternationalDatapost';
	const UK_PARCELFORCEIRELAND24INTERNATIONAL                = 'UK_ParcelForceIreland24International';
	const UK_PARCELFORCEEURO48INTERNATIONAL                   = 'UK_ParcelForceEuro48International';
	const UK_PARCELFORCEINTERNATIONALSCHEDULED                = 'UK_ParcelForceInternationalScheduled';
	const UK_OTHERCOURIERORDELIVERYINTERNATIONAL              = 'UK_OtherCourierOrDeliveryInternational';
	const UK_COLLECTINPERSONINTERNATIONAL                     = 'UK_CollectInPersonInternational';
	const IE_SELLERSSTANDARDRATE                              = 'IE_SellersStandardRate';
	const IE_FIRSTCLASSLETTERSERVICE                          = 'IE_FirstClassLetterService';
	const IE_SWIFTPOSTNATIONAL                                = 'IE_SwiftPostNational';
	const IE_REGISTEREDPOST                                   = 'IE_RegisteredPost';
	const IE_EMSSDSCOURIER                                    = 'IE_EMSSDSCourier';
	const IE_ECONOMYSDSCOURIER                                = 'IE_EconomySDSCourier';
	const IE_OTHERCOURIER                                     = 'IE_OtherCourier';
	const IE_COLLECTIONINPERSON                               = 'IE_CollectionInPerson';
	const IE_SELLERSSTANDARDRATEINTERNATIONAL                 = 'IE_SellersStandardRateInternational';
	const IE_INTERNATIONALECONOMYSERVICE                      = 'IE_InternationalEconomyService';
	const IE_INTERNATIONALPRIORITYSERVICE                     = 'IE_InternationalPriorityService';
	const IE_SWIFTPOSTEXPRESSINTERNATIONAL                    = 'IE_SwiftPostExpressInternational';
	const IE_SWIFTPOSTINTERNATIONAL                           = 'IE_SwiftPostInternational';
	const IE_EMSSDSCOURIERINTERNATIONAL                       = 'IE_EMSSDSCourierInternational';
	const IE_ECONOMYSDSCOURIERINTERNATIONAL                   = 'IE_EconomySDSCourierInternational';
	const IE_OTHERCOURIERINTERNATIONAL                        = 'IE_OtherCourierInternational';
	const IE_COLLECTIONINPERSONINTERNATIONAL                  = 'IE_CollectionInPersonInternational';
	const PL_DOMESTICREGULAR                                  = 'PL_DomesticRegular';
	const PL_DOMESTICSPECIAL                                  = 'PL_DomesticSpecial';
	const FREIGHTSHIPPING                                     = 'FreightShipping';
	const FREIGHTSHIPPINGINTERNATIONAL                        = 'FreightShippingInternational';
	const USPSGROUND                                          = 'USPSGround';
	const SHIPPINGMETHODOVERNIGHT                             = 'ShippingMethodOvernight';
	const CUSTOMCODE                                          = 'CustomCode';
	const USPSPRIORITYFLATRATEENVELOPE                        = 'USPSPriorityFlatRateEnvelope';
	const USPSPRIORITYFLATRATEBOX                             = 'USPSPriorityFlatRateBox';
	const USPSGLOBALPRIORITYSMALLENVELOPE                     = 'USPSGlobalPrioritySmallEnvelope';
	const USPSGLOBALPRIORITYLARGEENVELOPE                     = 'USPSGlobalPriorityLargeEnvelope';
	const USPSEXPRESSFLATRATEENVELOPE                         = 'USPSExpressFlatRateEnvelope';
	const UPSWORLDWIDEEXPRESSBOX10KG                          = 'UPSWorldWideExpressBox10kg';
	const UPSWORLDWIDEEXPRESSBOX25KG                          = 'UPSWorldWideExpressBox25kg';
	const UPSWORLDWIDEEXPRESSPLUSBOX10KG                      = 'UPSWorldWideExpressPlusBox10kg';
	const UPSWORLDWIDEEXPRESSPLUSBOX25KG                      = 'UPSWorldWideExpressPlusBox25kg';
	const HK_LOCALPICKUPONLY                                  = 'HK_LocalPickUpOnly';
	const HK_LOCALCOURIER                                     = 'HK_LocalCourier';
	const HK_DOMESTICREGULARSHIPPING                          = 'HK_DomesticRegularShipping';
	const HK_DOMESTICSPECIALSHIPPING                          = 'HK_DomesticSpecialShipping';
	const HK_INTERNATIONALREGULARSHIPPING                     = 'HK_InternationalRegularShipping';
	const HK_INTERNATIONALSPECIALSHIPPING                     = 'HK_InternationalSpecialShipping';
	const SG_LOCALPICKUPONLY                                  = 'SG_LocalPickUpOnly';
	const SG_LOCALCOURIER                                     = 'SG_LocalCourier';
	const SG_DOMESTICSTANDARDMAIL                             = 'SG_DomesticStandardMail';
	const SG_DOMESTICNONSTANDARDMAIL                          = 'SG_DomesticNonStandardMail';
	const SG_DOMESTICSPEEDPOSTISLANDWIDE                      = 'SG_DomesticSpeedpostIslandwide';
	const SG_INTERNATIONALSTANDARDMAIL                        = 'SG_InternationalStandardMail';
	const SG_INTERNATIONALEXPRESSMAILSERVICE                  = 'SG_InternationalExpressMailService';
	const SG_INTERNATIONALCOURIER                             = 'SG_InternationalCourier';
	const BENL_DEPOSTZENDINGNONPRIOR                          = 'BENL_DePostZendingNONPRIOR';
	const BENL_DEPOSTZENDINGPRIOR                             = 'BENL_DePostZendingPRIOR';
	const BENL_DEPOSTZENDINGAANGETEKEND                       = 'BENL_DePostZendingAangetekend';
	const BENL_KILOPOSTPAKJE                                  = 'BENL_KilopostPakje';
	const BENL_TAXIPOST                                       = 'BENL_Taxipost';
	const BENL_KIALAAFHAALPUNT                                = 'BENL_KialaAfhaalpunt';
	const BENL_VASTEKOSTENSTANDAARDVERZENDING                 = 'BENL_VasteKostenStandaardVerzending';
	const BENL_VASTEKOSTENVERSNELDEVERZENDING                 = 'BENL_VasteKostenVersneldeVerzending';
	const BENL_VERZEKERDEVERZENDING                           = 'BENL_VerzekerdeVerzending';
	const BEFR_LAPOSTEENVOINONPRIOR                           = 'BEFR_LaPosteEnvoiNONPRIOR';
	const BEFR_LAPOSTEENVOIPRIOR                              = 'BEFR_LaPosteEnvoiPRIOR';
	const BEFR_LAPOSTEENVOIRECOMMANDE                         = 'BEFR_LaPosteEnvoiRecommande';
	const BEFR_PAQUETKILOPOST                                 = 'BEFR_PaquetKilopost';
	const BEFR_TAXIPOST                                       = 'BEFR_Taxipost';
	const BEFR_POINTRETRAITKIALA                              = 'BEFR_PointRetraitKiala';
	const BEFR_LIVRAISONSTANDARDPRIXFORFAITAIRE               = 'BEFR_LivraisonStandardPrixforFaitaire';
	const BEFR_LIVRAISONEXPRESSPRIXFORFAITAIRE                = 'BEFR_LivraisonExpressPrixforFaitaire';
	const BEFR_LIVRAISONSECURISE                              = 'BEFR_LivraisonSecurise';
	const BENL_DEPOSTZENDINGPRIORINTERNATIONAL                = 'BENL_DePostZendingPRIORInternational';
	const BENL_DEPOSTZENDINGNONPRIORINTERNATIONAL             = 'BENL_DePostZendingNONPRIORInternational';
	const BENL_DEPOSTZENDINGAANGETEKENDINTERNATIONAL          = 'BENL_DePostZendingAangetekendInternational';
	const BENL_KILOPOSTPAKJEINTERNATIONAL                     = 'BENL_KilopostPakjeInternational';
	const BENL_TAXIPOSTEXPRESSVERZENDING                      = 'BENL_TaxipostExpressverzending';
	const BENL_VERZEKERDEVERZENDINGINTERNATIONAL              = 'BENL_VerzekerdeVerzendingInternational';
	const BEFR_LAPOSTEENVOIEPRIOR                             = 'BEFR_LaPosteenvoiePRIOR';
	const BEFR_LAPOSTEENVOIENONPRIOR                          = 'BEFR_LaPosteenvoieNONPRIOR';
	const BEFR_LAPOSTEENVOIERECOMMANDE                        = 'BEFR_LaPosteenvoieRecommande';
	const BEFR_PAQUETKILOPOSTINTERNATIONALE                   = 'BEFR_PaquetKilopostInternationale';
	const BEFR_EXPRESSTAXIPOST                                = 'BEFR_ExpressTaxipost';
	const BEFR_LIVRAISONSTANDARDINTERNATIONALEPRIXFORFAITAIRE = 'BEFR_LivraisonStandardInternationalePrixforFaitaire';
	const BEFR_LIVRAISONEXPRESSINTERNATIONALEPRIXFORFAITAIRE  = 'BEFR_LivraisonExpressInternationalePrixforFaitaire';
	const BEFR_LIVRAISONSECURISEINTERNATIONAL                 = 'BEFR_LivraisonSecuriseInternational';
	const FR_CHRONOPOST                                       = 'FR_Chronopost';
	const UK_ROYALMAILSPECIALDELIVERYNEXTDAY                  = 'UK_RoyalMailSpecialDeliveryNextDay';
	const CA_POSTLIGHTPACKETINTERNATIONAL                     = 'CA_PostLightPacketInternational';
	const CA_POSTLIGHTPACKETUSA                               = 'CA_PostLightPacketUSA';
	const PL_DHLINTERNATIONAL                                 = 'PL_DHLInternational';
	const PL_INTERNATIONALREGULAR                             = 'PL_InternationalRegular';
	const PL_INTERNATIONALSPECIAL                             = 'PL_InternationalSpecial';
	const PL_UPSINTERNATIONAL                                 = 'PL_UPSInternational';
	const CAFR_STANDARDDELIVERY                               = 'CAFR_StandardDelivery';
	const CAFR_EXPEDITEDDELIVERY                              = 'CAFR_ExpeditedDelivery';
	const CAFR_POSTLETTERMAIL                                 = 'CAFR_PostLettermail';
	const CAFR_POSTREGULARPARCEL                              = 'CAFR_PostRegularParcel';
	const CAFR_POSTEXPEDITEDPARCEL                            = 'CAFR_PostExpeditedParcel';
	const CAFR_POSTXPRESSPOST                                 = 'CAFR_PostXpresspost';
	const CAFR_POSTPRIORITYCOURIER                            = 'CAFR_PostPriorityCourier';
	const CAFR_STANDARDINTERNATIONAL                          = 'CAFR_StandardInternational';
	const CAFR_EXPEDITEDINTERNATIONAL                         = 'CAFR_ExpeditedInternational';
	const CAFR_OTHERINTERNATIONAL                             = 'CAFR_OtherInternational';
	const CAFR_POSTEXPEDITEDPARCELUSA                         = 'CAFR_PostExpeditedParcelUSA';
	const CAFR_POSTSMALLPACKETSUSA                            = 'CAFR_PostSmallPacketsUSA';
	const CAFR_POSTXPRESSPOSTUSA                              = 'CAFR_PostXpresspostUSA';
	const CAFR_POSTXPRESSPOSTINTERNATIONAL                    = 'CAFR_PostXpresspostInternational';
	const CAFR_POSTINTERNATIONALPARCELSURFACE                 = 'CAFR_PostInternationalParcelSurface';
	const CAFR_POSTINTERNATIONALPARCELAIR                     = 'CAFR_PostInternationalParcelAir';
	const CAFR_SMALLPACKETSINTERNATIONAL                      = 'CAFR_SmallPacketsInternational';
	const CAFR_PUROLATORINTERNATIONAL                         = 'CAFR_PurolatorInternational';
	const CAFR_POSTSMALLPACKETSUSAGROUND                      = 'CAFR_PostSmallPacketsUSAGround';
	const CAFR_POSTSMALLPACKETSUSAAIR                         = 'CAFR_PostSmallPacketsUSAAir';
	const CAFR_SMALLPACKETSINTERNATIONALGROUND                = 'CAFR_SmallPacketsInternationalGround';
	const CAFR_SMALLPACKETSINTERNATIONALAIR                   = 'CAFR_SmallPacketsInternationalAir';
	const CAFR_POSTUSALETTERPOST                              = 'CAFR_PostUSALetterPost';
	const CAFR_POSTINTERNATIONALLETTERPOST                    = 'CAFR_PostInternationalLetterPost';
	const CAFR_UPSEXPRESSCANADA                               = 'CAFR_UPSExpressCanada';
	const CAFR_UPSEXPRESSSAVERCANADA                          = 'CAFR_UPSExpressSaverCanada';
	const CAFR_UPSEXPEDITEDCANADA                             = 'CAFR_UPSExpeditedCanada';
	const CAFR_UPSSTANDARDCANADA                              = 'CAFR_UPSStandardCanada';
	const CAFR_UPSEXPRESSUNITEDSTATES                         = 'CAFR_UPSExpressUnitedStates';
	const CAFR_UPSEXPEDITEDUNITEDSTATES                       = 'CAFR_UPSExpeditedUnitedStates';
	const CAFR_UPS3DAYSELECTUNITEDSTATES                      = 'CAFR_UPS3DaySelectUnitedStates';
	const CAFR_UPSSTANDARDUNITEDSTATES                        = 'CAFR_UPSStandardUnitedStates';
	const CAFR_UPSWORLDWIDEEXPRESS                            = 'CAFR_UPSWorldWideExpress';
	const CAFR_UPSWORLDWIDEEXPEDITED                          = 'CAFR_UPSWorldWideExpedited';
	const UK_ROYALMAILSPECIALDELIVERY9AM                      = 'UK_RoyalMailSpecialDelivery9am';
}

/**
 * ShippingServiceDetailsType
 * Details about a specific shipping service.
 */
class ShippingServiceDetailsType
{
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var boolean | Indicates whether the service is an expedited shipping service. See Enabling Get It Fast. Not
	 * applicable to Half.com.
	 */
	public $expeditedservice;
	/**
	 * @var boolean | Whether the shipping service is an international shipping service, i.e. one that ships
	 * from to another country from the country of the specified site.<br><br> Related field:<br> Item.ShippingDetails.InternationalShippingServiceOption
	 * in AddItem
	 */
	public $internationalservice;
	/**
	 * @var token | A domestic shipping service offered for shipping the item (for example, UPS Ground). For
	 * a list of valid values that you can cache for future use, call GeteBayDetails with DetailName
	 * set to ShippingServiceDetails. For flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders).
	 */
	public $shippingservice;
	/**
	 * @var int | Numeric identifier. A value greater than 50000 represents an international shipping service
	 * (confirmed by InternationalShippingService being true). Some applications use this ID to
	 * look up shipping services more efficiently. Also useful for applications that have migrated
	 * from the legacy XML API.
	 */
	public $shippingserviceid;
	/**
	 * @var int | The maximum guaranteed number of days the shipping carrier will take to ship an item (not
	 * including the time it takes the seller to deliver the item to the shipping carrier). See
	 * Enabling Get It Fast. Not applicable to Half.com.
	 */
	public $shippingtimemax;
	/**
	 * @var int | The minimum guaranteed number of days in which the shipping carrier can ship an item (not
	 * including the time it takes the seller to deliver the item to the shipping carrier). See
	 * Enabling Get It Fast. Not applicable to Half.com.
	 */
	public $shippingtimemin;
	/**
	 * @var ShippingServiceCodeType | For future use.
	 */
	public $shippingservicecode;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpeditedService($val)
	{
        $this->expeditedservice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setInternationalService($val)
	{
        $this->internationalservice = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setShippingService($val)
	{
        $this->shippingservice = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingServiceID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingserviceid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingTimeMax($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingtimemax = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingTimeMin($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingtimemin = (int)$val;
	}

	/**
	 * @param ShippingServiceCodeType $val
	 * @throws Exception
	 */
	public function setShippingServiceCode($val)
	{
        $this->shippingservicecode = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ShippingServiceOptionsType
 * Shipping costs and options related to a domestic shipping service.
 */
class ShippingServiceOptionsType
{
	/**
	 * @var AmountType | The insurance cost associated with shipping a single item with this shipping service. Exception:
	 * for GetItemShipping, this is proportional to QuantitySold. If the item has not yet been sold,
	 * insurance information cannot be calculated and the value is 0.00. For calculated shipping
	 * only. Also applicable to Half.com (for GetOrders).
	 */
	public $shippinginsurancecost;
	/**
	 * @var token | A domestic shipping service offered for shipping the item (for example, UPS Ground). For
	 * a list of valid values that you can cache for future use, call GeteBayDetails with DetailName
	 * set to ShippingServiceDetails. For flat and calculated shipping. Also applicable to Half.com
	 * (for GetOrders).
	 */
	public $shippingservice;
	/**
	 * @var AmountType | The meaning of this element depends on the call and on whether flat or calculated shipping
	 * has been selected. (For example, it could be the cost to ship a single item, the cost to
	 * ship all items, or the cost to ship just the first of many items, with ShippingServiceAdditionalCost
	 * accounting for the rest.) When returned by GetItemShipping, it includes the packaging and handling
	 * cost. For flat and calculated shipping. Also applicable to Half.com (for GetOrders).
	 */
	public $shippingservicecost;
	/**
	 * @var AmountType | The cost of shipping each additional item beyond the first item. For input, this is required
	 * if the listing is for multiple items and should be zero for single-item listings. Default
	 * value is 0.00. For flat shipping only. Not applicable to Half.com.
	 */
	public $shippingserviceadditionalcost;
	/**
	 * @var int | Seller-preferred presentation order relative to other service options. Valid values: 1
	 * (1st choice), 2 (2nd choice), 3 (3rd choice). For flat and calculated shipping. Not applicable
	 * to Half.com.
	 */
	public $shippingservicepriority;
	/**
	 * @var boolean | Indicates whether the service is an expedited shipping service. See Enabling Get It Fast. Not
	 * applicable to Half.com.
	 */
	public $expeditedservice;
	/**
	 * @var int | The minimum guaranteed number of days in which the shipping carrier can ship an item (not
	 * including the time it takes the seller to deliver the item to the shipping carrier). See
	 * Enabling Get It Fast. Not applicable to Half.com.
	 */
	public $shippingtimemin;
	/**
	 * @var int | The maximum guaranteed number of days the shipping carrier will take to ship an item (not
	 * including the time it takes the seller to deliver the item to the shipping carrier). See
	 * Enabling Get It Fast. Not applicable to Half.com.
	 */
	public $shippingtimemax;
	/**
	 * @var AmountType | An additional fee to charge US buyers who ship via UPS to Alaska, Hawaii or Puerto Rico.
	 * Only applies to eBay US and Motors Parts and Accessories and is only returned for those
	 * sites. Flat rate shipping only.
	 */
	public $shippingsurcharge;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingInsuranceCost($val)
	{
        $this->shippinginsurancecost = (int)$val;
	}

	/**
	 * @param token $val
	 * @throws Exception
	 */
	public function setShippingService($val)
	{
        $this->shippingservice = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingServiceCost($val)
	{
        $this->shippingservicecost = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingServiceAdditionalCost($val)
	{
        $this->shippingserviceadditionalcost = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingServicePriority($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingservicepriority = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpeditedService($val)
	{
        $this->expeditedservice = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingTimeMin($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingtimemin = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setShippingTimeMax($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->shippingtimemax = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setShippingSurcharge($val)
	{
        $this->shippingsurcharge = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ShippingTermRequiredDefinitionType
 * If the field is present, the corresponding feature applies to the category. The field is
 * returned as an empty element (i.e., a boolean value is not returned).
 */
class ShippingTermRequiredDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class ShippingTermsCodeType
{
	const SELLERPAYS = 'SellerPays';
	const BUYERPAYS  = 'BuyerPays';
	const CUSTOMCODE = 'CustomCode';
}

class ShippingTypeCodeType
{
	const FLAT                                = 'Flat';
	const CALCULATED                          = 'Calculated';
	const FREIGHT                             = 'Freight';
	const FREE                                = 'Free';
	const NOTSPECIFIED                        = 'NotSpecified';
	const FLATDOMESTICCALCULATEDINTERNATIONAL = 'FlatDomesticCalculatedInternational';
	const CALCULATEDDOMESTICFLATINTERNATIONAL = 'CalculatedDomesticFlatInternational';
	const CUSTOMCODE                          = 'CustomCode';
}

class SiteCodeType
{
	const US             = 'US';
	const CANADA         = 'Canada';
	const UK             = 'UK';
	const AUSTRALIA      = 'Australia';
	const AUSTRIA        = 'Austria';
	const BELGIUM_FRENCH = 'Belgium_French';
	const FRANCE         = 'France';
	const GERMANY        = 'Germany';
	const ITALY          = 'Italy';
	const BELGIUM_DUTCH  = 'Belgium_Dutch';
	const NETHERLANDS    = 'Netherlands';
	const SPAIN          = 'Spain';
	const SWITZERLAND    = 'Switzerland';
	const TAIWAN         = 'Taiwan';
	const EBAYMOTORS     = 'eBayMotors';
	const HONGKONG       = 'HongKong';
	const SINGAPORE      = 'Singapore';
	const INDIA          = 'India';
	const CHINA          = 'China';
	const IRELAND        = 'Ireland';
	const MALAYSIA       = 'Malaysia';
	const PHILIPPINES    = 'Philippines';
	const POLAND         = 'Poland';
	const SWEDEN         = 'Sweden';
	const CUSTOMCODE     = 'CustomCode';
	const CANADAFRENCH   = 'CanadaFrench';
}

/**
 * SiteDefaultsType
 * A container node for feature definitions that apply to the entire site.
 */
class SiteDefaultsType
{
	/**
	 * @var ListingDurationReferenceType | Specifies the ID of a set of default durations for a certain type of listing. The actual
	 * duration values are returned within the FeatureDefinitions node. The type of listing is
	 * named in the type attribute.
	 */
	public $listingduration;
	/**
	 * @var boolean | Specifies the default site setting for whether sellers are required to specify a shipping
	 * service and its associated cost when listing items. True means the shipping terms are required unless
	 * a specific category overrides this setting.
	 */
	public $shippingtermsrequired;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow best offers. True means
	 * best offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $bestofferenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow DutchBIN. True means best
	 * offers are allowed site-wide, unless a specific category overrides the setting.
	 */
	public $dutchbinenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether a bidder must consent to the bid by confirming
	 * that he or she read and agrees to the terms in eBay's privacy policy.
	 */
	public $userconsentrequired;
	/**
	 * @var boolean | Indicates whether or not it is possible to enhance a listing by putting it into a rotation
	 * for display on a special area of the eBay home page. Support for this feature varies by
	 * site. Item or feedback restrictions may apply.
	 */
	public $homepagefeaturedenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the ProPack feature (a
	 * feature pack). True means ProPack is allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $propackenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the BasicUpgradePack feature
	 * (a feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Australia site (site ID 15, abbreviation AU) only. Effective beginning February
	 * 22, 2006.
	 */
	public $basicupgradepackenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the ValuePack feature (a
	 * feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Effective beginning February 22, 2006.
	 */
	public $valuepackenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the ProPackPlus feature
	 * (a feature pack). True means it is allowed site-wide, unless a specific category overrides
	 * the setting. Effective beginning February 22, 2006.
	 */
	public $propackplusenabled;
	/**
	 * @var AdFormatEnabledCodeType | Specifies the default site setting for whether categories allow the Ad Format feature.
	 * True means the feature is allowed site-wide, unless a specific category overrides the setting.
	 */
	public $adformatenabled;
	/**
	 * @var DigitalDeliveryEnabledCodeType | eBay enables you to list and sell digital files (such as Adobe PDF files) or information
	 * that buyers can access online or have delivered electronically. This flag specifies whether
	 * most categories on the site allow digitally delivered items (i.e., the default setting
	 * for the site's categories).<br><br> If true, digitally delivered items are allowed site-wide,
	 * but specific categories can override the setting if they don't support it.<br> If false,
	 * digitally delivered items are not normally allowed for the site, but some categories may
	 * override the setting.<br><br> If a category supports digital listings, it means that you
	 * have the option to list digital items in that category (i.e., Item.DigitalDeliveryDetails
	 * can be specified in your listing request). It does not mean the category requires you to
	 * list items digitally. If you list in two categories, an item can only specify this option
	 * if both categories support digital listings. Digital listings are not eligible for eBay
	 * Express.
	 */
	public $digitaldeliveryenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow counter offers for best
	 * offers. True means counter offers are allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $bestoffercounterenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow auto decline for best offers.
	 * True means auto decline is allowed site-wide, unless a specific category overrides the
	 * setting.
	 */
	public $bestofferautodeclineenabled;
	/**
	 * @var boolean | Specifies the default site setting for  whether LocalMarketSpecialitySubscription feature
	 * is supported for this category.
	 */
	public $localmarketspecialitysubscription;
	/**
	 * @var boolean | Specifies the default site setting for whether LocalMarketRegularSubscription feature is
	 * supported for this category.
	 */
	public $localmarketregularsubscription;
	/**
	 * @var boolean | Specifies the default site setting for whether LocalMarketPremiumSubscription feature is
	 * supported for this category.
	 */
	public $localmarketpremiumsubscription;
	/**
	 * @var boolean | Specifies the default site setting for whether LocalMarketNonSubscription feature is supported
	 * for this category.
	 */
	public $localmarketnonsubscription;
	/**
	 * @var boolean | Specifies whether most categories on the site are eligible for eBay Express. eBay Express
	 * is a specialty site where customers can buy new, fixed-price goods in a more conventional
	 * e-commerce experience.<br><br> If true, items on the site are eligible for Express, but
	 * specific categories can override the setting if they don't support Express. For example,
	 * categories that are not covered by PayPal Buyer Protection (e.g., Live Auctions and Motors
	 * vehicles) are excluded from Express.<br> If false, items on the site are not eligible for
	 * Express, but some categories may override the setting.<br><br> If you list in an Express-enabled
	 * category, it does not necessarily mean that the item will appear in that category when
	 * buyers browse and search Express. It only means that the item can also be included on Express, assuming
	 * all other Express eligibility requirements are met. See "eBay Express" in the eBay Web
	 * Services guide for information about other eligibility requirements.
	 */
	public $expressenabled;
	/**
	 * @var boolean | Specifies whether most categories on the site require a listing to include a picture in
	 * order to qualify for eBay Express.<br><br> If true, items on the site require a picture
	 * in order to qualify for Express, but specific categories can override this requirement.
	 * For example, on the US site, pictures are normally required for Express listings. However,
	 * the Event Tickets category could override this requirement if pictures are not commonly expected
	 * for tickets.<br> If false, items on the site do not require a picture, but some categories
	 * may override the setting.<br><br> Only meaningful if ExpressEnabled is true for the category.
	 */
	public $expresspicturesrequired;
	/**
	 * @var boolean | Specifies whether most categories on the site require a listing to include the Item Condition
	 * attribute in order to qualify for eBay Express. <br><br> If true, items on the site require
	 * the Item Condition in order to qualify for Express, but specific categories can override
	 * this requirement. For example, on the US site, the Item Condition is normally required
	 * for Express listings. However, the Event Tickets category could override this requirement
	 * because there is little need to distinguish between new and used tickets. (People rarely
	 * sell used tickets after an event unless the ticket is also a collectible item.)<br> If
	 * false, items on the site do not require the Item Condition, but some categories may override
	 * the setting.<br><br> Only meaningful if ExpressEnabled is true for the category.
	 */
	public $expressconditionrequired;
	/**
	 * @var double | Specifies the default site setting for whether the Minimum Reserve Price feature is supported
	 * for this category.
	 */
	public $minimumreserveprice;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow seller-level contact information
	 * for Classified Ad format listings. A value of true means seller-level contact information
	 * is available for Classified Ad format listings site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $sellercontactdetailsenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether the Transaction Confirmation Request feature
	 * is supported for this category.
	 */
	public $transactionconfirmationrequestenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the Store Inventory Format
	 * feature. True means the feature is allowed site-wide, unless a specific category overrides
	 * the setting.
	 */
	public $storeinventoryenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the addition of Skype buttons
	 * to listings for transactional formats (e.g., the Chinese auction format).
	 */
	public $skypemetransactionalenabled;
	/**
	 * @var boolean | Specifies the default site setting for whether categories allow the addition of Skype buttons
	 * to listings for nontransactional formats (e.g., the advertisement format).
	 */
	public $skypemenontransactionalenabled;
	/**
	 * @var string | Specifies the supported local listing distances of regular vehicles.
	 */
	public $locallistingdistancesregular;
	/**
	 * @var string | Specifies the supported local listing distances of specialty vehicles.
	 */
	public $locallistingdistancesspecialty;
	/**
	 * @var string | Specifies the supported local listing distances for users who have not subscribed to either
	 * Regular or Specialty vehicles.
	 */
	public $locallistingdistancesnonsubscription;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ListingDurationReferenceType $val
	 * @throws Exception
	 */
	public function setListingDuration($val)
	{
        $this->listingduration = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingTermsRequired($val)
	{
        $this->shippingtermsrequired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferEnabled($val)
	{
        $this->bestofferenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDutchBINEnabled($val)
	{
        $this->dutchbinenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUserConsentRequired($val)
	{
        $this->userconsentrequired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHomePageFeaturedEnabled($val)
	{
        $this->homepagefeaturedenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProPackEnabled($val)
	{
        $this->propackenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBasicUpgradePackEnabled($val)
	{
        $this->basicupgradepackenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setValuePackEnabled($val)
	{
        $this->valuepackenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setProPackPlusEnabled($val)
	{
        $this->propackplusenabled = (int)$val;
	}

	/**
	 * @param AdFormatEnabledCodeType $val
	 * @throws Exception
	 */
	public function setAdFormatEnabled($val)
	{
        $this->adformatenabled = (int)$val;
	}

	/**
	 * @param DigitalDeliveryEnabledCodeType $val
	 * @throws Exception
	 */
	public function setDigitalDeliveryEnabled($val)
	{
        $this->digitaldeliveryenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferCounterEnabled($val)
	{
        $this->bestoffercounterenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferAutoDeclineEnabled($val)
	{
        $this->bestofferautodeclineenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketSpecialitySubscription($val)
	{
        $this->localmarketspecialitysubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketRegularSubscription($val)
	{
        $this->localmarketregularsubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketPremiumSubscription($val)
	{
        $this->localmarketpremiumsubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLocalMarketNonSubscription($val)
	{
        $this->localmarketnonsubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressEnabled($val)
	{
        $this->expressenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressPicturesRequired($val)
	{
        $this->expresspicturesrequired = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExpressConditionRequired($val)
	{
        $this->expressconditionrequired = (int)$val;
	}

	/**
	 * @param double $val
	 * @throws Exception
	 */
	public function setMinimumReservePrice($val)
	{
        $this->minimumreserveprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSellerContactDetailsEnabled($val)
	{
        $this->sellercontactdetailsenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setTransactionConfirmationRequestEnabled($val)
	{
        $this->transactionconfirmationrequestenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setStoreInventoryEnabled($val)
	{
        $this->storeinventoryenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSkypeMeTransactionalEnabled($val)
	{
        $this->skypemetransactionalenabled = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSkypeMeNonTransactionalEnabled($val)
	{
        $this->skypemenontransactionalenabled = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocalListingDistancesRegular($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LocalListingDistancesRegular');
        }
        $this->locallistingdistancesregular = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocalListingDistancesSpecialty($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LocalListingDistancesSpecialty');
        }
        $this->locallistingdistancesspecialty = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setLocalListingDistancesNonSubscription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for LocalListingDistancesNonSubscription');
        }
        $this->locallistingdistancesnonsubscription = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SiteDetailsType
 * Details about a specific site.
 */
class SiteDetailsType
{
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var int | 	 */
	public $siteid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setSiteID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->siteid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SiteHostedPictureType
 * Data for images hosted by eBay Picture Services (EPS).With compatibility level 439 and higher,
 * deprecated in the response in favor of Item.PictureDetails. With the future deprecation
 * of SiteHostedPicture as input, Applications should use Item.PictureDetails instead. <br><br> Note
 * that the Gallery Plus image enhancement does not support SiteHostedPicture. Use Item.PictureDetails
 * with that feature.
 */
class SiteHostedPictureType
{
	/**
	 * @var anyURI | Deprecated with compatibility level 383 and higher. Contains the URL for an image hosted
	 * on a location of the seller's choice (other than eBay) and associated with an item. If
	 * specified, this cannot have an empty/null value. You cannot specify multiple PictureURL
	 * fields. In most cases, the picture URL is also used for the picture at the top of the View
	 * Item page on the Web site.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL argument.<br> With compatibility 383 and higher,
	 * see SelfHostedURL instead.<br> With the future deprecation of VendorHostedPicture as input, applications
	 * should use Item.PictureDetails.PictureURL instead. See Item.PictureDetails.PictureURL for
	 * information about how to remove pictures from a listing.<br> For retrieval calls (e.g.,
	 * GetItem):<br> With compatibility levels lower than 383, PictureURL is returned.<br> With
	 * compatibility levels between 383 and 439, SelfHostedURL is returned instead.<br> With compatibility
	 * 439 and higher,  Item.PictureDetails.PictureURL is returned instead. <br><br> Note that
	 * the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
	 * with that feature.
	 */
	public $pictureurl;
	/**
	 * @var PhotoDisplayCodeType | Specifies the type of image display used in a listing. Some options are only available
	 * if images are hosted through eBay Picture Services (EPS). eBay determines this by parsing
	 * the associated PictureURL. Cannot be used in combination with Listing Designer layouts. Specify
	 * None or do not add PhotoDisplay when ListingDesigner.LayoutID is a value other than 0.
	 */
	public $photodisplay;
	/**
	 * @var GalleryTypeCodeType | Indicates whether a picture for the item is included in the Gallery and, if so whether
	 * the item is also featured or Plus in the Gallery. If the value is Gallery or Plus or Featured,
	 * eBay checks the available image URLs in the following order to determine which URL to use (if
	 * more than one of these URLs is available):<br><br>            a) Use the URL in GalleryURL,
	 * if it is specified.<br>            b) Otherwise, if ProductListingDetails.UseStockPhotoURLAsGallery
	 * is true, use the eBay stock photo.<br>            c) Otherwise, use the value of the first
	 * SelfHostedURL in the array of SelfHostedURL fields, if any.<br>            d) Otherwise,
	 * if ProductListingDetails.ProductID is specified, use the eBay stock photo
	 *  (eBay resets UseStockPhotoURLAsGallery to true in this case).<br>            e) If eBay
	 * is unable to find an image URL for the listing, an error is returned.<br><br>
	 *   See "Describing Items in a Listing" in the eBay Web Services Guide for additional information
	 *            about working with pictures and related validation rules.            You cannot
	 * remove Gallery or Plus or Featured when you revise a listing.
	 */
	public $gallerytype;
	/**
	 * @var anyURI | URL for a picture to be used as the Gallery thumbnail. Ignored if GalleryType is None or
	 * unspecified. If the value of GalleryType is Gallery or Featured, you can either specify
	 * GalleryURL or allow eBay to use another picture that you have included in the listing.
	 * (See GalleryType for the rules that determine which URL is used if you do not specify GalleryURL.)
	 * The image used for the Gallery thumbnail must be in one of the graphics formats JPEG, BMP,
	 * TIF, or GIF. eBay Live Auctions lots are listed in the gallery for free. With the future
	 * deprecation of VendorHostedPicture as input, Applications should use Item.PictureDetails.GalleryURL
	 * instead. If the item has bids (or items have been sold) or the listing ends within 12 hours, you
	 * can add GalleryURL or change its value, but you cannot remove the gallery picture if it
	 * was previously specified. Not applicable to eBay Motors listings. See "Describing Items
	 * in a Listing" in the If the value of GalleryType is Gallery or Plus or Featured, see eBay
	 * Web Services Guide for additional validation rules. <br><br> Note that the Gallery Plus
	 * image enhancement does not support VendorHostedPicture. Use Item.PictureDetails with that
	 * feature.
	 */
	public $galleryurl;
	/**
	 * @var PictureSourceCodeType | The service hosting the images in PictureURL, if any. This information is primarily useful
	 * for Picture Manager subscribers, who pay a flat subscription fee instead of individual
	 * picture fees per listing. Only returned when PictureURL is returned.
	 */
	public $picturesource;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setPictureURL($val)
	{
        $this->pictureurl = (int)$val;
	}

	/**
	 * @param PhotoDisplayCodeType $val
	 * @throws Exception
	 */
	public function setPhotoDisplay($val)
	{
        $this->photodisplay = (int)$val;
	}

	/**
	 * @param GalleryTypeCodeType $val
	 * @throws Exception
	 */
	public function setGalleryType($val)
	{
        $this->gallerytype = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setGalleryURL($val)
	{
        $this->galleryurl = (int)$val;
	}

	/**
	 * @param PictureSourceCodeType $val
	 * @throws Exception
	 */
	public function setPictureSource($val)
	{
        $this->picturesource = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SiteIdFilterCodeType
{
	const LISTEDINCURRENCYIMPLIED   = 'ListedInCurrencyImplied';
	const LOCATEDINCOUNTRYIMPLIED   = 'LocatedInCountryImplied';
	const AVAILABLEINCOUNTRYIMPLIED = 'AvailableInCountryImplied';
	const SITEIMPLIED               = 'SiteImplied';
	const BELGIUMLISTING            = 'BelgiumListing';
	const CUSTOMCODE                = 'CustomCode';
}

/**
 * SiteLocationType
 * Contains the data that defines a site-based filter (used when            searching for items
 * and filtering the search result set).
 */
class SiteLocationType
{
	/**
	 * @var SiteIDFilterCodeType | 	 */
	public $siteid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param SiteIDFilterCodeType $val
	 * @throws Exception
	 */
	public function setSiteID($val)
	{
        $this->siteid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SiteWideCharacteristicsType
 * A list of one or more characteristics sets mapped to the category, if any. Use this information
 * when working with Item Specifics (Attributes) and Pre-filled Item Information (Catalogs)
 * functionality.
 */
class SiteWideCharacteristicsType
{
	/**
	 * @var CharacteristicsSetType | Container for site-wide characteristics set information.
	 */
	public $characteristicsset;
	/**
	 * @var string | A category that does not support the specified site-wide characteristics set.
	 */
	public $excludecategoryid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CharacteristicsSetType $val
	 * @throws Exception
	 */
	public function setCharacteristicsSet($val)
	{
        $this->characteristicsset = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setExcludeCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ExcludeCategoryID');
        }
        $this->excludecategoryid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SkypeContactOptionCodeType
{
	const CHAT       = 'Chat';
	const VOICE      = 'Voice';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * SkypeMeNonTransactionalEnabledDefinitionType
 * Defines the feature of adding Skype buttons to listings for nontransactional formats (e.g.,
 * the advertisement format). If the field is present, the corresponding feature applies to
 * the category. The field is returned as an empty element (i.e., a boolean value is not returned).
 */
class SkypeMeNonTransactionalEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SkypeMeTransactionalEnabledDefinitionType
 * Defines the feature of adding Skype buttons to listings for transactional formats  (e.g.,
 * the Chinese auction format). If the field is present, the corresponding feature applies
 * to the category. The field is returned as an empty element (i.e., a boolean value is not
 * returned).
 */
class SkypeMeTransactionalEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SkypeOptionCodeType
{
	const NONE  = 'None';
	const VOICE = 'Voice';
}

class SortOrderCodeType
{
	const ASCENDING  = 'Ascending';
	const DESCENDING = 'Descending';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * SpellingSuggestionType
 * Suggested spelling of mispelled search terms, along with the number of matching items that
 * would have been returned if the suggestions had been used.
 */
class SpellingSuggestionType
{
	/**
	 * @var int | The number of matching items if the suggested spelling of the search term or terms had
	 * been used. If multiple terms are used, MatchingItemCount applies to the terms taken as
	 * a unit.
	 */
	public $matchingitemcount;
	/**
	 * @var string | Suggestion for a different spelling of the search term or terms. The suggestions are given
	 * in Text tags  and the suggestion for the first word is given before the suggestion for
	 * subsequent words.  Suggestions are based on correctly-spelled terms in items, so suggestions
	 * vary over time and depend on   whether a word or word combination is in one or more items.
	 */
	public $text;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMatchingItemCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->matchingitemcount = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Text');
        }
        $this->text = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class StoreCategoryUpdateActionCodeType
{
	const ADD        = 'Add';
	const DELETE     = 'Delete';
	const MOVE       = 'Move';
	const RENAME     = 'Rename';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * StoreColorSchemeArrayType
 * Set of eBay Store color schemes.
 */
class StoreColorSchemeArrayType
{
	/**
	 * @var StoreColorSchemeType | Theme color scheme.
	 */
	public $colorscheme;
	/**
	 * @param StoreColorSchemeType $val
	 * @throws Exception
	 */
	public function setColorScheme($val)
	{
        $this->colorscheme = (int)$val;
	}
}

/**
 * StoreColorSchemeType
 * Store color scheme.
 */
class StoreColorSchemeType
{
	/**
	 * @var int | Store color scheme ID. (use GetStoreOptions to get the list of valid theme color scheme
	 * IDs).
	 */
	public $colorschemeid;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var StoreColorType | Store color set.
	 */
	public $color;
	/**
	 * @var StoreFontType | Store font set.
	 */
	public $font;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setColorSchemeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->colorschemeid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param StoreColorType $val
	 * @throws Exception
	 */
	public function setColor($val)
	{
        $this->color = (int)$val;
	}

	/**
	 * @param StoreFontType $val
	 * @throws Exception
	 */
	public function setFont($val)
	{
        $this->font = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreColorType
 * Store color set.
 */
class StoreColorType
{
	/**
	 * @var string | Primary color for the Store. Specified in 6-digit Hex format. For example: F6F6C9
	 */
	public $primary;
	/**
	 * @var string | Secondary color for the Store. Specified in 6-digit Hex format. For example: F6F6C9
	 */
	public $secondary;
	/**
	 * @var string | Accent color for the Store. Specified in 6-digit Hex format. For example: F6F6C9
	 */
	public $accent;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setPrimary($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Primary');
        }
        $this->primary = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSecondary($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Secondary');
        }
        $this->secondary = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setAccent($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Accent');
        }
        $this->accent = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreCustomCategoryArrayType
 * Set of custom categories for the Store.
 */
class StoreCustomCategoryArrayType
{
	/**
	 * @var StoreCustomCategoryType | A Store custom category.
	 */
	public $customcategory;
	/**
	 * @param StoreCustomCategoryType $val
	 * @throws Exception
	 */
	public function setCustomCategory($val)
	{
        $this->customcategory = (int)$val;
	}
}

/**
 * StoreCustomCategoryType
 * Configuration of a store custom category.
 */
class StoreCustomCategoryType
{
	/**
	 * @var int | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var int | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @var StoreCustomCategoryType | Container for store custom subcategory configuration information. This field is being deprecated.
	 * Use ChildCategory to specify subcategories.
	 */
	public $childrencategories;
	/**
	 * @var StoreCustomCategoryType | Describes the configuration of a store custom subcategory. Stores support three levels
	 * of categories.
	 */
	public $childcategory;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->order = (int)$val;
	}

	/**
	 * @param StoreCustomCategoryType $val
	 * @throws Exception
	 */
	public function setChildrenCategories($val)
	{
        $this->childrencategories = (int)$val;
	}

	/**
	 * @param StoreCustomCategoryType $val
	 * @throws Exception
	 */
	public function setChildCategory($val)
	{
        $this->childcategory = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class StoreCustomHeaderLayoutCodeType
{
	const NOHEADER          = 'NoHeader';
	const CUSTOMHEADERSHOWN = 'CustomHeaderShown';
	const CUSTOMCODE        = 'CustomCode';
}

class StoreCustomListingHeaderDisplayCodeType
{
	const NONE                     = 'None';
	const FULL                     = 'Full';
	const FULLANDLEFTNAVIGATIONBAR = 'FullAndLeftNavigationBar';
	const CUSTOMCODE               = 'CustomCode';
}

class StoreCustomListingHeaderLinkCodeType
{
	const NONE           = 'None';
	const ABOUTMEPAGE    = 'AboutMePage';
	const CUSTOMPAGE     = 'CustomPage';
	const CUSTOMCATEGORY = 'CustomCategory';
	const CUSTOMCODE     = 'CustomCode';
}

/**
 * StoreCustomListingHeaderLinkType
 * Custom listing header link.
 */
class StoreCustomListingHeaderLinkType
{
	/**
	 * @var int | Link ID for the listing header link. The ID is used when the link  is a custom category
	 * or for a custom page, and it is not needed  when the LinkType property is "AboutMe" or
	 * "None".
	 */
	public $linkid;
	/**
	 * @var int | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @var StoreCustomListingHeaderLinkCodeType | Type of link to include in the custom listing header.
	 */
	public $linktype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLinkID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->linkid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->order = (int)$val;
	}

	/**
	 * @param StoreCustomListingHeaderLinkCodeType $val
	 * @throws Exception
	 */
	public function setLinkType($val)
	{
        $this->linktype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreCustomListingHeaderType
 * Configuration of a Store custom listing header.
 */
class StoreCustomListingHeaderType
{
	/**
	 * @var StoreCustomListingHeaderDisplayCodeType | Display type for the custom listing header.
	 */
	public $displaytype;
	/**
	 * @var boolean | Store logo.
	 */
	public $logo;
	/**
	 * @var boolean | Specifies whether the custom header has a search box.
	 */
	public $searchbox;
	/**
	 * @var StoreCustomListingHeaderLinkType | Link to include in the custom header.
	 */
	public $linktoinclude;
	/**
	 * @var boolean | Specifies whether the custom header has a link to Add to Favorite Stores.
	 */
	public $addtofavoritestores;
	/**
	 * @var boolean | Specifies whether the custom header has a link to Sign up for Store Newsletter.
	 */
	public $signupforstorenewsletter;
	/**
	 * @var boolean | Specifies whether the bread crumb needs to be displayed above the listing header.
	 */
	public $breadcrumb;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param StoreCustomListingHeaderDisplayCodeType $val
	 * @throws Exception
	 */
	public function setDisplayType($val)
	{
        $this->displaytype = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLogo($val)
	{
        $this->logo = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSearchBox($val)
	{
        $this->searchbox = (int)$val;
	}

	/**
	 * @param StoreCustomListingHeaderLinkType $val
	 * @throws Exception
	 */
	public function setLinkToInclude($val)
	{
        $this->linktoinclude = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAddToFavoriteStores($val)
	{
        $this->addtofavoritestores = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSignUpForStoreNewsletter($val)
	{
        $this->signupforstorenewsletter = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBreadCrumb($val)
	{
        $this->breadcrumb = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreCustomPageArrayType
 * Set of Store custom pages.
 */
class StoreCustomPageArrayType
{
	/**
	 * @var StoreCustomPageType | A Store custom page.
	 */
	public $custompage;
	/**
	 * @param StoreCustomPageType $val
	 * @throws Exception
	 */
	public function setCustomPage($val)
	{
        $this->custompage = (int)$val;
	}
}

class StoreCustomPageStatusCodeType
{
	const ACTIVE     = 'Active';
	const DELETE     = 'Delete';
	const INACTIVE   = 'Inactive';
	const CUSTOMCODE = 'CustomCode';
}

class StoreCustomPageType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var int | Unique identifier for the Store custom page. When you are using   SetStoreCustomPage, if
	 * you specify a valid PageID, the custom page  is updated. If you do not specify a PageID,
	 * the custom page is  added.
	 */
	public $pageid;
	/**
	 * @var string | The URL path of the Store (58 characters maximum). Only if you are using Chinese characters
	 * in the Name property do you need to use this field, such as if you are opening a Store
	 * on the Taiwan site. The reason for this is that the URL path is normally derived from the
	 * Store name, but it cannot be derived from the name of the Store if it contains Chinese
	 * characters because URLs cannot contain Chinese characters.
	 */
	public $urlpath;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var StoreCustomPageStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var string | The HTML content of the custom page. This field has a maximum size  of 96 kilobytes. If
	 * PreviewEnabled is true, then this value is required.   Otherwise, it is optional.
	 */
	public $content;
	/**
	 * @var boolean | Specifies whether the left navigation bar is visible on the page. LeftNav   is included
	 * in the GetStoreCustomPage response when PageID is specified   in the request.
	 */
	public $leftnav;
	/**
	 * @var boolean | If true, then the other inputs are ignored, and the content of the  page as it will be
	 * displayed within the Store is returned. If  false, then the page is either modified or
	 * added, and the content  of the page is not returned.
	 */
	public $previewenabled;
	/**
	 * @var int | Order in which the page is displayed in the list of custom pages.
	 */
	public $order;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPageID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->pageid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setURLPath($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for URLPath');
        }
        $this->urlpath = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param StoreCustomPageStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setContent($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Content');
        }
        $this->content = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setLeftNav($val)
	{
        $this->leftnav = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setPreviewEnabled($val)
	{
        $this->previewenabled = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setOrder($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->order = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class StoreFontFaceCodeType
{
	const ARIAL      = 'Arial';
	const COURIER    = 'Courier';
	const TIMES      = 'Times';
	const VERDANA    = 'Verdana';
	const CUSTOMCODE = 'CustomCode';
}

class StoreFontSizeCodeType
{
	const XXS        = 'XXS';
	const XS         = 'XS';
	const S          = 'S';
	const M          = 'M';
	const L          = 'L';
	const XL         = 'XL';
	const XXL        = 'XXL';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * StoreFontType
 * Store font set.
 */
class StoreFontType
{
	/**
	 * @var StoreFontFaceCodeType | Font for the Store name.
	 */
	public $nameface;
	/**
	 * @var StoreFontSizeCodeType | Font size for the Store name.
	 */
	public $namesize;
	/**
	 * @var string | Font color for the Store name. Specified in 6-digit Hex format. For example: F6F6C9
	 */
	public $namecolor;
	/**
	 * @var StoreFontFaceCodeType | Font for the Store section title.
	 */
	public $titleface;
	/**
	 * @var StoreFontSizeCodeType | Font size for the Store section title.
	 */
	public $titlesize;
	/**
	 * @var string | Font color for the Store section title. Specified in 6-digit Hex format. For example: F6F6C9
	 */
	public $titlecolor;
	/**
	 * @var StoreFontFaceCodeType | Font for the Store description.
	 */
	public $descface;
	/**
	 * @var StoreFontSizeCodeType | Font size for the Store description.
	 */
	public $descsize;
	/**
	 * @var string | Font color for the Store description. Specified in 6-digit Hex format. For example: F6F6C9
	 */
	public $desccolor;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param StoreFontFaceCodeType $val
	 * @throws Exception
	 */
	public function setNameFace($val)
	{
        $this->nameface = (int)$val;
	}

	/**
	 * @param StoreFontSizeCodeType $val
	 * @throws Exception
	 */
	public function setNameSize($val)
	{
        $this->namesize = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setNameColor($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for NameColor');
        }
        $this->namecolor = (int)$val;
	}

	/**
	 * @param StoreFontFaceCodeType $val
	 * @throws Exception
	 */
	public function setTitleFace($val)
	{
        $this->titleface = (int)$val;
	}

	/**
	 * @param StoreFontSizeCodeType $val
	 * @throws Exception
	 */
	public function setTitleSize($val)
	{
        $this->titlesize = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitleColor($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TitleColor');
        }
        $this->titlecolor = (int)$val;
	}

	/**
	 * @param StoreFontFaceCodeType $val
	 * @throws Exception
	 */
	public function setDescFace($val)
	{
        $this->descface = (int)$val;
	}

	/**
	 * @param StoreFontSizeCodeType $val
	 * @throws Exception
	 */
	public function setDescSize($val)
	{
        $this->descsize = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescColor($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for DescColor');
        }
        $this->desccolor = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class StoreHeaderStyleCodeType
{
	const FULL       = 'Full';
	const MINIMIZED  = 'Minimized';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * StoreInventoryEnabledDefinitionType
 * Defines the StoreInventoryEnabled feature. If the field is present, the corresponding feature
 * applies to the category. The field is returned as an empty element (e.g., a boolean value
 * is not returned).value different from site.
 */
class StoreInventoryEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class StoreItemListLayoutCodeType
{
	const LISTVIEW    = 'ListView';
	const GALLERYVIEW = 'GalleryView';
	const CUSTOMCODE  = 'CustomCode';
}

class StoreItemListSortOrderCodeType
{
	const ENDINGFIRST   = 'EndingFirst';
	const NEWLYLISTED   = 'NewlyListed';
	const LOWESTPRICED  = 'LowestPriced';
	const HIGHESTPRICED = 'HighestPriced';
	const CUSTOMCODE    = 'CustomCode';
}

/**
 * StoreLogoArrayType
 * Set of Store logos.
 */
class StoreLogoArrayType
{
	/**
	 * @var StoreLogoType | Store logo.
	 */
	public $logo;
	/**
	 * @param StoreLogoType $val
	 * @throws Exception
	 */
	public function setLogo($val)
	{
        $this->logo = (int)$val;
	}
}

/**
 * StoreLogoType
 * Store logo.
 */
class StoreLogoType
{
	/**
	 * @var int | Store logo ID (use GetStoreOptions to get the list of valid logo IDs).
	 */
	public $logoid;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setLogoID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->logoid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StorePreferencesType
 * Store Preferences type.
 */
class StorePreferencesType
{
	/**
	 * @var StoreVacationPreferencesType | Store vacation hold preferences.
	 */
	public $vacationpreferences;
	/**
	 * @param StoreVacationPreferencesType $val
	 * @throws Exception
	 */
	public function setVacationPreferences($val)
	{
        $this->vacationpreferences = (int)$val;
	}
}

class StoreSearchCodeType
{
	const ALLITEMSINTHESTORE       = 'AllItemsInTheStore';
	const AUCTIONITEMSINTHESTORE   = 'AuctionItemsInTheStore';
	const BUYITNOWITEMSINTHESTORE  = 'BuyItNowItemsInTheStore';
	const BUYITNOWITEMSINALLSTORES = 'BuyItNowItemsInAllStores';
	const CUSTOMCODE               = 'CustomCode';
}

/**
 * StoreSubscriptionArrayType
 * Set of eBay Store subscription levels.
 */
class StoreSubscriptionArrayType
{
	/**
	 * @var StoreSubscriptionType | A Store subscription level.
	 */
	public $subscription;
	/**
	 * @param StoreSubscriptionType $val
	 * @throws Exception
	 */
	public function setSubscription($val)
	{
        $this->subscription = (int)$val;
	}
}

class StoreSubscriptionLevelCodeType
{
	const CLOSE      = 'Close';
	const BASIC      = 'Basic';
	const FEATURED   = 'Featured';
	const ANCHOR     = 'Anchor';
	const CUSTOMCODE = 'CustomCode';
}

class StoreSubscriptionType
{
	/**
	 * @var StoreSubscriptionLevelCodeType | Store subscription level.
	 */
	public $level;
	/**
	 * @var AmountType | Monthly fee for the Store subscription level.
	 */
	public $fee;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param StoreSubscriptionLevelCodeType $val
	 * @throws Exception
	 */
	public function setLevel($val)
	{
        $this->level = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setFee($val)
	{
        $this->fee = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreThemeArrayType
 * Set of Store themes.
 */
class StoreThemeArrayType
{
	/**
	 * @var StoreThemeType | Store theme.
	 */
	public $theme;
	/**
	 * @var StoreColorSchemeArrayType | Set of color schemes. This set is for use with those themes that do not explicitly list
	 * a color scheme in the theme definition (these themes are also known as advanced themes).
	 */
	public $genericcolorschemearray;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param StoreThemeType $val
	 * @throws Exception
	 */
	public function setTheme($val)
	{
        $this->theme = (int)$val;
	}

	/**
	 * @param StoreColorSchemeArrayType $val
	 * @throws Exception
	 */
	public function setGenericColorSchemeArray($val)
	{
        $this->genericcolorschemearray = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreThemeType
 * Store theme.
 */
class StoreThemeType
{
	/**
	 * @var int | Unique identifier for each theme in this group. There is at least one theme in a theme
	 * group.
	 */
	public $themeid;
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var StoreColorSchemeType | Theme color scheme.
	 */
	public $colorscheme;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setThemeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->themeid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param StoreColorSchemeType $val
	 * @throws Exception
	 */
	public function setColorScheme($val)
	{
        $this->colorscheme = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreType
 * The configuration of an eBay Store.
 */
class StoreType
{
	/**
	 * @var string | Name of the eBay Store. The name is shown at the top of the Store page.
	 */
	public $name;
	/**
	 * @var string | The URL path of the Store (58 characters maximum). Only if you are using Chinese characters
	 * in the Name property do you need to use this field, such as if you are opening a Store
	 * on the Taiwan site. The reason for this is that the URL path is normally derived from the
	 * Store name, but it cannot be derived from the name of the Store if it contains Chinese
	 * characters because URLs cannot contain Chinese characters.
	 */
	public $urlpath;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var StoreSubscriptionLevelCodeType | Subscription level (tier) for the user's eBay Store.
	 */
	public $subscriptionlevel;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var StoreLogoType | Store logo.
	 */
	public $logo;
	/**
	 * @var StoreThemeType | Store theme.
	 */
	public $theme;
	/**
	 * @var StoreHeaderStyleCodeType | Style for the Store header.
	 */
	public $headerstyle;
	/**
	 * @var int | Page to use as the Store's homepage (default is 0). To change the homepage, specify the
	 * PageID of one of the Store's custom pages.
	 */
	public $homepage;
	/**
	 * @var StoreItemListLayoutCodeType | The default layout type to use for the Store items.
	 */
	public $itemlistlayout;
	/**
	 * @var StoreItemListSortOrderCodeType | The default sort order to use for the items for sale in the Store.
	 */
	public $itemlistsortorder;
	/**
	 * @var StoreCustomHeaderLayoutCodeType | Layout for the Store's custom header.
	 */
	public $customheaderlayout;
	/**
	 * @var string | Custom header text for the Store.
	 */
	public $customheader;
	/**
	 * @var boolean | Specifies whether to export the Store listings to comparison shopping websites.
	 */
	public $exportlistings;
	/**
	 * @var StoreCustomCategoryArrayType | Custom categories for the Store. Deprecated (input ignored) for SetStore with request version
	 * 449 or higher. Use SetStoreCategories with request verison 449 or higher to modify store
	 * category structures.
	 */
	public $customcategories;
	/**
	 * @var StoreCustomListingHeaderType | Custom listing header for the Store.
	 */
	public $customlistingheader;
	/**
	 * @var MerchDisplayCodeType | Specifies the chosen customization display scheme for this store's Merch Widgets. See MerchDisplayCodeType
	 * for specific values.
	 */
	public $merchdisplay;
	/**
	 * @var dateTime | Indicates the time the store was last opened or reopened.
	 */
	public $lastopenedtime;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Name');
        }
        $this->name = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setURLPath($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for URLPath');
        }
        $this->urlpath = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param StoreSubscriptionLevelCodeType $val
	 * @throws Exception
	 */
	public function setSubscriptionLevel($val)
	{
        $this->subscriptionlevel = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param StoreLogoType $val
	 * @throws Exception
	 */
	public function setLogo($val)
	{
        $this->logo = (int)$val;
	}

	/**
	 * @param StoreThemeType $val
	 * @throws Exception
	 */
	public function setTheme($val)
	{
        $this->theme = (int)$val;
	}

	/**
	 * @param StoreHeaderStyleCodeType $val
	 * @throws Exception
	 */
	public function setHeaderStyle($val)
	{
        $this->headerstyle = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setHomePage($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->homepage = (int)$val;
	}

	/**
	 * @param StoreItemListLayoutCodeType $val
	 * @throws Exception
	 */
	public function setItemListLayout($val)
	{
        $this->itemlistlayout = (int)$val;
	}

	/**
	 * @param StoreItemListSortOrderCodeType $val
	 * @throws Exception
	 */
	public function setItemListSortOrder($val)
	{
        $this->itemlistsortorder = (int)$val;
	}

	/**
	 * @param StoreCustomHeaderLayoutCodeType $val
	 * @throws Exception
	 */
	public function setCustomHeaderLayout($val)
	{
        $this->customheaderlayout = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCustomHeader($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CustomHeader');
        }
        $this->customheader = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setExportListings($val)
	{
        $this->exportlistings = (int)$val;
	}

	/**
	 * @param StoreCustomCategoryArrayType $val
	 * @throws Exception
	 */
	public function setCustomCategories($val)
	{
        $this->customcategories = (int)$val;
	}

	/**
	 * @param StoreCustomListingHeaderType $val
	 * @throws Exception
	 */
	public function setCustomListingHeader($val)
	{
        $this->customlistingheader = (int)$val;
	}

	/**
	 * @param MerchDisplayCodeType $val
	 * @throws Exception
	 */
	public function setMerchDisplay($val)
	{
        $this->merchdisplay = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastOpenedTime($val)
	{
        $this->lastopenedtime = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * StoreVacationPreferencesType
 * Specifies a set of Store vacation preferences.
 */
class StoreVacationPreferencesType
{
	/**
	 * @var boolean | Specifies whether the Store owner is on vacation.<br> When OnVacation is true, the Store
	 * owner's listings do not appear on Express, regardless of the listing format and regardless
	 * of how the seller has configured their vacation settings for items that appear on eBay.
	 */
	public $onvacation;
	/**
	 * @var dateTime | Seller return date from vacation.
	 */
	public $returndate;
	/**
	 * @var boolean | Hide Store Inventory format items when the Store owner is on vacation.<br><br> When OnVacation
	 * is true, the Store owner's listings do not appear on Express, regardless of the listing
	 * format and regardless of how the seller has configured their vacation settings for items
	 * that appear on eBay.
	 */
	public $hidefixedpricestoreitems;
	/**
	 * @var boolean | Add a message when the Store owner is on vacation to all their active items.
	 */
	public $messageitem;
	/**
	 * @var boolean | Add a message to all the Store pages when the Store owner is on vacation.
	 */
	public $messagestore;
	/**
	 * @var boolean | Display custom message on the Store pages instead of the default message.
	 */
	public $displaymessagestorecustomtext;
	/**
	 * @var string | The custom message to display for the Store when the user is on vacation. May contain HTML
	 * markup.
	 */
	public $messagestorecustomtext;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setOnVacation($val)
	{
        $this->onvacation = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setReturnDate($val)
	{
        $this->returndate = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setHideFixedPriceStoreItems($val)
	{
        $this->hidefixedpricestoreitems = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMessageItem($val)
	{
        $this->messageitem = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMessageStore($val)
	{
        $this->messagestore = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setDisplayMessageStoreCustomText($val)
	{
        $this->displaymessagestorecustomtext = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessageStoreCustomText($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MessageStoreCustomText');
        }
        $this->messagestorecustomtext = (int)$val;
	}
}

/**
 * StorefrontType
 * Contains information related to the item in the context of a seller's eBay Store. Applicable
 * for auction format, Basic Fixed Price, and Store Inventory format items listed by eBay Stores
 * sellers.
 */
class StorefrontType
{
	/**
	 * @var int | Numeric ID for a custom category that the seller created in their eBay Store, if any. eBay
	 * Stores sellers can create up to three levels of custom categories for their stores. Items
	 * can only be listed in store categories that have no child categories (subcategories). If
	 * you attempt to list an item in a category that has subcategories, the call response contains
	 * a warning, and the item is listed in the Other store category. In GetSearchResults, this
	 * field currently returns 0. As a workaround, use GetItem or related calls to get the ID.
	 */
	public $storecategoryid;
	/**
	 * @var int | Applicable for eBay Store sellers only. Numeric ID for a second custom category that the
	 * seller created in their eBay Store. eBay Stores sellers can create up to 300 custom categories
	 * for their stores. (One additional Store category cannot be customized and retains the value
	 * of "Other"). <br> If you specify an invalid value, the values are the same for both the
	 * primary and secondary store categories, or if the seondary store category is specified
	 * but the primary is left blank (or other),  the system resets the value to 0 (None). In
	 * short, the primary store category must be set to something meaningful and different from
	 * the second store category in order to set the secondary store category to a value other
	 * than 0. In GetSearchResults, this field currently returns 0. As a workaround, use GetItem
	 * or related calls to get the ID.
	 */
	public $storecategory2id;
	/**
	 * @var anyURI | The URL of the seller's eBay Store page. Output only.
	 */
	public $storeurl;
	/**
	 * @var string | The name of the seller's eBay Store.
	 */
	public $storename;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setStoreCategoryID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->storecategoryid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setStoreCategory2ID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->storecategory2id = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setStoreURL($val)
	{
        $this->storeurl = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setStoreName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for StoreName');
        }
        $this->storename = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class StringMatchCodeType
{
	const CUSTOMCODE = 'CustomCode';
	const STARTSWITH = 'StartsWith';
	const CONTAINS   = 'Contains';
}

/**
 * SuggestedCategoryArrayType
 * Contains an array of categories that contain listings with     specified keywords in their
 * titles or descriptions. The array     can contain up to 10 categories.
 */
class SuggestedCategoryArrayType
{
	/**
	 * @var SuggestedCategoryType | Describes a category that contains listings that match    specified keywords in the query.
	 * Returned if a category matches the query.
	 */
	public $suggestedcategory;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param SuggestedCategoryType $val
	 * @throws Exception
	 */
	public function setSuggestedCategory($val)
	{
        $this->suggestedcategory = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SuggestedCategoryType
 * Defines a suggested category, returned      in response to a search for categories that
 * contain      listings with certain keywords in their titles and descriptions.
 */
class SuggestedCategoryType
{
	/**
	 * @var CategoryType | Describes a category that contains items that match the query.
	 */
	public $category;
	/**
	 * @var int | Percentage of the matching items that were found in this category, relative to other categories
	 * in which matching items were also found. Indicates the distribution of matching items across
	 * the suggested categories.
	 */
	public $percentitemfound;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param CategoryType $val
	 * @throws Exception
	 */
	public function setCategory($val)
	{
        $this->category = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setPercentItemFound($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->percentitemfound = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * SummaryEventScheduleType
 * Details about a summary event schedule.
 */
class SummaryEventScheduleType
{
	/**
	 * @var NotificationEventTypeCodeType | 	 */
	public $eventtype;
	/**
	 * @var SummaryWindowPeriodCodeType | The period of time for which to create a summary.
	 */
	public $summaryperiod;
	/**
	 * @var SummaryFrequencyCodeType | How often the summary is to be delivered.
	 */
	public $frequency;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param NotificationEventTypeCodeType $val
	 * @throws Exception
	 */
	public function setEventType($val)
	{
        $this->eventtype = (int)$val;
	}

	/**
	 * @param SummaryWindowPeriodCodeType $val
	 * @throws Exception
	 */
	public function setSummaryPeriod($val)
	{
        $this->summaryperiod = (int)$val;
	}

	/**
	 * @param SummaryFrequencyCodeType $val
	 * @throws Exception
	 */
	public function setFrequency($val)
	{
        $this->frequency = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class SummaryFrequencyCodeType
{
	const EVERYSUNDAY    = 'EverySunday';
	const EVERYMONDAY    = 'EveryMonday';
	const EVERYTUESDAY   = 'EveryTuesday';
	const EVERYWEDNESDAY = 'EveryWednesday';
	const EVERYTHURSDAY  = 'EveryThursday';
	const EVERYFRIDAY    = 'EveryFriday';
	const EVERYSATURDAY  = 'EverySaturday';
	const MONTHLYON1ST   = 'MonthlyOn1st';
	const MONTHLYON2ND   = 'MonthlyOn2nd';
	const MONTHLYON3RD   = 'MonthlyOn3rd';
	const MONTHLYON4TH   = 'MonthlyOn4th';
	const MONTHLYON5TH   = 'MonthlyOn5th';
	const MONTHLYON6TH   = 'MonthlyOn6th';
	const MONTHLYON7TH   = 'MonthlyOn7th';
	const MONTHLYON8TH   = 'MonthlyOn8th';
	const MONTHLYON9TH   = 'MonthlyOn9th';
	const MONTHLYON10TH  = 'MonthlyOn10th';
	const MONTHLYON11TH  = 'MonthlyOn11th';
	const MONTHLYON12TH  = 'MonthlyOn12th';
	const MONTHLYON13TH  = 'MonthlyOn13th';
	const MONTHLYON14TH  = 'MonthlyOn14th';
	const MONTHLYON15TH  = 'MonthlyOn15th';
	const MONTHLYON16TH  = 'MonthlyOn16th';
	const MONTHLYON17TH  = 'MonthlyOn17th';
	const MONTHLYON18TH  = 'MonthlyOn18th';
	const MONTHLYON19TH  = 'MonthlyOn19th';
	const MONTHLYON20TH  = 'MonthlyOn20th';
	const MONTHLYON21ST  = 'MonthlyOn21st';
	const MONTHLYON22ND  = 'MonthlyOn22nd';
	const MONTHLYON23RD  = 'MonthlyOn23rd';
	const MONTHLYON24TH  = 'MonthlyOn24th';
	const MONTHLYON25TH  = 'MonthlyOn25th';
	const MONTHLYON26TH  = 'MonthlyOn26th';
	const MONTHLYON27TH  = 'MonthlyOn27th';
	const MONTHLYON28TH  = 'MonthlyOn28th';
	const MONTHLYON29TH  = 'MonthlyOn29th';
	const MONTHLYON30TH  = 'MonthlyOn30th';
	const MONTHLYON31ST  = 'MonthlyOn31st';
	const EVERY31DAYS    = 'Every31Days';
	const EVERY60DAYS    = 'Every60Days';
}

class SummaryWindowPeriodCodeType
{
	const LAST24HOURS  = 'Last24Hours';
	const LAST7DAYS    = 'Last7Days';
	const LAST31DAYS   = 'Last31Days';
	const CURRENTWEEK  = 'CurrentWeek';
	const LASTWEEK     = 'LastWeek';
	const CURRENTMONTH = 'CurrentMonth';
	const LASTMONTH    = 'LastMonth';
	const LAST60DAYS   = 'Last60Days';
}

/**
 * TCREnabledDefinitionType
 * Defines the Transaction Confirmation Request feature. If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class TcRenabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class TaskStatusCodeType
{
	const PENDING    = 'Pending';
	const INPROGRESS = 'InProgress';
	const COMPLETE   = 'Complete';
	const FAILED     = 'Failed';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * TaxJurisdictionType
 * Tax-related details for a region or jurisdiction.
 */
class TaxJurisdictionType
{
	/**
	 * @var string | Representative identifier for the jurisdiction. Typically an abbreviation (e.g. CA for
	 * California).
	 */
	public $jurisdictionid;
	/**
	 * @var float | The tax percent to apply for a listing shipped to this jurisdiction. The value passed in
	 * is stored with a precision of 3 digits after the decimal point (##.###). GetTaxTable: this
	 * tag has no value if the user's tax table has not been set.
	 */
	public $salestaxpercent;
	/**
	 * @var boolean | Whether shipping costs are to be part of the base amount that is taxed. GetTaxTable: This
	 * tag is empty if the user did not previously provide information.
	 */
	public $shippingincludedintax;
	/**
	 * @var string | Full name for the jurisdiction or region for display purposes.
	 */
	public $jurisdictionname;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setJurisdictionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for JurisdictionID');
        }
        $this->jurisdictionid = (int)$val;
	}

	/**
	 * @param float $val
	 * @throws Exception
	 */
	public function setSalesTaxPercent($val)
	{
        $this->salestaxpercent = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setShippingIncludedInTax($val)
	{
        $this->shippingincludedintax = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setJurisdictionName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for JurisdictionName');
        }
        $this->jurisdictionname = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * TaxTableType
 * Sales tax details for zero or more jurisdictions (states, provinces, etc).
 */
class TaxTableType
{
	/**
	 * @var TaxJurisdictionType | Sales tax details for zero or more jurisdictions (states, provinces, etc). For GetTaxTable,
	 * if DetailLevel is not specified, information is only returned for the jurisdictions for
	 * which the user provided tax information. If DetailLevel is ReturnAll, tax information is
	 * returned for all possible jurisdictions, whether specified by the user or not. ShippingIncludedInTax
	 * and SalesTaxPercent are returned but are empty.
	 */
	public $taxjurisdiction;
	/**
	 * @param TaxJurisdictionType $val
	 * @throws Exception
	 */
	public function setTaxJurisdiction($val)
	{
        $this->taxjurisdiction = (int)$val;
	}
}

/**
 * ThemeGroupType
 * Data for one theme group. Returned for GetDescriptionTemplates if theme groups are requested.
 */
class ThemeGroupType
{
	/**
	 * @var int | Unique identifier for this theme group.
	 */
	public $groupid;
	/**
	 * @var string | Name of this theme group (localized to the language associated with the eBay site).
	 */
	public $groupname;
	/**
	 * @var int | Unique identifier for each theme in this group. There is at least one theme in a theme
	 * group.
	 */
	public $themeid;
	/**
	 * @var int | The number of ThemeID elements in this group.
	 */
	public $themetotal;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setGroupID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->groupid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setGroupName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for GroupName');
        }
        $this->groupname = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setThemeID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->themeid = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setThemeTotal($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->themetotal = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class TokenReturnMethodCodeType
{
	const REDIRECT   = 'Redirect';
	const FETCHTOKEN = 'FetchToken';
	const CUSTOMCODE = 'CustomCode';
}

class TradingRoleCodeType
{
	const BUYER      = 'Buyer';
	const SELLER     = 'Seller';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * TransactionArrayType
 * Contains an array of transactions.
 */
class TransactionArrayType
{
	/**
	 * @var TransactionType | Information about one transaction. Also applicable to Half.com (for GetOrders).
	 */
	public $transaction;
	/**
	 * @param TransactionType $val
	 * @throws Exception
	 */
	public function setTransaction($val)
	{
        $this->transaction = (int)$val;
	}
}

class TransactionPlatformType
{
	const EBAY    = 'eBay';
	const EXPRESS = 'Express';
}

/**
 * TransactionStatusType
 * Contains the status of the transaction, such as the buyer's online payment and whether the
 * checkout process for the transaction has been completed.
 */
class TransactionStatusType
{
	/**
	 * @var PaymentStatusCodeType | Indicates the success or failure of the buyer's online payment for a transaction. Only
	 * applicable if the buyer chose PayPal as the payment method for the transaction. If the
	 * payment failed, the value returned indicates the reason for the failure. Output only.
	 */
	public $ebaypaymentstatus;
	/**
	 * @var CheckoutStatusCodeType | Indicates the current status of the checkout process for the transaction.
	 */
	public $checkoutstatus;
	/**
	 * @var dateTime | Indicates date and time a transaction's status or incomplete state was last updated (in
	 * GMT).
	 */
	public $lasttimemodified;
	/**
	 * @var BuyerPaymentMethodCodeType | Payment method the buyer selected for paying the seller for the transaction. If checkout
	 * is not yet complete, PaymentMethodUsed is set to whatever the buyer selected as his or
	 * her preference on the Review Your Purchase page.
	 */
	public $paymentmethodused;
	/**
	 * @var CompleteStatusCodeType | Indicates whether the transaction process is complete or incomplete.
	 */
	public $completestatus;
	/**
	 * @var boolean | Indicates whether the buyer has selected shipping details during checkout. False indicates
	 * that the shipping service was selected by eBay for the buyer. For example, if the buyer
	 * has not yet completed the Review Your Purchase page, he has not picked a shipping service.
	 * If it is false, the application should ignore ShippingServiceCost and ShippingServiceSelected (items
	 * whose values are defaulted by eBay).
	 */
	public $buyerselectedshipping;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param PaymentStatusCodeType $val
	 * @throws Exception
	 */
	public function setEBayPaymentStatus($val)
	{
        $this->ebaypaymentstatus = (int)$val;
	}

	/**
	 * @param CheckoutStatusCodeType $val
	 * @throws Exception
	 */
	public function setCheckoutStatus($val)
	{
        $this->checkoutstatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setLastTimeModified($val)
	{
        $this->lasttimemodified = (int)$val;
	}

	/**
	 * @param BuyerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setPaymentMethodUsed($val)
	{
        $this->paymentmethodused = (int)$val;
	}

	/**
	 * @param CompleteStatusCodeType $val
	 * @throws Exception
	 */
	public function setCompleteStatus($val)
	{
        $this->completestatus = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBuyerSelectedShipping($val)
	{
        $this->buyerselectedshipping = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * TransactionType
 * Contains information about a single transaction. A transaction contains information about
 * the sale one or multiple items from a listing to a single buyer. The eBay system creates
 * a transaction when a buyer has made a purchase (fixed-price listings) or is the winning
 * bidder (BIN and competitive-bidding listings). A listing can spawn one or more transactions
 * in these cases: multi-item fixed-price listings and Dutch listings. A listing can spawn
 * only a single transaction in these cases: single-item fixed-price listings and Chinese listings.
 */
class TransactionType
{
	/**
	 * @var AmountType | The amount the buyer paid for the item(s) in the transaction. If the seller allowed the
	 * buyer to change the item total, the buyer is able to change the total until the time that
	 * the transaction's status moves to Complete. Determine whether the buyer changed the amount
	 * by retrieving the transaction data and comparing the AmountPaid value to what the seller
	 * expected. For combined payment (the transaction is part of an order), GetSellerTransactions
	 * and GetItemTransactions return the amount paid for the order to which the transaction belongs. For
	 * Motors items, AmountPaid is the amount paid by the buyer for the deposit. Not applicable
	 * to Half.com.
	 */
	public $amountpaid;
	/**
	 * @var AmountType | Adjustment amount entered by the buyer. A positive amount indicates the amount is an extra
	 * charge being paid to the seller by the buyer. A negative value indicates this amount is
	 * a credit given to the buyer by the seller. Not applicable to Half.com.
	 */
	public $adjustmentamount;
	/**
	 * @var AmountType | Converted value of AdjustmentAmount in the currency of the site that returned the response.
	 * Refresh this value every 24 hours to pick up the current conversion rates. Not applicable
	 * to Half.com.
	 */
	public $convertedadjustmentamount;
	/**
	 * @var UserType | Contains the data for the transaction's buyer. See UserType for its child elements. Not
	 * applicable to Half.com except for GetOrders.
	 */
	public $buyer;
	/**
	 * @var ShippingDetailsType | The shipping-related details for an item or transaction, including flat and calculated
	 * shipping costs and shipping insurance costs. For GetOrders, also applicable to Half.com.
	 * For GetOrders, minimal ShippingDetails information is returned under the Transaction container.
	 */
	public $shippingdetails;
	/**
	 * @var AmountType | Converted value of AmountPaid in the currency of the site that returned the response. Refresh
	 * this value every 24 hours to pick up the current conversion rates. Not applicable to Half.com.
	 */
	public $convertedamountpaid;
	/**
	 * @var AmountType | Converted value of TransactionPrice in the currency of the site that returned the response.
	 * Refresh this value every 24 hours to pick up the current conversion rates. Not applicable
	 * to Half.com.
	 */
	public $convertedtransactionprice;
	/**
	 * @var dateTime | Indicates when the transaction was created. For fixed-price, Stores, and BIN items this
	 * indicates when the purchase (or BIN) occurred. For competitive-bidding listing types this
	 * indicates when listing ended, the winning bidder(s) determined, and the transaction created. For
	 * GetOrders, only applicable to Half.com.
	 */
	public $createddate;
	/**
	 * @var DepositTypeCodeType | Deposit type for US eBay Motors items. If item is not a Motors item, then returns an empty
	 * value for DepositType. See DepositTypeCodeType for specific values. Not applicable to Half.com.
	 */
	public $deposittype;
	/**
	 * @var ItemType | Information about the item that spawned the transaction. It is a purchase from this item's
	 * listing that the transaction represents. To remove a property from an item, specify it
	 * in ModifyType as a changed property, but do not give it a value in Item. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $item;
	/**
	 * @var int | Indicates the number of items the buyer purchased from the listing identified in ItemID. Also
	 * applicable to Half.com (for GetOrders).
	 */
	public $quantitypurchased;
	/**
	 * @var TransactionStatusType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var string | Identifier for the transaction. A value of zero is used for the Chinese auction format. Thus,
	 * a value of zero is a valid transaction ID. A transaction ID is only unique to the listing that
	 * spawned it, so a transaction is only uniquely identified on a global basis by a combination
	 * of ItemID and TransactionID. Also applicable to Half.com (for GetOrders).
	 */
	public $transactionid;
	/**
	 * @var AmountType | Price of the transaction (before shipping and sales tax) that the buyer needs to pay to
	 * complete the purchase. For eBay Motors, TransactionPrice is the deposit amount. Also applicable
	 * to Half.com (for GetOrders).
	 */
	public $transactionprice;
	/**
	 * @var boolean | Whether the transaction was completed with the seller selecting a best offer. Not applicable
	 * to Half.com.
	 */
	public $bestoffersale;
	/**
	 * @var decimal | VAT rate for the item, if any. When the VATPercent is specified, the item's VAT information
	 * appears on the item's listing page. In addition, the seller can choose to print an invoice
	 * that includes the item's net price, VAT percent, VAT amount, and total price. Since VAT
	 * rates vary depending on the item and on the user's country of residence, a seller is responsible
	 * for entering the correct VAT rate; it is not calculated by eBay. To specify a VATPercent,
	 * a seller must have a VAT-ID registered with eBay and must be listing the item on a VAT-enabled
	 * site. Max applicable length is 6 characters, including the decimal (e.g., 12.345). The
	 * scale is 3 decimal places. (If you pass in 12.3456, eBay may round up the value to 12.346.) Note:
	 * The View Item page may display the precision to 2 decimal places with no trailing zeros.
	 * However, the full value you send in is stored.
	 */
	public $vatpercent;
	/**
	 * @var ExternalTransactionType | A PayPal transaction that relates to this eBay transaction. Returned only if there is at
	 * least one PayPal transaction related to this eBay transaction. Not applicable to Half.com.
	 */
	public $externaltransaction;
	/**
	 * @var SellingManagerProductDetailsType | Not applicable to Half.com.
	 */
	public $sellingmanagerproductdetails;
	/**
	 * @var ShippingServiceOptionsType | The shipping service selected by the buyer from the services offered by the seller. Not
	 * applicable to Half.com.
	 */
	public $shippingserviceselected;
	/**
	 * @var string | Display message from buyer. This field holds transient data that is only being returned
	 * in the notification flow. This field is only returned in the Checkout related notifications. Not
	 * applicable to Half.com.
	 */
	public $buyermessage;
	/**
	 * @var AmountType | This field holds the Dutch Auction Offer Bid by the buyer in this transaction, if this
	 * is a Dutch Auction Item. This field will only be returned if caller has set IncludeDuctionAuctionBid
	 * to true. Not applicable to Half.com.
	 */
	public $dutchauctionbid;
	/**
	 * @var PaidStatusCodeType | Specifies the transaction's paid status, as seen by the buyer. Returned in lists of won
	 * and sold items. Not applicable to Half.com.
	 */
	public $buyerpaidstatus;
	/**
	 * @var PaidStatusCodeType | Specifies the transaction's payment status, as seen by the seller. Returned in lists of
	 * won and sold items. Not applicable to Half.com.
	 */
	public $sellerpaidstatus;
	/**
	 * @var dateTime | Indicates the time when the transaction was marked paid, if known. The value is set by
	 * eBay when payment is made via PayPal or a third-party checkout flow. This value is also
	 * set when the seller marks the item as paid by using ReviseCheckoutStatus or CompleteSale. The
	 * seller can also mark the item as paid by using My eBay or Selling Manager Pro. Note that
	 * this value is only visible if the request user is the buyer or seller associated with the
	 * transaction. If the item is marked as paid but the seller is not a Selling Manager Pro
	 * user, PaidTime returns the transaction creation time instead. Not applicable to Half.com.
	 */
	public $paidtime;
	/**
	 * @var dateTime | Indicates the time when the item(s) associated with the transaction were marked as shipped,
	 * if known. The value is set when the seller uses shipment tracking features offered by eBay
	 * or an eBay partner. This value is also set when the seller marks the item as shipped by
	 * using CompleteSale. If the seller is a Selling Manager Pro user, they can also mark the
	 * item as shipped by using My eBay. Note that this value is only visible if the request user
	 * is the buyer or seller associated with the transaction. Applicable to Half.com (for GetOrders).
	 */
	public $shippedtime;
	/**
	 * @var AmountType | Not applicable to Half.com.
	 */
	public $totalprice;
	/**
	 * @var FeedbackInfoType | Not applicable to Half.com.
	 */
	public $feedbackleft;
	/**
	 * @var FeedbackInfoType | Not applicable to Half.com.
	 */
	public $feedbackreceived;
	/**
	 * @var OrderType | The order to which the transaction belongs. This is only returned if IncludeContainingOrder
	 * is true and and if this transaction is part of an active or completed order. Not applicable
	 * to Half.com.
	 */
	public $containingorder;
	/**
	 * @var AmountType | You are charged a Final Value Fee if your item is sold, ends with a winning bid, or is
	 * purchased. This fee applies whether or not you actually complete the sale with the buyer.
	 * If you request a Final Value Fee Credit, the value of Transaction.FinalValueFee will not
	 * change for the item if a credit is issued. (The credit only appears in the seller's account
	 * data.) See the eBay.com Web site online help for more information about the Final Value
	 * Fee. The Final Value Fee for FixedPriceItem, StoresFixedPrice, and Buy It Now Dutch listing types
	 * is returned by GetSellerTransactions and GetItemTransactions on a transaction by transaction
	 * basis. For all other listing types, including Chinese and Dutch (no Buy It Now purchases),
	 * the Final Value Fee is returned when the listing status is Completed. If the item was a
	 * Dutch auction that ended with bids (not Buy It Now purchases), the Final Value Fee is returned
	 * in Item.SellingStatus.FinalValueFee. For all other listing types, including Dutch auctions
	 * that end with Buy It Now purchases, the Final Value Fee is returned in Transaction.FinalValueFee.
	 * Not applicable to Half.com.
	 */
	public $finalvaluefee;
	/**
	 * @var TransactionPlatformType | Indicates the platform the item was purchased on (such as eBay or eBay Express). Not applicable
	 * to Half.com.
	 */
	public $transactionplatform;
	/**
	 * @var ListingCheckoutRedirectPreferenceType | ProStores listing level preferences regarding the store to which checkout should be redirected
	 * for the listing if ThirdPartyCheckout is true.
	 */
	public $listingcheckoutredirectpreference;
	/**
	 * @var RefundArrayType | Contains an array of refunds. Applicable to Half.com (for GetOrders).
	 */
	public $refundarray;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAmountPaid($val)
	{
        $this->amountpaid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setAdjustmentAmount($val)
	{
        $this->adjustmentamount = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedAdjustmentAmount($val)
	{
        $this->convertedadjustmentamount = (int)$val;
	}

	/**
	 * @param UserType $val
	 * @throws Exception
	 */
	public function setBuyer($val)
	{
        $this->buyer = (int)$val;
	}

	/**
	 * @param ShippingDetailsType $val
	 * @throws Exception
	 */
	public function setShippingDetails($val)
	{
        $this->shippingdetails = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedAmountPaid($val)
	{
        $this->convertedamountpaid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setConvertedTransactionPrice($val)
	{
        $this->convertedtransactionprice = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setCreatedDate($val)
	{
        $this->createddate = (int)$val;
	}

	/**
	 * @param DepositTypeCodeType $val
	 * @throws Exception
	 */
	public function setDepositType($val)
	{
        $this->deposittype = (int)$val;
	}

	/**
	 * @param ItemType $val
	 * @throws Exception
	 */
	public function setItem($val)
	{
        $this->item = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setQuantityPurchased($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->quantitypurchased = (int)$val;
	}

	/**
	 * @param TransactionStatusType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTransactionID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for TransactionID');
        }
        $this->transactionid = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTransactionPrice($val)
	{
        $this->transactionprice = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBestOfferSale($val)
	{
        $this->bestoffersale = (int)$val;
	}

	/**
	 * @param decimal $val
	 * @throws Exception
	 */
	public function setVATPercent($val)
	{
        $this->vatpercent = (int)$val;
	}

	/**
	 * @param ExternalTransactionType $val
	 * @throws Exception
	 */
	public function setExternalTransaction($val)
	{
        $this->externaltransaction = (int)$val;
	}

	/**
	 * @param SellingManagerProductDetailsType $val
	 * @throws Exception
	 */
	public function setSellingManagerProductDetails($val)
	{
        $this->sellingmanagerproductdetails = (int)$val;
	}

	/**
	 * @param ShippingServiceOptionsType $val
	 * @throws Exception
	 */
	public function setShippingServiceSelected($val)
	{
        $this->shippingserviceselected = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setBuyerMessage($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for BuyerMessage');
        }
        $this->buyermessage = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setDutchAuctionBid($val)
	{
        $this->dutchauctionbid = (int)$val;
	}

	/**
	 * @param PaidStatusCodeType $val
	 * @throws Exception
	 */
	public function setBuyerPaidStatus($val)
	{
        $this->buyerpaidstatus = (int)$val;
	}

	/**
	 * @param PaidStatusCodeType $val
	 * @throws Exception
	 */
	public function setSellerPaidStatus($val)
	{
        $this->sellerpaidstatus = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setPaidTime($val)
	{
        $this->paidtime = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setShippedTime($val)
	{
        $this->shippedtime = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setTotalPrice($val)
	{
        $this->totalprice = (int)$val;
	}

	/**
	 * @param FeedbackInfoType $val
	 * @throws Exception
	 */
	public function setFeedbackLeft($val)
	{
        $this->feedbackleft = (int)$val;
	}

	/**
	 * @param FeedbackInfoType $val
	 * @throws Exception
	 */
	public function setFeedbackReceived($val)
	{
        $this->feedbackreceived = (int)$val;
	}

	/**
	 * @param OrderType $val
	 * @throws Exception
	 */
	public function setContainingOrder($val)
	{
        $this->containingorder = (int)$val;
	}

	/**
	 * @param AmountType $val
	 * @throws Exception
	 */
	public function setFinalValueFee($val)
	{
        $this->finalvaluefee = (int)$val;
	}

	/**
	 * @param TransactionPlatformType $val
	 * @throws Exception
	 */
	public function setTransactionPlatform($val)
	{
        $this->transactionplatform = (int)$val;
	}

	/**
	 * @param ListingCheckoutRedirectPreferenceType $val
	 * @throws Exception
	 */
	public function setListingCheckoutRedirectPreference($val)
	{
        $this->listingcheckoutredirectpreference = (int)$val;
	}

	/**
	 * @param RefundArrayType $val
	 * @throws Exception
	 */
	public function setRefundArray($val)
	{
        $this->refundarray = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class UpSrateOptionCodeType
{
	const UPSDAILYRATES    = 'UPSDailyRates';
	const UPSONDEMANDRATES = 'UPSOnDemandRates';
	const CUSTOMCODE       = 'CustomCode';
}

/**
 * URLDetailsType
 * Details about a specific eBay URL.
 */
class UrLdetailsType
{
	/**
	 * @var URLTypeCodeType | A compressed, representative title for the eBay URL.
	 */
	public $urltype;
	/**
	 * @var anyURI | A commonly used eBay URL. Applications use some of these URLs (such as the View Item URL) to
	 * launch eBay Web site pages in a browser.<br><br> Logo URLs are required to be used in certain
	 * types of applications. See your API license agreement. Also see this page for logo usage
	 * rules:<br> http://developer.ebay.com/join/licenses/apilogousage
	 */
	public $url;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param URLTypeCodeType $val
	 * @throws Exception
	 */
	public function setURLType($val)
	{
        $this->urltype = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setURL($val)
	{
        $this->url = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class UrLtypeCodeType
{
	const VIEWITEMURL       = 'ViewItemURL';
	const VIEWUSERURL       = 'ViewUserURL';
	const MYEBAYURL         = 'MyeBayURL';
	const MYEBAYBIDDINGURL  = 'MyeBayBiddingURL';
	const MYEBAYNOTWONURL   = 'MyeBayNotWonURL';
	const MYEBAYWONURL      = 'MyeBayWonURL';
	const MYEBAYWATCHINGURL = 'MyeBayWatchingURL';
	const EBAYSTOREURL      = 'eBayStoreURL';
	const SMALLLOGOURL      = 'SmallLogoURL';
	const MEDIUMLOGOURL     = 'MediumLogoURL';
	const LARGELOGOURL      = 'LargeLogoURL';
	const CUSTOMCODE        = 'CustomCode';
}

/**
 * UserConsentRequiredDefinitionType
 * Defines the UserConsentRequired feature. If the field is present, the corresponding feature
 * applies to the category. The field is returned as an empty element (i.e., a boolean value
 * is not returned).
 */
class UserConsentRequiredDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * UserIDArrayType
 * Contains an array of eBay UserID entries.
 */
class UserIdArrayType
{
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class UserIdType
{}

/**
 * UserIdFilterType
 * One of the data filters used when searching for items using        GetSearchResults. Allows
 * filtering based on the eBay user IDs of        sellers. May be used to limit the list of
 * found items to just those        listed by one or more specified sellers. Or may be used
 * to limit the        list to those items NOT listed by specified excluded sellers.
 */
class UserIdFilterType
{
	/**
	 * @var UserIDType | Specifies a list of one or more eBay user IDs that represent sellers whose item
	 *     listings should NOT be returned in the search result set. That is, the sellers'
	 *         items are excluded from the search results.
	 */
	public $excludesellers;
	/**
	 * @var UserIDType | Specifies a list of one or more eBay user IDs that represent sellers whose item
	 *     listings are returned in the search result set (and only listings by the
	 *  specified sellers. That is, the sellers' items are included in the search            results.
	 */
	public $includesellers;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setExcludeSellers($val)
	{
        $this->excludesellers = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setIncludeSellers($val)
	{
        $this->includesellers = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class UserStatusCodeType
{
	const UNKNOWN                   = 'Unknown';
	const SUSPENDED                 = 'Suspended';
	const CONFIRMED                 = 'Confirmed';
	const UNCONFIRMED               = 'Unconfirmed';
	const GHOST                     = 'Ghost';
	const INMAINTENANCE             = 'InMaintenance';
	const DELETED                   = 'Deleted';
	const CREDITCARDVERIFY          = 'CreditCardVerify';
	const ACCOUNTONHOLD             = 'AccountOnHold';
	const MERGED                    = 'Merged';
	const REGISTRATIONCODEMAILOUT   = 'RegistrationCodeMailOut';
	const TERMPENDING               = 'TermPending';
	const UNCONFIRMEDHALFOPTIN      = 'UnconfirmedHalfOptIn';
	const CREDITCARDVERIFYHALFOPTIN = 'CreditCardVerifyHalfOptIn';
	const UNCONFIRMEDPASSPORT       = 'UnconfirmedPassport';
	const CREDITCARDVERIFYPASSPORT  = 'CreditCardVerifyPassport';
	const UNCONFIRMEDEXPRESS        = 'UnconfirmedExpress';
	const CUSTOMCODE                = 'CustomCode';
}

/**
 * UserType
 * Type to contain the data for one eBay user. Depending on the context, the user might be
 * the seller or the buyer in a transaction, or the bidder or winning bidder in a listing.
 * An object of this type is returned by a number of calls, including the GetUser call.
 */
class UserType
{
	/**
	 * @var boolean | If true, indicates that the user has set up an About Me page.
	 */
	public $aboutmepage;
	/**
	 * @var string | Unique identifier for the user that does not change when the eBay user name is changed.
	 * Use when an application needs to associate a new eBay user name with the corresponding
	 * eBay user. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous, this
	 * tag will be returned only for that bidder, and the seller of an item that the user is bidding
	 * on.
	 */
	public $eiastoken;
	/**
	 * @var string | REST token (if available) for the user who is making the request. Not returned when UserID
	 * is for a different user than the one identified in eBayAuthToken. Use the REST token to
	 * authenticate REST API calls. For more information about REST tokens and the REST API, see
	 * http://developer.ebay.com/rest/.
	 */
	public $resttoken;
	/**
	 * @var string | Email address for the user. You cannot retrieve an email address for any user with whom
	 * you do not have a transactional relationship, regardless of site. Email is only returned
	 * for applicable calls when you are retrieving your own user data OR when you and the other
	 * user are in a transactional relationship and the call is being executed within a certain
	 * amount of time after the transaction is created. Based on Trust and Safety policies, the
	 * time is unspecified and can vary by site. <br><br> Starting Jan 2007, when a bidder's user
	 * info is made anonymous, this tag will be returned only for that bidder, and the seller
	 * of an item that the user is bidding on.
	 */
	public $email;
	/**
	 * @var int | The aggregate feedback score for a user. A user's feedback score is the net positive feedback
	 * minus the net negative feedback left for the user. Feedback scores are a quantitative expression
	 * of the desirability of dealing with a user as a buyer or a seller in transactions. Each
	 * transaction can result in one feedback entry for a given user (the buyer can leave feedback
	 * for the seller, and the seller can leave feedback for the buyer.). That one feedback can
	 * be positive, negative, or neutral. The aggregated feedback counts for a particular user
	 * represent that user's overall feedback score (referred to as a "feedback rating" on the
	 * eBay site). If the user has chosen to make their feedback private and that user is not
	 * the user identified in the request's authentication token, FeedbackScore is not returned
	 * and FeedbackPrivate is returned with a value of true.<br> <br> To be eligible to list on
	 * Express, a seller's feedback score needs to be 100 or higher. See "eBay Express" in the
	 * eBay Web Services guide. In GetSearchResultsExpress, only returned when ItemDetails is
	 * set to Fine.<br> <br> In GetSearchResults and GetCategoryListings, feedback information
	 * is only returned if IncludeFeedback = true in the request. <br><br> Starting Jan 2007,
	 * when a bidder's user info is made anonymous, the real feedback score will be returned only
	 * for that bidder, and the seller of an item that the user is bidding on. For all other users,
	 * the value -99 is returned.
	 */
	public $feedbackscore;
	/**
	 * @var int | Total count of negative feedback entries from unique (distinct) users.
	 */
	public $uniquenegativefeedbackcount;
	/**
	 * @var int | Total count of positive feedback entries from unique (distinct) users. Contains the aggregate
	 * feedback score for a user. A member's feedback score is the net positive feedback minus
	 * the net negative feedback left for the member. Feedback scores are a quantitative expression
	 * of the desirability of dealing with that person as a Buyer or a Seller in auction transactions.
	 * Each auction transaction can result in one feedback entry for a given user (the buyer can leave
	 * feedback for the seller, and the seller can leave feedback for the buyer.). That one feedback
	 * can be positive, negative, or neutral. The aggregated feedback counts for a particular
	 * user represent that user's overall feedback score (referred to as a "feedback rating" on
	 * the eBay site). This rating is commonly expressed as the eBay Feedback score for the user.
	 */
	public $uniquepositivefeedbackcount;
	/**
	 * @var float | Percent of total feedback that is positive. For example, if the member has 50 feedbacks,
	 * where 49 are positive and 1 is neutral or negative, the positive feedback percent could
	 * be 98.0. The value uses a max precision of 4 and a scale of 1. If the user has feedback,
	 * this value can be returned regardless of whether the member has chosen to make their feedback
	 * private. Not returned if the user has no feedback. To be eligible to list on Express, a
	 * seller's feedback percent needs to be 98 or higher. See "eBay Express" in the eBay Web Services
	 * guide. In GetSearchResults and GetCategoryListings, feedback information is only returned
	 * if IncludeFeedback = true in the request.
	 */
	public $positivefeedbackpercent;
	/**
	 * @var boolean | Indicates whether the user has chosen to make their feedback score and feedback details
	 * private (hidden from other users). Note that the percentage of positive feedback can still
	 * be returned, even if other feedback details are private. To be eligible to list on Express,
	 * a seller's feedback needs to be public. See "eBay Express" in the eBay Web Services guide.
	 * In GetSearchResults and GetCategoryListings, feedback information is only returned if IncludeFeedback
	 * = true in the request. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will be returned only for that bidder, and the seller of an item that the user
	 * is bidding on.
	 */
	public $feedbackprivate;
	/**
	 * @var FeedbackRatingStarCodeType | Visual indicator of user's feedback score. See FeedbackRatingStarCodeType for specific
	 * values.
	 */
	public $feedbackratingstar;
	/**
	 * @var boolean | Indicates whether the user has been verified. For more information about the ID Verify
	 * program, see: http://pages.ebay.com/help/policies/identity-idverify.html
	 */
	public $idverified;
	/**
	 * @var boolean | If true, indicates that the user is in good standing with eBay.
	 */
	public $ebaygoodstanding;
	/**
	 * @var boolean | If true, identifies a new user who has been a registered eBay user for 30 days or less.
	 * Always false after the user has been registered for more than 30 days. Does not indicate
	 * an ID change (see UserIdChanged).
	 */
	public $newuser;
	/**
	 * @var AddressType | Registration address for a user.<br> <br> <b>GetUser:</b> eBay returns complete RegistrationAddress
	 * details (including Phone), as applicable to the registration site, when you retrieve your
	 * own user data. <br> <br> <b>GetItem:</b> RegistrationAddress for another user (except for
	 * Phone) is only returned if you have a transactional relationship with that user AND that
	 * user is registered on DE/AT/CH, regardless of your registration site and the site to which
	 * you send the request. For example, the seller can see the buyer's registration address
	 * if the buyer is registered on DE/AT/CH, or the buyer can see the seller's registration
	 * address if the seller is registered on DE/AT/CH. (The buyer and seller won't see their
	 * own registration addresses in GetItem.) <br> <br> To be eligible to list on Express US,
	 * a seller's registration address must be in the US or Canada. To list on Express Germany, a
	 * seller's registration address must be in Germany. See "eBay Express" in the eBay Web Services
	 * guide.
	 */
	public $registrationaddress;
	/**
	 * @var dateTime | Indicates the date the specified user originally registered with eBay. <br><br> Starting
	 * Jan 2007, when a bidder's user info is made anonymous, this tag will be returned only for
	 * that bidder, and the seller of an item that the user is bidding on.
	 */
	public $registrationdate;
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var UserStatusCodeType | Indicates the user's registration/user status. To be eligible to list on Express, a seller's
	 * status must be Confirmed. See "eBay Express" in the eBay Web Services guide.
	 */
	public $status;
	/**
	 * @var UserIDType | Unique eBay user ID for the user.<br> <br> In GetSearchResultsExpress, only returned when
	 * ItemDetails is set to Fine. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will contain the real ID value only for that bidder, and the seller of an item
	 * that the user is bidding on. For all other users, the real ID value will be replaced with
	 * the value "Bidder X" where X is a number indicating the order of that user's first bid.
	 * For example, if the user was the third bidder, UserID = Bidder 3. <br><br> Note that the
	 * anonymous bidder ID stays the same for a given auction, but is different for different
	 * auctions. For example, a bidder who is the third and then the seventh bidder in an auction
	 * will be listed for both bids as "Bidder 3". However, if that same bidder is the first bidder
	 * on a different auction, the bidder will be listed for that auction as "Bidder 1", not "Bidder
	 * 3".
	 */
	public $userid;
	/**
	 * @var boolean | If true, identifies a user whose ID has changed within the last 30 days. Does not indicate
	 * a new user (see NewUser). <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will be returned only for that bidder, and the seller of an item that the user
	 * is bidding on.
	 */
	public $useridchanged;
	/**
	 * @var dateTime | Date and time the user's data was last changed (in GMT). <br><br> Starting Jan 2007, when
	 * a bidder's user info is made anonymous, this tag will be returned only for that bidder, and
	 * the seller of an item that the user is bidding on.
	 */
	public $useridlastchanged;
	/**
	 * @var VATStatusCodeType | Indicates whether or not the user is subject to VAT. Users who have registered with eBay
	 * as VAT-exempt are not subject to VAT. See documentation on Value-Added Tax (VAT).
	 */
	public $vatstatus;
	/**
	 * @var BuyerType | Contains information about the user as a buyer, such as the shipping address. See BuyerType
	 * for its child elements. <br><br> Starting Jan 2007, when a bidder's user info is made anonymous,
	 * this tag will be returned only for that bidder, and the seller of an item that the user
	 * is bidding on.
	 */
	public $buyerinfo;
	/**
	 * @var SellerType | Contains information about the user as a seller, such as whether the seller is authorized
	 * to list Live Auctions items or opts to have items cross-promoted. See SellerType for its
	 * child elements.
	 */
	public $sellerinfo;
	/**
	 * @var CharityAffiliationsType | Contains information about the seller's charity affliations. Returned if the user is affiliated
	 * with one or more charities. Seller must be registered with the eBay Giving Works provider
	 * to be affiliated with a charity non-profit organization.
	 */
	public $charityaffiliations;
	/**
	 * @var CharitySellerType | Contains information about the registered charity seller. Registered charity sellers have
	 * registered and are in good standing with the eBay Giving Works provider and are eligible
	 * to list items with the eBay Giving Works program.
	 */
	public $charityseller;
	/**
	 * @var PayPalAccountLevelCodeType | The user's PayPal account level. Only returned for the user identified in eBayAuthToken.
	 * That is, you cannot see someone else's PayPal account level. Use this information to check
	 * whether a seller is eligible to specify Item.DigitalDeliveryDetails in listing requests.
	 * See the eBay Web site online help for current PayPal requirements for listing digital items.
	 */
	public $paypalaccountlevel;
	/**
	 * @var PayPalAccountTypeCodeType | The user's PayPal account type. Only returned for the user identified in eBayAuthToken.
	 * That is, you cannot see someone else's PayPal account type. Use this information to check
	 * whether a seller is likely to be eligible to specify Item.DigitalDeliveryDetails in listing
	 * requests. See the eBay Web site online help for current PayPal requirements for listing
	 * digital items. Please note that this information cannot necessarily be used to determine
	 * whether a seller is eligible to list items on eBay Express, because a seller can have more
	 * than one PayPal account (and any of these accounts can be used for a given listing).
	 */
	public $paypalaccounttype;
	/**
	 * @var PayPalAccountStatusCodeType | The user's PayPal account status. Only returned for the user identified in eBayAuthToken.
	 * That is, you cannot see someone else's PayPal account status. Use this information to check
	 * whether a seller is eligible to specify Item.DigitalDeliveryDetails in listing requests.
	 * See the eBay Web site online help for current PayPal requirements for listing digital items.
	 */
	public $paypalaccountstatus;
	/**
	 * @var EBaySubscriptionTypeCodeType | Specifies the subscription level for a user.
	 */
	public $usersubscription;
	/**
	 * @var boolean | If the user is a registered eBay China site user, this indicates whether the user has been
	 * verified. This value is based on the user's registration site, not the site that was specified
	 * in the request. If true, the China site user is verified. If false, the China site user
	 * is unverified. This field is returned only when the user is registered on the China site
	 * and is verified (value is true). <br><br> Not applicable to users who are not registered
	 * China site users.
	 */
	public $siteverified;
	/**
	 * @var string | Indicates the Skype name of the user. Available if the seller has a Skype account and has
	 * linked it (on the eBay site) with his or her eBay account.
	 */
	public $skypeid;
	/**
	 * @var boolean | Indicates whether a user has read-only access to the eBay Wiki (true) or whether the user
	 * is able contribute or edit articles on the eBay Wiki (false). By default, all registered
	 * eBay users have access to contribute and edit articles on the eBay Wiki. All content contributed
	 * to the eBay Wiki is subject to the Community Content Policy.
	 */
	public $ebaywikireadonly;
	/**
	 * @var int | TUV level is a number allocated to a user based on various characteristics such as buyer,
	 * seller, new buyer, new seller, high risk, or bid limit. Applies to eBay Motors Pro applications
	 * only.
	 */
	public $tuvlevel;
	/**
	 * @var string | The value added tax identifier (VATID) is applicable to the VAT-enabled sites. Applies
	 * to eBay Motors Pro applications only.
	 */
	public $vatid;
	/**
	 * @var boolean | Indicates if item is listed for sale by owner (FSBO) or listed by a dealer. Applies to
	 * eBay Motors Pro applications only.
	 */
	public $motorsdealer;
	/**
	 * @var SellerPaymentMethodCodeType | Indicates the method the seller selected to pay eBay with for the account. The payment
	 * methods vary from one eBay site to the next. Payment methods are enumerated in the SellerPaymentMethodCodeType
	 * code list.
	 */
	public $sellerpaymentmethod;
	/**
	 * @var BiddingSummaryType | Contains information about the user as a bidder on a certain item. Returned for GetAllBidders
	 * if IncludeBiddingSummary = true is included in the request.
	 */
	public $biddingsummary;
	/**
	 * @var boolean | Indicates whether or not the User container has been made anonymous. If true, some elements
	 * in the User container have either been removed, or had their values changed to remove identifying
	 * characteristics. If false, all expected elements are returned, and no values are changed. <br><br> Starting
	 * Jan 2007, when a bidder's user info is made anonymous, this tag will be returned as false
	 * only for that bidder, and the seller of an item that the user is bidding on. All other
	 * users will have this tag returned as true.
	 */
	public $useranonymized;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setAboutMePage($val)
	{
        $this->aboutmepage = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEIASToken($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for EIASToken');
        }
        $this->eiastoken = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setRESTToken($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for RESTToken');
        }
        $this->resttoken = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setEmail($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Email');
        }
        $this->email = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->feedbackscore = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUniqueNegativeFeedbackCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->uniquenegativefeedbackcount = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setUniquePositiveFeedbackCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->uniquepositivefeedbackcount = (int)$val;
	}

	/**
	 * @param float $val
	 * @throws Exception
	 */
	public function setPositiveFeedbackPercent($val)
	{
        $this->positivefeedbackpercent = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setFeedbackPrivate($val)
	{
        $this->feedbackprivate = (int)$val;
	}

	/**
	 * @param FeedbackRatingStarCodeType $val
	 * @throws Exception
	 */
	public function setFeedbackRatingStar($val)
	{
        $this->feedbackratingstar = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setIDVerified($val)
	{
        $this->idverified = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEBayGoodStanding($val)
	{
        $this->ebaygoodstanding = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setNewUser($val)
	{
        $this->newuser = (int)$val;
	}

	/**
	 * @param AddressType $val
	 * @throws Exception
	 */
	public function setRegistrationAddress($val)
	{
        $this->registrationaddress = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setRegistrationDate($val)
	{
        $this->registrationdate = (int)$val;
	}

	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param UserStatusCodeType $val
	 * @throws Exception
	 */
	public function setStatus($val)
	{
        $this->status = (int)$val;
	}

	/**
	 * @param UserIDType $val
	 * @throws Exception
	 */
	public function setUserID($val)
	{
        $this->userid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUserIDChanged($val)
	{
        $this->useridchanged = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setUserIDLastChanged($val)
	{
        $this->useridlastchanged = (int)$val;
	}

	/**
	 * @param VATStatusCodeType $val
	 * @throws Exception
	 */
	public function setVATStatus($val)
	{
        $this->vatstatus = (int)$val;
	}

	/**
	 * @param BuyerType $val
	 * @throws Exception
	 */
	public function setBuyerInfo($val)
	{
        $this->buyerinfo = (int)$val;
	}

	/**
	 * @param SellerType $val
	 * @throws Exception
	 */
	public function setSellerInfo($val)
	{
        $this->sellerinfo = (int)$val;
	}

	/**
	 * @param CharityAffiliationsType $val
	 * @throws Exception
	 */
	public function setCharityAffiliations($val)
	{
        $this->charityaffiliations = (int)$val;
	}

	/**
	 * @param CharitySellerType $val
	 * @throws Exception
	 */
	public function setCharitySeller($val)
	{
        $this->charityseller = (int)$val;
	}

	/**
	 * @param PayPalAccountLevelCodeType $val
	 * @throws Exception
	 */
	public function setPayPalAccountLevel($val)
	{
        $this->paypalaccountlevel = (int)$val;
	}

	/**
	 * @param PayPalAccountTypeCodeType $val
	 * @throws Exception
	 */
	public function setPayPalAccountType($val)
	{
        $this->paypalaccounttype = (int)$val;
	}

	/**
	 * @param PayPalAccountStatusCodeType $val
	 * @throws Exception
	 */
	public function setPayPalAccountStatus($val)
	{
        $this->paypalaccountstatus = (int)$val;
	}

	/**
	 * @param EBaySubscriptionTypeCodeType $val
	 * @throws Exception
	 */
	public function setUserSubscription($val)
	{
        $this->usersubscription = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setSiteVerified($val)
	{
        $this->siteverified = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSkypeID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SkypeID');
        }
        $this->skypeid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEBayWikiReadOnly($val)
	{
        $this->ebaywikireadonly = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setTUVLevel($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->tuvlevel = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setVATID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for VATID');
        }
        $this->vatid = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setMotorsDealer($val)
	{
        $this->motorsdealer = (int)$val;
	}

	/**
	 * @param SellerPaymentMethodCodeType $val
	 * @throws Exception
	 */
	public function setSellerPaymentMethod($val)
	{
        $this->sellerpaymentmethod = (int)$val;
	}

	/**
	 * @param BiddingSummaryType $val
	 * @throws Exception
	 */
	public function setBiddingSummary($val)
	{
        $this->biddingsummary = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setUserAnonymized($val)
	{
        $this->useranonymized = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * VATDetailsType
 * Container for eBay's Business User features. A business seller can choose to offer an item
 * exclusively to bidders and buyers that also represent businesses. Only applicable when the
 * item is listed in a B2B-enabled category. Currently, the eBay Germany (DE), Austria (AT),
 * and Switzerland (CH) sites support B2B business features.
 */
class VaTdetailsType
{
	/**
	 * @var boolean | If true, this indicates that the seller is a business user and intends to use listing features
	 * that are offered to business users only. Applicable only to business sellers residing in
	 * Germany, Austria, or Switzerland who are listing in a B2B VAT- enabled category on the
	 * eBay Germany (DE), Austria (AT), or Switzerland (CH) sites. The seller must have a valid VAT
	 * ID registered with eBay. This must be set to true if RestrictedToBusiness is true. It has
	 * no effect (and it's not returned) if RestrictedToBusiness is false. If an item was not
	 * qualified as a business item when originally listed, but meets the conditions for business
	 * items when the item is revised or relisted, the seller can convert the item to a business
	 * item by specifying the appropriate VAT details. See the eBay Web Services guide for more
	 * information and additional rules.
	 */
	public $businessseller;
	/**
	 * @var boolean | If true, this indicates that the seller elects to offer the item exclusively to business
	 * users. If false (or not returned), this indicates that the seller elects to offer the item
	 * to all users. Applicable only to business sellers residing in Germany, Austria, or Switzerland
	 * who are listing in a B2B VAT-enabled category on the eBay Germany (DE), Austria (AT), or
	 * Switzerland (CH) sites. If this argument is true, the seller must have a valid VAT-ID registered
	 * with eBay, and BusinessSeller must also be true.
	 */
	public $restrictedtobusiness;
	/**
	 * @var float | VAT rate for the item, if any. When the VATPercent is specified, the item's VAT information
	 * appears on the item's listing page. In addition, the seller can choose to print an invoice
	 * that includes the item's net price, VAT percent, VAT amount, and total price. Since VAT
	 * rates vary depending on the item and on the user's country of residence, a seller is responsible
	 * for entering the correct VAT rate; it is not calculated by eBay. To specify a VATPercent,
	 * a seller must have a VAT-ID registered with eBay and must be listing the item on a VAT-enabled
	 * site. Max applicable length is 6 characters, including the decimal (e.g., 12.345). The
	 * scale is 3 decimal places. (If you pass in 12.3456, eBay may round up the value to 12.346.) Note:
	 * The View Item page may display the precision to 2 decimal places with no trailing zeros.
	 * However, the full value you send in is stored.
	 */
	public $vatpercent;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setBusinessSeller($val)
	{
        $this->businessseller = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setRestrictedToBusiness($val)
	{
        $this->restrictedtobusiness = (int)$val;
	}

	/**
	 * @param float $val
	 * @throws Exception
	 */
	public function setVATPercent($val)
	{
        $this->vatpercent = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class VaTstatusCodeType
{
	const NOVATTAX   = 'NoVATTax';
	const VATTAX     = 'VATTax';
	const VATEXEMPT  = 'VATExempt';
	const CUSTOMCODE = 'CustomCode';
}

class ValType
{
	/**
	 * @var string | The descriptive name of an attribute or characteristic value (e.g., "New" might be a literal
	 * value for a Condition attribute). In item-listing requests, if you send ValueID with an
	 * id of -3 or -6, you must use ValueLiteral to enter the value the user specified. Otherwise,
	 * eBay treats the request as if no value was sent at all. For eBay.com listings, use AttributeSetArray.AttributeSet.Attribute.Value.ValueLiteral. The
	 * max length allowed varies per attribute.<br> <br> For GetSearchResults requests (in SearchRequest),
	 * only use ValueLiteral for attributes that support free-text values. That is, if eBay defines
	 * a value name and a unique value ID for an attribute in GetProductFinder, do not pass the
	 * name in ValueLiteral (because it won't work). Instead, specify the unique value ID in ValueID.<br> <br> For
	 * Half.com, use AttributeArray.Attribute.Value.ValueLiteral in listing requests. That is,
	 * the parent elements and usage for Half.com differs from eBay's standard Item Specifics
	 * format (and there is no relationship to GetAttributesCS). For Half.com, AttributeArray.Attribute.Value.ValueLiteral
	 * is required when you use AddItem. See the eBay Web Services Guide for valid values. For
	 * the Half.com Notes attribute, the max length is 500 characters. You can revise AttributeArray.Attribute.Value.ValueLiteral
	 * for Half.com listings.
	 */
	public $valueliteral;
	/**
	 * @var string | (out) Reserved for future use. Suggested alternative text for ValueLiteral. Multiple SuggestedValueLiteral
	 * elements can be returned in a Value node. Not applicable to Half.com.
	 */
	public $suggestedvalueliteral;
	/**
	 * @var int | Constant value that identifies the attribute or characteristic in a language-independent
	 * way. Unique within the characteristic set.<br> <br> In item-listing requests, if the ID
	 * is defined as -3 or -6 (Other) in GetAttributesCS or GetProductSellingPages, use ValueLiteral
	 * to specify the string value that the user entered. Otherwise, use ValueID to specify the
	 * ID that is pre-defined in GetAttributesCS or GetProductSellingPages. In item-listing requests
	 * and product searches, the possible ID values are:<br> -3 = User entered an arbitrary value
	 * (not an "Other" field)<br> -6 = User entered a value in an "Other" field<br> -100 = Value
	 * not specified (null)<br> #### (integer) = Identifier for a pre-defined value that the user
	 * selected (e.g., -14 or 1001)<br> For eBay.com, required if ValueList is specified. Not
	 * applicable to Half.com.
	 */
	public $valueid;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setValueLiteral($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ValueLiteral');
        }
        $this->valueliteral = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setSuggestedValueLiteral($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for SuggestedValueLiteral');
        }
        $this->suggestedvalueliteral = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setValueID($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->valueid = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * ValuePackEnabledDefinitionType
 * Defines the ValuePack feature (a feature pack). If the field is present, the corresponding
 * feature applies to the category. The field is returned as an empty element (i.e., a boolean
 * value is not returned).
 */
class ValuePackEnabledDefinitionType
{
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

class VeRoItemStatusCodeType
{
	const RECEIVED              = 'Received';
	const SUBMITTED             = 'Submitted';
	const REMOVED               = 'Removed';
	const SUBMISSIONFAILED      = 'SubmissionFailed';
	const CLARIFICATIONREQUIRED = 'ClarificationRequired';
	const CUSTOMCODE            = 'CustomCode';
}

/**
 * VeROReasonCodeDetailsType
 * Container for reason code details for all sites.
 */
class VeRoReasonCodeDetailsType
{
	/**
	 * @var VeROSiteDetailType | Contains reason code details for a site.
	 */
	public $verositedetail;
	/**
	 * @param VeROSiteDetailType $val
	 * @throws Exception
	 */
	public function setVeROSiteDetail($val)
	{
        $this->verositedetail = (int)$val;
	}
}

/**
 * VeROReportItemType
 * Contains the item information to report.
 */
class VeRoReportItemType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var long | The resaon code identifier for the type of claimed infringement. Use GetVeROReasonCodeDetails
	 * to retrieve a list of reason codes for a given site or all sites.
	 */
	public $veroreasoncodeid;
	/**
	 * @var string | Message from the VeRO Program member to the seller of the item being reported.
	 */
	public $messagetoseller;
	/**
	 * @var boolean | When set to true, this specifies that the VeRO Program member be copied on the Notice of
	 * Claimed Infringement (NOCI) email sent to sellers of reported items.
	 */
	public $copyemailtorightsowner;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param long $val
	 * @throws Exception
	 */
	public function setVeROReasonCodeID($val)
	{
        $this->veroreasoncodeid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setMessageToSeller($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for MessageToSeller');
        }
        $this->messagetoseller = (int)$val;
	}

	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setCopyEmailToRightsOwner($val)
	{
        $this->copyemailtorightsowner = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * VeROReportItemsType
 * Container for a list of items. Can contain zero, one, or multiple ReportedItemsType  objects,
 * each of which conveys the data for one item listing.
 */
class VeRoReportItemsType
{
	/**
	 * @var VeROReportItemType | Contains the data and status of a reported item.
	 */
	public $reportitem;
	/**
	 * @param VeROReportItemType $val
	 * @throws Exception
	 */
	public function setReportItem($val)
	{
        $this->reportitem = (int)$val;
	}
}

class VeRoReportPacketStatusCodeType
{
	const RECEIVED   = 'Received';
	const INPROCESS  = 'InProcess';
	const PROCESSED  = 'Processed';
	const CUSTOMCODE = 'CustomCode';
}

/**
 * VeROReportedItemDetailsType
 * Container for a list of reported items. Can contain zero, one, or multiple VeROReportedItemType
 * objects, each of which conveys the data for one item listing.
 */
class VeRoReportedItemDetailsType
{
	/**
	 * @var VeROReportedItemType | Contains the data and status of a reported item.
	 */
	public $reporteditem;
	/**
	 * @param VeROReportedItemType $val
	 * @throws Exception
	 */
	public function setReportedItem($val)
	{
        $this->reporteditem = (int)$val;
	}
}

/**
 * VeROReportedItemType
 * A container for item and VeROReportedItem's.
 */
class VeRoReportedItemType
{
	/**
	 * @var ItemIDType | The item ID of the item reported for infringment.
	 */
	public $itemid;
	/**
	 * @var VeROItemStatusCodeType | The VeRO reporting status for a given item.
	 */
	public $itemstatus;
	/**
	 * @var string | The explanation entered by eBay when an item reported for infringement is given a status
	 * of SubmissionFailed or ClarificationRequired.
	 */
	public $itemreasonforfailure;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setItemID($val)
	{
        $this->itemid = (int)$val;
	}

	/**
	 * @param VeROItemStatusCodeType $val
	 * @throws Exception
	 */
	public function setItemStatus($val)
	{
        $this->itemstatus = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setItemReasonForFailure($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for ItemReasonForFailure');
        }
        $this->itemreasonforfailure = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * VeROSiteDetailType
 * Container for reason code details for a given site.
 */
class VeRoSiteDetailType
{
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var ReasonCodeDetailType | Contains details for a given reason code.
	 */
	public $reasoncodedetail;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param ReasonCodeDetailType $val
	 * @throws Exception
	 */
	public function setReasonCodeDetail($val)
	{
        $this->reasoncodedetail = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * VendorHostedPictureType
 * Data for images hosted on a location of the seller's choice (other than eBay). Specify 1
 * PictureURL value and up to 5 SelfHostedURL values. With compatibility level 439 and higher,
 * deprecated in the response in favor of Item.PictureDetails. With the future deprecation
 * of VendorHostedPicture as input, Applications should use Item.PictureDetails instead. <br><br> Note
 * that the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
 * with that feature.
 */
class VendorHostedPictureType
{
	/**
	 * @var anyURI | Deprecated with compatibility level 383 and higher. Contains the URL for an image hosted
	 * on a location of the seller's choice (other than eBay) and associated with an item. If
	 * specified, this cannot have an empty/null value. You cannot specify multiple PictureURL
	 * fields. In most cases, the picture URL is also used for the picture at the top of the View
	 * Item page on the Web site.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL argument.<br> With compatibility 383 and higher,
	 * see SelfHostedURL instead.<br> With the future deprecation of VendorHostedPicture as input, applications
	 * should use Item.PictureDetails.PictureURL instead. See Item.PictureDetails.PictureURL for
	 * information about how to remove pictures from a listing.<br> For retrieval calls (e.g.,
	 * GetItem):<br> With compatibility levels lower than 383, PictureURL is returned.<br> With
	 * compatibility levels between 383 and 439, SelfHostedURL is returned instead.<br> With compatibility
	 * 439 and higher,  Item.PictureDetails.PictureURL is returned instead. <br><br> Note that
	 * the Gallery Plus image enhancement does not support VendorHostedPicture. Use Item.PictureDetails
	 * with that feature.
	 */
	public $pictureurl;
	/**
	 * @var anyURI | URL for multiple, self-hosted pictures (if any) that are stored/hosted at a non-eBay site
	 * and used for the item. If specified, do not pass an empty/null value. On the main eBay
	 * site, if you specify multiple SelfHostedURL fields in listing calls, PhotoDisplay must
	 * be set to VendorHostedPictureShow.<br> For listing calls (e.g., AddItem):<br> With compatibility
	 * levels lower than 383, specify 1 PictureURL field.<br> With compatibility 383 and higher,
	 * specify up to 6 SelfHostedURL fields.<br> For eBay Live Auctions, specify up to 5 SelfHostedURL
	 * fields. With the future deprecation of VendorHostedPicture as input, Applications should
	 * use Item.PictureDetails.PictureURL instead.<br> For retrieval calls (e.g., GetItem):<br> With
	 * compatibility levels lower than 383, PictureURL is returned.<br> With compatibility levels
	 * between 383 and 439, SelfHostedURL is returned.<br> With compatibility 439 and higher,
	 *  Item.PictureDetails.PictureURL is returned.
	 */
	public $selfhostedurl;
	/**
	 * @var PhotoDisplayCodeType | Specifies the type of image display used in a listing. Some options are only available
	 * if images are hosted through eBay Picture Services (EPS). eBay determines this by parsing
	 * the associated PictureURL. Cannot be used in combination with Listing Designer layouts. Specify
	 * None or do not add PhotoDisplay when ListingDesigner.LayoutID is a value other than 0.
	 */
	public $photodisplay;
	/**
	 * @var anyURI | URL for a picture to be used as the Gallery thumbnail. Ignored if GalleryType is None or
	 * unspecified. If the value of GalleryType is Gallery or Featured, you can either specify
	 * GalleryURL or allow eBay to use another picture that you have included in the listing.
	 * (See GalleryType for the rules that determine which URL is used if you do not specify GalleryURL.)
	 * The image used for the Gallery thumbnail must be in one of the graphics formats JPEG, BMP,
	 * TIF, or GIF. eBay Live Auctions lots are listed in the gallery for free. With the future
	 * deprecation of VendorHostedPicture as input, Applications should use Item.PictureDetails.GalleryURL
	 * instead. If the item has bids (or items have been sold) or the listing ends within 12 hours, you
	 * can add GalleryURL or change its value, but you cannot remove the gallery picture if it
	 * was previously specified. Not applicable to eBay Motors listings. See "Describing Items
	 * in a Listing" in the If the value of GalleryType is Gallery or Plus or Featured, see eBay
	 * Web Services Guide for additional validation rules. <br><br> Note that the Gallery Plus
	 * image enhancement does not support VendorHostedPicture. Use Item.PictureDetails with that
	 * feature.
	 */
	public $galleryurl;
	/**
	 * @var GalleryTypeCodeType | Indicates whether a picture for the item is included in the Gallery and, if so whether
	 * the item is also featured or Plus in the Gallery. If the value is Gallery or Plus or Featured,
	 * eBay checks the available image URLs in the following order to determine which URL to use (if
	 * more than one of these URLs is available):<br><br>            a) Use the URL in GalleryURL,
	 * if it is specified.<br>            b) Otherwise, if ProductListingDetails.UseStockPhotoURLAsGallery
	 * is true, use the eBay stock photo.<br>            c) Otherwise, use the value of the first
	 * SelfHostedURL in the array of SelfHostedURL fields, if any.<br>            d) Otherwise,
	 * if ProductListingDetails.ProductID is specified, use the eBay stock photo
	 *  (eBay resets UseStockPhotoURLAsGallery to true in this case).<br>            e) If eBay
	 * is unable to find an image URL for the listing, an error is returned.<br><br>
	 *   See "Describing Items in a Listing" in the eBay Web Services Guide for additional information
	 *            about working with pictures and related validation rules.            You cannot
	 * remove Gallery or Plus or Featured when you revise a listing.
	 */
	public $gallerytype;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setPictureURL($val)
	{
        $this->pictureurl = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setSelfHostedURL($val)
	{
        $this->selfhostedurl = (int)$val;
	}

	/**
	 * @param PhotoDisplayCodeType $val
	 * @throws Exception
	 */
	public function setPhotoDisplay($val)
	{
        $this->photodisplay = (int)$val;
	}

	/**
	 * @param anyURI $val
	 * @throws Exception
	 */
	public function setGalleryURL($val)
	{
        $this->galleryurl = (int)$val;
	}

	/**
	 * @param GalleryTypeCodeType $val
	 * @throws Exception
	 */
	public function setGalleryType($val)
	{
        $this->gallerytype = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * VerifiedUserRequirementsType
 * Container for verified user requirements.
 */
class VerifiedUserRequirementsType
{
	/**
	 * @var boolean | If true, blocks bidding by users who do not pass a simple check (for example, for credit
	 * card on file). See "Buyer Requirements - VerifiedUser" in the chapter "Field Differences
	 * for eBay Sites."
	 */
	public $verifieduser;
	/**
	 * @var int | This field is ignored unless VerifiedUser is true. If this field is present, the user's
	 * feedback score is also considered: a user is blocked from bidding if the user's feedback
	 * score is less than or equal to the value of this field.
	 */
	public $minimumfeedbackscore;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setVerifiedUser($val)
	{
        $this->verifieduser = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setMinimumFeedbackScore($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->minimumfeedbackscore = (int)$val;
	}
}

/**
 * WantItNowPostArrayType
 * Container for a list of search result items. Can contain zero, one, or multiple WantItNowPostType
 * objects, each of which contains data for a single Want It Now post found by the search.
 */
class WantItNowPostArrayType
{
	/**
	 * @var WantItNowPostType | Contains data for a Want It Now post found by a search.
	 */
	public $wantitnowpost;
	/**
	 * @param WantItNowPostType $val
	 * @throws Exception
	 */
	public function setWantItNowPost($val)
	{
        $this->wantitnowpost = (int)$val;
	}
}

/**
 * WantItNowPostType
 * Contains the data describing a single Want It Now post. Buyers create Want It Now posts
 * to communicate to sellers specific requirements for items they would like to buy.
 */
class WantItNowPostType
{
	/**
	 * @var string | ID of the category in which the Want It Now post is listed.
	 */
	public $categoryid;
	/**
	 * @var string | Description of a Want It Now post. Description will not be returned for GetWantItNowSearchResults.
	 */
	public $description;
	/**
	 * @var ItemIDType | ID that uniquely identifies a Want It Now post.
	 */
	public $postid;
	/**
	 * @var SiteCodeType | Site where the Want It Now post is listed.
	 */
	public $site;
	/**
	 * @var dateTime | Date and time (in GMT) that a Want It Now post was added.
	 */
	public $starttime;
	/**
	 * @var int | Number of responses for a Want It Now post. Sellers respond to a Want It Now post by submitting
	 * an item number, so each response corresponds to an item listing.
	 */
	public $responsecount;
	/**
	 * @var string | Title of a Want It Now post.
	 */
	public $title;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setCategoryID($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for CategoryID');
        }
        $this->categoryid = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setDescription($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Description');
        }
        $this->description = (int)$val;
	}

	/**
	 * @param ItemIDType $val
	 * @throws Exception
	 */
	public function setPostID($val)
	{
        $this->postid = (int)$val;
	}

	/**
	 * @param SiteCodeType $val
	 * @throws Exception
	 */
	public function setSite($val)
	{
        $this->site = (int)$val;
	}

	/**
	 * @param dateTime $val
	 * @throws Exception
	 */
	public function setStartTime($val)
	{
        $this->starttime = (int)$val;
	}

	/**
	 * @param int $val
	 * @throws Exception
	 */
	public function setResponseCount($val)
	{
        if (!is_int($val)) {
            throw new Exception('POJO Proxy need a integer');
        }
        $this->responsecount = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setTitle($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for Title');
        }
        $this->title = (int)$val;
	}
}

class WirelessCarrierIdCodeType
{
	const CINGULAR       = 'Cingular';
	const TMOBILE        = 'TMobile';
	const SPRINT         = 'Sprint';
	const NEXTEL         = 'Nextel';
	const VERIZON        = 'Verizon';
	const CINCINNATIBELL = 'CincinnatiBell';
	const DOBSON         = 'Dobson';
	const ALLTEL         = 'Alltel';
	const LEAP           = 'Leap';
	const USCELLULAR     = 'USCellular';
	const MOVISTAR       = 'Movistar';
	const AMENA          = 'Amena';
	const VODAFONE       = 'Vodafone';
	const ATT            = 'ATT';
	const CUSTOMCODE     = 'CustomCode';
}

/**
 * XSLFileType
 * Describes an XSL file that would be returned from an Item Specifics or Pre-filled Item Information
 * meta-data call (such as GetAttributesXSL or GetProductFinderXSL).
 */
class XsLfileType
{
	/**
	 * @var string | The name of the XSL file. Store this information to use it as input to the call in the
	 * future.
	 */
	public $filename;
	/**
	 * @var string | The version number of the XSL file. Store this information to use it            as input
	 * to the call in the future.
	 */
	public $fileversion;
	/**
	 * @var string | Contains a MIME base-64-encoded representation of the XSL file. See the eBay Web Services
	 * Guide for information on decoding the XSL stylesheet file. If no XSL file is available
	 * (or if you passed no detail level), this property is empty or not returned.
	 */
	public $filecontent;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileName($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileName');
        }
        $this->filename = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileVersion($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileVersion');
        }
        $this->fileversion = (int)$val;
	}

	/**
	 * @param string $val
	 * @throws Exception
	 */
	public function setFileContent($val)
	{
        if (!is_string($val)) {
            throw new Exception('POJO Proxy need a string for FileContent');
        }
        $this->filecontent = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * eBxOptInPreferenceType
 * Contains a seller's preferences for listing items on Ebay Express.
 */
class eBxOptInPreferenceType
{
	/**
	 * @var boolean | If true: The seller wants their eligible eBay listings to be included on eBay Express (in
	 * addition to the main eBay site). If false: The seller does not want their listings to be
	 * included on eBay Express. If omitted (in SetUserPreferences): The seller does not want
	 * to change their existing preference. (Initially, eBay sets this preference to true for every
	 * seller.)
	 */
	public $ebxoptinpreference;
	/**
	 * @var <anyXML>
	 */
	public $any;
	/**
	 * @param boolean $val
	 * @throws Exception
	 */
	public function setEBxOptInPreference($val)
	{
        $this->ebxoptinpreference = (int)$val;
	}

	/**
	 * @param <anyXML> $val
	 * @throws Exception
	 */
	public function setAny($val)
	{
        $this->any = (int)$val;
	}
}

/**
 * eBayAPIInterfaceServiceClient
 * Version 491
 */
class eBayAPIInterfaceServiceClient extends SoapClient {

	const WSDL_FILE = "eBayTest.wsdl";
	private $classmap = array(
        'AddDisputeRequestType\,' =>
            'AddDisputeRequestType',
        'AddDisputeResponseType\,' =>
            'AddDisputeResponseType',
        'AddDisputeResponseRequestType\,' =>
            'AddDisputeResponseRequestType',
        'AddDisputeResponseResponseType\,' =>
            'AddDisputeResponseResponseType',
        'AddItemRequestType\,' =>
            'AddItemRequestType',
        'AddItemResponseType\,' =>
            'AddItemResponseType',
        'AddLiveAuctionItemRequestType\,' =>
            'AddLiveAuctionItemRequestType',
        'AddLiveAuctionItemResponseType\,' =>
            'AddLiveAuctionItemResponseType',
        'AddMemberMessageAAQToPartnerRequestType\,' =>
            'AddMemberMessageAAQToPartnerRequestType',
        'AddMemberMessageAAQToPartnerResponseType\,' =>
            'AddMemberMessageAAQToPartnerResponseType',
        'AddMemberMessageRTQRequestType\,' =>
            'AddMemberMessageRTQRequestType',
        'AddMemberMessageRTQResponseType\,' =>
            'AddMemberMessageRTQResponseType',
        'AddMemberMessagesAAQToBidderRequestType\,' =>
            'AddMemberMessagesAAQToBidderRequestType',
        'AddMemberMessagesAAQToBidderResponseType\,' =>
            'AddMemberMessagesAAQToBidderResponseType',
        'AddOrderRequestType\,' =>
            'AddOrderRequestType',
        'AddOrderResponseType\,' =>
            'AddOrderResponseType',
        'AddSecondChanceItemRequestType\,' =>
            'AddSecondChanceItemRequestType',
        'AddSecondChanceItemResponseType\,' =>
            'AddSecondChanceItemResponseType',
        'AddToItemDescriptionRequestType\,' =>
            'AddToItemDescriptionRequestType',
        'AddToItemDescriptionResponseType\,' =>
            'AddToItemDescriptionResponseType',
        'AddToWatchListRequestType\,' =>
            'AddToWatchListRequestType',
        'AddToWatchListResponseType\,' =>
            'AddToWatchListResponseType',
        'AddTransactionConfirmationItemRequestType\,' =>
            'AddTransactionConfirmationItemRequestType',
        'AddTransactionConfirmationItemResponseType\,' =>
            'AddTransactionConfirmationItemResponseType',
        'ApproveLiveAuctionBiddersRequestType\,' =>
            'ApproveLiveAuctionBiddersRequestType',
        'ApproveLiveAuctionBiddersResponseType\,' =>
            'ApproveLiveAuctionBiddersResponseType',
        'CompleteSaleRequestType\,' =>
            'CompleteSaleRequestType',
        'CompleteSaleResponseType\,' =>
            'CompleteSaleResponseType',
        'DeleteMyMessagesRequestType\,' =>
            'DeleteMyMessagesRequestType',
        'DeleteMyMessagesResponseType\,' =>
            'DeleteMyMessagesResponseType',
        'EndItemRequestType\,' =>
            'EndItemRequestType',
        'EndItemResponseType\,' =>
            'EndItemResponseType',
        'FetchTokenRequestType\,' =>
            'FetchTokenRequestType',
        'FetchTokenResponseType\,' =>
            'FetchTokenResponseType',
        'GetAccountRequestType\,' =>
            'GetAccountRequestType',
        'GetAccountResponseType\,' =>
            'GetAccountResponseType',
        'GetAdFormatLeadsRequestType\,' =>
            'GetAdFormatLeadsRequestType',
        'GetAdFormatLeadsResponseType\,' =>
            'GetAdFormatLeadsResponseType',
        'GetAllBiddersRequestType\,' =>
            'GetAllBiddersRequestType',
        'GetAllBiddersResponseType\,' =>
            'GetAllBiddersResponseType',
        'GetApiAccessRulesRequestType\,' =>
            'GetApiAccessRulesRequestType',
        'GetApiAccessRulesResponseType\,' =>
            'GetApiAccessRulesResponseType',
        'GetAttributesCSRequestType\,' =>
            'GetAttributesCSRequestType',
        'GetAttributesCSResponseType\,' =>
            'GetAttributesCSResponseType',
        'GetAttributesXSLRequestType\,' =>
            'GetAttributesXSLRequestType',
        'GetAttributesXSLResponseType\,' =>
            'GetAttributesXSLResponseType',
        'GetBestOffersRequestType\,' =>
            'GetBestOffersRequestType',
        'GetBestOffersResponseType\,' =>
            'GetBestOffersResponseType',
        'GetBidderListRequestType\,' =>
            'GetBidderListRequestType',
        'GetBidderListResponseType\,' =>
            'GetBidderListResponseType',
        'GetCategoriesRequestType\,' =>
            'GetCategoriesRequestType',
        'GetCategoriesResponseType\,' =>
            'GetCategoriesResponseType',
        'GetCategory2CSRequestType\,' =>
            'GetCategory2CSRequestType',
        'GetCategory2CSResponseType\,' =>
            'GetCategory2CSResponseType',
        'GetCategory2FinanceOfferRequestType\,' =>
            'GetCategory2FinanceOfferRequestType',
        'GetCategory2FinanceOfferResponseType\,' =>
            'GetCategory2FinanceOfferResponseType',
        'GetCategoryFeaturesRequestType\,' =>
            'GetCategoryFeaturesRequestType',
        'GetCategoryFeaturesResponseType\,' =>
            'GetCategoryFeaturesResponseType',
        'GetCategoryListingsRequestType\,' =>
            'GetCategoryListingsRequestType',
        'GetCategoryListingsResponseType\,' =>
            'GetCategoryListingsResponseType',
        'GetCategoryMappingsRequestType\,' =>
            'GetCategoryMappingsRequestType',
        'GetCategoryMappingsResponseType\,' =>
            'GetCategoryMappingsResponseType',
        'GetChallengeTokenRequestType\,' =>
            'GetChallengeTokenRequestType',
        'GetChallengeTokenResponseType\,' =>
            'GetChallengeTokenResponseType',
        'GetCharitiesRequestType\,' =>
            'GetCharitiesRequestType',
        'GetCharitiesResponseType\,' =>
            'GetCharitiesResponseType',
        'GetContextualKeywordsRequestType\,' =>
            'GetContextualKeywordsRequestType',
        'GetContextualKeywordsResponseType\,' =>
            'GetContextualKeywordsResponseType',
        'GetCrossPromotionsRequestType\,' =>
            'GetCrossPromotionsRequestType',
        'GetCrossPromotionsResponseType\,' =>
            'GetCrossPromotionsResponseType',
        'GetDescriptionTemplatesRequestType\,' =>
            'GetDescriptionTemplatesRequestType',
        'GetDescriptionTemplatesResponseType\,' =>
            'GetDescriptionTemplatesResponseType',
        'GetDisputeRequestType\,' =>
            'GetDisputeRequestType',
        'GetDisputeResponseType\,' =>
            'GetDisputeResponseType',
        'GetFeedbackRequestType\,' =>
            'GetFeedbackRequestType',
        'GetFeedbackResponseType\,' =>
            'GetFeedbackResponseType',
        'GetFinanceOffersRequestType\,' =>
            'GetFinanceOffersRequestType',
        'GetFinanceOffersResponseType\,' =>
            'GetFinanceOffersResponseType',
        'GetHighBiddersRequestType\,' =>
            'GetHighBiddersRequestType',
        'GetHighBiddersResponseType\,' =>
            'GetHighBiddersResponseType',
        'GetItemRequestType\,' =>
            'GetItemRequestType',
        'GetItemResponseType\,' =>
            'GetItemResponseType',
        'GetItemRecommendationsRequestType\,' =>
            'GetItemRecommendationsRequestType',
        'GetItemRecommendationsResponseType\,' =>
            'GetItemRecommendationsResponseType',
        'GetItemShippingRequestType\,' =>
            'GetItemShippingRequestType',
        'GetItemShippingResponseType\,' =>
            'GetItemShippingResponseType',
        'GetItemTransactionsRequestType\,' =>
            'GetItemTransactionsRequestType',
        'GetItemTransactionsResponseType\,' =>
            'GetItemTransactionsResponseType',
        'GetItemsAwaitingFeedbackRequestType\,' =>
            'GetItemsAwaitingFeedbackRequestType',
        'GetItemsAwaitingFeedbackResponseType\,' =>
            'GetItemsAwaitingFeedbackResponseType',
        'GetLiveAuctionBiddersRequestType\,' =>
            'GetLiveAuctionBiddersRequestType',
        'GetLiveAuctionBiddersResponseType\,' =>
            'GetLiveAuctionBiddersResponseType',
        'GetLiveAuctionCatalogDetailsRequestType\,' =>
            'GetLiveAuctionCatalogDetailsRequestType',
        'GetLiveAuctionCatalogDetailsResponseType\,' =>
            'GetLiveAuctionCatalogDetailsResponseType',
        'GetMemberMessagesRequestType\,' =>
            'GetMemberMessagesRequestType',
        'GetMemberMessagesResponseType\,' =>
            'GetMemberMessagesResponseType',
        'GetMyMessagesRequestType\,' =>
            'GetMyMessagesRequestType',
        'GetMyMessagesResponseType\,' =>
            'GetMyMessagesResponseType',
        'GetMyeBayRequestType\,' =>
            'GetMyeBayRequestType',
        'GetMyeBayResponseType\,' =>
            'GetMyeBayResponseType',
        'GetMyeBayBuyingRequestType\,' =>
            'GetMyeBayBuyingRequestType',
        'GetMyeBayBuyingResponseType\,' =>
            'GetMyeBayBuyingResponseType',
        'GetMyeBayRemindersRequestType\,' =>
            'GetMyeBayRemindersRequestType',
        'GetMyeBayRemindersResponseType\,' =>
            'GetMyeBayRemindersResponseType',
        'GetMyeBaySellingRequestType\,' =>
            'GetMyeBaySellingRequestType',
        'GetMyeBaySellingResponseType\,' =>
            'GetMyeBaySellingResponseType',
        'GetNotificationPreferencesRequestType\,' =>
            'GetNotificationPreferencesRequestType',
        'GetNotificationPreferencesResponseType\,' =>
            'GetNotificationPreferencesResponseType',
        'GetNotificationsUsageRequestType\,' =>
            'GetNotificationsUsageRequestType',
        'GetNotificationsUsageResponseType\,' =>
            'GetNotificationsUsageResponseType',
        'GetOrderTransactionsRequestType\,' =>
            'GetOrderTransactionsRequestType',
        'GetOrderTransactionsResponseType\,' =>
            'GetOrderTransactionsResponseType',
        'GetOrdersRequestType\,' =>
            'GetOrdersRequestType',
        'GetOrdersResponseType\,' =>
            'GetOrdersResponseType',
        'GetPictureManagerDetailsRequestType\,' =>
            'GetPictureManagerDetailsRequestType',
        'GetPictureManagerDetailsResponseType\,' =>
            'GetPictureManagerDetailsResponseType',
        'GetPictureManagerOptionsRequestType\,' =>
            'GetPictureManagerOptionsRequestType',
        'GetPictureManagerOptionsResponseType\,' =>
            'GetPictureManagerOptionsResponseType',
        'GetPopularKeywordsRequestType\,' =>
            'GetPopularKeywordsRequestType',
        'GetPopularKeywordsResponseType\,' =>
            'GetPopularKeywordsResponseType',
        'GetProductFamilyMembersRequestType\,' =>
            'GetProductFamilyMembersRequestType',
        'GetProductFamilyMembersResponseType\,' =>
            'GetProductFamilyMembersResponseType',
        'GetProductFinderRequestType\,' =>
            'GetProductFinderRequestType',
        'GetProductFinderResponseType\,' =>
            'GetProductFinderResponseType',
        'GetProductFinderXSLRequestType\,' =>
            'GetProductFinderXSLRequestType',
        'GetProductFinderXSLResponseType\,' =>
            'GetProductFinderXSLResponseType',
        'GetProductSearchPageRequestType\,' =>
            'GetProductSearchPageRequestType',
        'GetProductSearchPageResponseType\,' =>
            'GetProductSearchPageResponseType',
        'GetProductSearchResultsRequestType\,' =>
            'GetProductSearchResultsRequestType',
        'GetProductSearchResultsResponseType\,' =>
            'GetProductSearchResultsResponseType',
        'GetProductSellingPagesRequestType\,' =>
            'GetProductSellingPagesRequestType',
        'GetProductSellingPagesResponseType\,' =>
            'GetProductSellingPagesResponseType',
        'GetPromotionRulesRequestType\,' =>
            'GetPromotionRulesRequestType',
        'GetPromotionRulesResponseType\,' =>
            'GetPromotionRulesResponseType',
        'GetRecommendationsRequestType\,' =>
            'GetRecommendationsRequestType',
        'GetRecommendationsResponseType\,' =>
            'GetRecommendationsResponseType',
        'GetReturnURLRequestType\,' =>
            'GetReturnURLRequestType',
        'GetReturnURLResponseType\,' =>
            'GetReturnURLResponseType',
        'GetRuNameRequestType\,' =>
            'GetRuNameRequestType',
        'GetRuNameResponseType\,' =>
            'GetRuNameResponseType',
        'GetSearchResultsRequestType\,' =>
            'GetSearchResultsRequestType',
        'GetSearchResultsResponseType\,' =>
            'GetSearchResultsResponseType',
        'GetSearchResultsExpressRequestType\,' =>
            'GetSearchResultsExpressRequestType',
        'GetSearchResultsExpressResponseType\,' =>
            'GetSearchResultsExpressResponseType',
        'GetSellerEventsRequestType\,' =>
            'GetSellerEventsRequestType',
        'GetSellerEventsResponseType\,' =>
            'GetSellerEventsResponseType',
        'GetSellerListRequestType\,' =>
            'GetSellerListRequestType',
        'GetSellerListResponseType\,' =>
            'GetSellerListResponseType',
        'GetSellerPaymentsRequestType\,' =>
            'GetSellerPaymentsRequestType',
        'GetSellerPaymentsResponseType\,' =>
            'GetSellerPaymentsResponseType',
        'GetSellerTransactionsRequestType\,' =>
            'GetSellerTransactionsRequestType',
        'GetSellerTransactionsResponseType\,' =>
            'GetSellerTransactionsResponseType',
        'GetStoreRequestType\,' =>
            'GetStoreRequestType',
        'GetStoreResponseType\,' =>
            'GetStoreResponseType',
        'GetStoreCategoryUpdateStatusRequestType\,' =>
            'GetStoreCategoryUpdateStatusRequestType',
        'GetStoreCategoryUpdateStatusResponseType\,' =>
            'GetStoreCategoryUpdateStatusResponseType',
        'GetStoreCustomPageRequestType\,' =>
            'GetStoreCustomPageRequestType',
        'GetStoreCustomPageResponseType\,' =>
            'GetStoreCustomPageResponseType',
        'GetStoreOptionsRequestType\,' =>
            'GetStoreOptionsRequestType',
        'GetStoreOptionsResponseType\,' =>
            'GetStoreOptionsResponseType',
        'GetStorePreferencesRequestType\,' =>
            'GetStorePreferencesRequestType',
        'GetStorePreferencesResponseType\,' =>
            'GetStorePreferencesResponseType',
        'GetSuggestedCategoriesRequestType\,' =>
            'GetSuggestedCategoriesRequestType',
        'GetSuggestedCategoriesResponseType\,' =>
            'GetSuggestedCategoriesResponseType',
        'GetTaxTableRequestType\,' =>
            'GetTaxTableRequestType',
        'GetTaxTableResponseType\,' =>
            'GetTaxTableResponseType',
        'GetUserRequestType\,' =>
            'GetUserRequestType',
        'GetUserResponseType\,' =>
            'GetUserResponseType',
        'GetUserContactDetailsRequestType\,' =>
            'GetUserContactDetailsRequestType',
        'GetUserContactDetailsResponseType\,' =>
            'GetUserContactDetailsResponseType',
        'GetUserDisputesRequestType\,' =>
            'GetUserDisputesRequestType',
        'GetUserDisputesResponseType\,' =>
            'GetUserDisputesResponseType',
        'GetUserPreferencesRequestType\,' =>
            'GetUserPreferencesRequestType',
        'GetUserPreferencesResponseType\,' =>
            'GetUserPreferencesResponseType',
        'GetVeROReasonCodeDetailsRequestType\,' =>
            'GetVeROReasonCodeDetailsRequestType',
        'GetVeROReasonCodeDetailsResponseType\,' =>
            'GetVeROReasonCodeDetailsResponseType',
        'GetVeROReportStatusRequestType\,' =>
            'GetVeROReportStatusRequestType',
        'GetVeROReportStatusResponseType\,' =>
            'GetVeROReportStatusResponseType',
        'GetWantItNowPostRequestType\,' =>
            'GetWantItNowPostRequestType',
        'GetWantItNowPostResponseType\,' =>
            'GetWantItNowPostResponseType',
        'GetWantItNowSearchResultsRequestType\,' =>
            'GetWantItNowSearchResultsRequestType',
        'GetWantItNowSearchResultsResponseType\,' =>
            'GetWantItNowSearchResultsResponseType',
        'GeteBayDetailsRequestType\,' =>
            'GeteBayDetailsRequestType',
        'GeteBayDetailsResponseType\,' =>
            'GeteBayDetailsResponseType',
        'GeteBayOfficialTimeRequestType\,' =>
            'GeteBayOfficialTimeRequestType',
        'GeteBayOfficialTimeResponseType\,' =>
            'GeteBayOfficialTimeResponseType',
        'IssueRefundRequestType\,' =>
            'IssueRefundRequestType',
        'IssueRefundResponseType\,' =>
            'IssueRefundResponseType',
        'LeaveFeedbackRequestType\,' =>
            'LeaveFeedbackRequestType',
        'LeaveFeedbackResponseType\,' =>
            'LeaveFeedbackResponseType',
        'PlaceOfferRequestType\,' =>
            'PlaceOfferRequestType',
        'PlaceOfferResponseType\,' =>
            'PlaceOfferResponseType',
        'RelistItemRequestType\,' =>
            'RelistItemRequestType',
        'RelistItemResponseType\,' =>
            'RelistItemResponseType',
        'RemoveFromWatchListRequestType\,' =>
            'RemoveFromWatchListRequestType',
        'RemoveFromWatchListResponseType\,' =>
            'RemoveFromWatchListResponseType',
        'RespondToBestOfferRequestType\,' =>
            'RespondToBestOfferRequestType',
        'RespondToBestOfferResponseType\,' =>
            'RespondToBestOfferResponseType',
        'RespondToFeedbackRequestType\,' =>
            'RespondToFeedbackRequestType',
        'RespondToFeedbackResponseType\,' =>
            'RespondToFeedbackResponseType',
        'RespondToWantItNowPostRequestType\,' =>
            'RespondToWantItNowPostRequestType',
        'RespondToWantItNowPostResponseType\,' =>
            'RespondToWantItNowPostResponseType',
        'ReviseCheckoutStatusRequestType\,' =>
            'ReviseCheckoutStatusRequestType',
        'ReviseCheckoutStatusResponseType\,' =>
            'ReviseCheckoutStatusResponseType',
        'ReviseItemRequestType\,' =>
            'ReviseItemRequestType',
        'ReviseItemResponseType\,' =>
            'ReviseItemResponseType',
        'ReviseLiveAuctionItemRequestType\,' =>
            'ReviseLiveAuctionItemRequestType',
        'ReviseLiveAuctionItemResponseType\,' =>
            'ReviseLiveAuctionItemResponseType',
        'ReviseMyMessagesRequestType\,' =>
            'ReviseMyMessagesRequestType',
        'ReviseMyMessagesResponseType\,' =>
            'ReviseMyMessagesResponseType',
        'ReviseMyMessagesFoldersRequestType\,' =>
            'ReviseMyMessagesFoldersRequestType',
        'ReviseMyMessagesFoldersResponseType\,' =>
            'ReviseMyMessagesFoldersResponseType',
        'SellerReverseDisputeRequestType\,' =>
            'SellerReverseDisputeRequestType',
        'SellerReverseDisputeResponseType\,' =>
            'SellerReverseDisputeResponseType',
        'SendInvoiceRequestType\,' =>
            'SendInvoiceRequestType',
        'SendInvoiceResponseType\,' =>
            'SendInvoiceResponseType',
        'SetNotificationPreferencesRequestType\,' =>
            'SetNotificationPreferencesRequestType',
        'SetNotificationPreferencesResponseType\,' =>
            'SetNotificationPreferencesResponseType',
        'SetPictureManagerDetailsRequestType\,' =>
            'SetPictureManagerDetailsRequestType',
        'SetPictureManagerDetailsResponseType\,' =>
            'SetPictureManagerDetailsResponseType',
        'SetPromotionRulesRequestType\,' =>
            'SetPromotionRulesRequestType',
        'SetPromotionRulesResponseType\,' =>
            'SetPromotionRulesResponseType',
        'SetReturnURLRequestType\,' =>
            'SetReturnURLRequestType',
        'SetReturnURLResponseType\,' =>
            'SetReturnURLResponseType',
        'SetStoreRequestType\,' =>
            'SetStoreRequestType',
        'SetStoreResponseType\,' =>
            'SetStoreResponseType',
        'SetStoreCategoriesRequestType\,' =>
            'SetStoreCategoriesRequestType',
        'SetStoreCategoriesResponseType\,' =>
            'SetStoreCategoriesResponseType',
        'SetStoreCustomPageRequestType\,' =>
            'SetStoreCustomPageRequestType',
        'SetStoreCustomPageResponseType\,' =>
            'SetStoreCustomPageResponseType',
        'SetStorePreferencesRequestType\,' =>
            'SetStorePreferencesRequestType',
        'SetStorePreferencesResponseType\,' =>
            'SetStorePreferencesResponseType',
        'SetTaxTableRequestType\,' =>
            'SetTaxTableRequestType',
        'SetTaxTableResponseType\,' =>
            'SetTaxTableResponseType',
        'SetUserNotesRequestType\,' =>
            'SetUserNotesRequestType',
        'SetUserNotesResponseType\,' =>
            'SetUserNotesResponseType',
        'SetUserPreferencesRequestType\,' =>
            'SetUserPreferencesRequestType',
        'SetUserPreferencesResponseType\,' =>
            'SetUserPreferencesResponseType',
        'ValidateChallengeInputRequestType\,' =>
            'ValidateChallengeInputRequestType',
        'ValidateChallengeInputResponseType\,' =>
            'ValidateChallengeInputResponseType',
        'ValidateTestUserRegistrationRequestType\,' =>
            'ValidateTestUserRegistrationRequestType',
        'ValidateTestUserRegistrationResponseType\,' =>
            'ValidateTestUserRegistrationResponseType',
        'VeROReportItemsRequestType\,' =>
            'VeROReportItemsRequestType',
        'VeROReportItemsResponseType\,' =>
            'VeROReportItemsResponseType',
        'VerifyAddItemRequestType\,' =>
            'VerifyAddItemRequestType',
        'VerifyAddItemResponseType\,' =>
            'VerifyAddItemResponseType',
        'VerifyAddSecondChanceItemRequestType\,' =>
            'VerifyAddSecondChanceItemRequestType',
        'VerifyAddSecondChanceItemResponseType\,' =>
            'VerifyAddSecondChanceItemResponseType',
        'AbstractRequestType\,' =>
            'AbstractRequestType',
        'AbstractResponseType\,' =>
            'AbstractResponseType',
        'AckCodeType\,' =>
            'AckCodeType',
        'BuyerPaymentMethodCodeType\,' =>
            'BuyerPaymentMethodCodeType',
        'DetailLevelCodeType\,' =>
            'DetailLevelCodeType',
        'DisputeActivityCodeType\,' =>
            'DisputeActivityCodeType',
        'DisputeCreditEligibilityCodeType\,' =>
            'DisputeCreditEligibilityCodeType',
        'DisputeExplanationCodeType\,' =>
            'DisputeExplanationCodeType',
        'DisputeFilterCountType\,' =>
            'DisputeFilterCountType',
        'DisputeFilterTypeCodeType\,' =>
            'DisputeFilterTypeCodeType',
        'DisputeIDType\,' =>
            'DisputeIDType',
        'DisputeMessageSourceCodeType\,' =>
            'DisputeMessageSourceCodeType',
        'DisputeMessageType\,' =>
            'DisputeMessageType',
        'DisputeReasonCodeType\,' =>
            'DisputeReasonCodeType',
        'DisputeRecordTypeCodeType\,' =>
            'DisputeRecordTypeCodeType',
        'DisputeResolutionReasonCodeType\,' =>
            'DisputeResolutionReasonCodeType',
        'DisputeResolutionRecordTypeCodeType\,' =>
            'DisputeResolutionRecordTypeCodeType',
        'DisputeResolutionType\,' =>
            'DisputeResolutionType',
        'DisputeSortTypeCodeType\,' =>
            'DisputeSortTypeCodeType',
        'DisputeStateCodeType\,' =>
            'DisputeStateCodeType',
        'DisputeStatusCodeType\,' =>
            'DisputeStatusCodeType',
        'DuplicateInvocationDetailsType\,' =>
            'DuplicateInvocationDetailsType',
        'ErrorClassificationCodeType\,' =>
            'ErrorClassificationCodeType',
        'ErrorHandlingCodeType\,' =>
            'ErrorHandlingCodeType',
        'ErrorParameterType\,' =>
            'ErrorParameterType',
        'ErrorType\,' =>
            'ErrorType',
        'InvocationStatusType\,' =>
            'InvocationStatusType',
        'MeasureType\,' =>
            'MeasureType',
        'MeasurementSystemCodeType\,' =>
            'MeasurementSystemCodeType',
        'PaginationType\,' =>
            'PaginationType',
        'SeverityCodeType\,' =>
            'SeverityCodeType',
        'UUIDType\,' =>
            'UUIDType',
        'UserIdPasswordType\,' =>
            'UserIdPasswordType',
        'WarningLevelCodeType\,' =>
            'WarningLevelCodeType',
        'AccessRuleCurrentStatusCodeType\,' =>
            'AccessRuleCurrentStatusCodeType',
        'AccessRuleStatusCodeType\,' =>
            'AccessRuleStatusCodeType',
        'AccountDetailEntryCodeType\,' =>
            'AccountDetailEntryCodeType',
        'AccountEntriesType\,' =>
            'AccountEntriesType',
        'AccountEntrySortTypeCodeType\,' =>
            'AccountEntrySortTypeCodeType',
        'AccountEntryType\,' =>
            'AccountEntryType',
        'AccountHistorySelectionCodeType\,' =>
            'AccountHistorySelectionCodeType',
        'AccountStateCodeType\,' =>
            'AccountStateCodeType',
        'AccountSummaryType\,' =>
            'AccountSummaryType',
        'AdFormatEnabledCodeType\,' =>
            'AdFormatEnabledCodeType',
        'AdFormatEnabledDefinitionType\,' =>
            'AdFormatEnabledDefinitionType',
        'AdFormatLeadType\,' =>
            'AdFormatLeadType',
        'AddMemberMessagesAAQToBidderRequestContainerType\,' =>
            'AddMemberMessagesAAQToBidderRequestContainerType',
        'AddMemberMessagesAAQToBidderResponseContainerType\,' =>
            'AddMemberMessagesAAQToBidderResponseContainerType',
        'AdditionalAccountType\,' =>
            'AdditionalAccountType',
        'AddressOwnerCodeType\,' =>
            'AddressOwnerCodeType',
        'AddressRecordTypeCodeType\,' =>
            'AddressRecordTypeCodeType',
        'AddressStatusCodeType\,' =>
            'AddressStatusCodeType',
        'AddressType\,' =>
            'AddressType',
        'AffiliateTrackingDetailsType\,' =>
            'AffiliateTrackingDetailsType',
        'AmountType\,' =>
            'AmountType',
        'ApiAccessRuleType\,' =>
            'ApiAccessRuleType',
        'ApplicationDeliveryPreferencesType\,' =>
            'ApplicationDeliveryPreferencesType',
        'ApplicationDeviceTypeCodeType\,' =>
            'ApplicationDeviceTypeCodeType',
        'AttributeArrayType\,' =>
            'AttributeArrayType',
        'AttributeRecommendationsType\,' =>
            'AttributeRecommendationsType',
        'AttributeSetArrayType\,' =>
            'AttributeSetArrayType',
        'AttributeSetType\,' =>
            'AttributeSetType',
        'AttributeType\,' =>
            'AttributeType',
        'AuthenticationEntryArrayType\,' =>
            'AuthenticationEntryArrayType',
        'AuthenticationEntryType\,' =>
            'AuthenticationEntryType',
        'BasicUpgradePackEnabledDefinitionType\,' =>
            'BasicUpgradePackEnabledDefinitionType',
        'BestOfferActionCodeType\,' =>
            'BestOfferActionCodeType',
        'BestOfferArrayType\,' =>
            'BestOfferArrayType',
        'BestOfferAutoDeclineEnabledDefinitionType\,' =>
            'BestOfferAutoDeclineEnabledDefinitionType',
        'BestOfferCounterEnabledDefinitionType\,' =>
            'BestOfferCounterEnabledDefinitionType',
        'BestOfferDetailsType\,' =>
            'BestOfferDetailsType',
        'BestOfferEnabledDefinitionType\,' =>
            'BestOfferEnabledDefinitionType',
        'BestOfferIDType\,' =>
            'BestOfferIDType',
        'BestOfferStatusCodeType\,' =>
            'BestOfferStatusCodeType',
        'BestOfferType\,' =>
            'BestOfferType',
        'BestOfferTypeCodeType\,' =>
            'BestOfferTypeCodeType',
        'BidActionCodeType\,' =>
            'BidActionCodeType',
        'BidApprovalArrayType\,' =>
            'BidApprovalArrayType',
        'BidApprovalType\,' =>
            'BidApprovalType',
        'BidderDetailArrayType\,' =>
            'BidderDetailArrayType',
        'BidderDetailType\,' =>
            'BidderDetailType',
        'BidderNoticePreferencesType\,' =>
            'BidderNoticePreferencesType',
        'BidderStatusCodeType\,' =>
            'BidderStatusCodeType',
        'BiddingDetailsType\,' =>
            'BiddingDetailsType',
        'BiddingSummaryType\,' =>
            'BiddingSummaryType',
        'BuyerProtectionCodeType\,' =>
            'BuyerProtectionCodeType',
        'BuyerRequirementsType\,' =>
            'BuyerRequirementsType',
        'BuyerType\,' =>
            'BuyerType',
        'BuyingGuideDetailsType\,' =>
            'BuyingGuideDetailsType',
        'BuyingGuideType\,' =>
            'BuyingGuideType',
        'BuyingSummaryType\,' =>
            'BuyingSummaryType',
        'CalculatedShippingChargeOptionCodeType\,' =>
            'CalculatedShippingChargeOptionCodeType',
        'CalculatedShippingPreferencesType\,' =>
            'CalculatedShippingPreferencesType',
        'CalculatedShippingRateOptionCodeType\,' =>
            'CalculatedShippingRateOptionCodeType',
        'CalculatedShippingRateType\,' =>
            'CalculatedShippingRateType',
        'CancelOfferType\,' =>
            'CancelOfferType',
        'CategoryArrayType\,' =>
            'CategoryArrayType',
        'CategoryFeatureType\,' =>
            'CategoryFeatureType',
        'CategoryFinanceOfferArrayType\,' =>
            'CategoryFinanceOfferArrayType',
        'CategoryFinanceOfferType\,' =>
            'CategoryFinanceOfferType',
        'CategoryListingsOrderCodeType\,' =>
            'CategoryListingsOrderCodeType',
        'CategoryListingsSearchCodeType\,' =>
            'CategoryListingsSearchCodeType',
        'CategoryMappingType\,' =>
            'CategoryMappingType',
        'CategoryType\,' =>
            'CategoryType',
        'CharacteristicSetIDsType\,' =>
            'CharacteristicSetIDsType',
        'CharacteristicType\,' =>
            'CharacteristicType',
        'CharacteristicsSearchCodeType\,' =>
            'CharacteristicsSearchCodeType',
        'CharacteristicsSetType\,' =>
            'CharacteristicsSetType',
        'CharityAffiliationType\,' =>
            'CharityAffiliationType',
        'CharityAffiliationTypeCodeType\,' =>
            'CharityAffiliationTypeCodeType',
        'CharityAffiliationsType\,' =>
            'CharityAffiliationsType',
        'CharityIDType\,' =>
            'CharityIDType',
        'CharityInfoType\,' =>
            'CharityInfoType',
        'CharitySellerStatusCodeType\,' =>
            'CharitySellerStatusCodeType',
        'CharitySellerType\,' =>
            'CharitySellerType',
        'CharityStatusCodeType\,' =>
            'CharityStatusCodeType',
        'CharityType\,' =>
            'CharityType',
        'CheckoutMethodCodeType\,' =>
            'CheckoutMethodCodeType',
        'CheckoutStatusCodeType\,' =>
            'CheckoutStatusCodeType',
        'CheckoutStatusType\,' =>
            'CheckoutStatusType',
        'CombinedPaymentOptionCodeType\,' =>
            'CombinedPaymentOptionCodeType',
        'CombinedPaymentPeriodCodeType\,' =>
            'CombinedPaymentPeriodCodeType',
        'CombinedPaymentPreferencesType\,' =>
            'CombinedPaymentPreferencesType',
        'CommentTypeCodeType\,' =>
            'CommentTypeCodeType',
        'CompleteStatusCodeType\,' =>
            'CompleteStatusCodeType',
        'ConditionSelectionCodeType\,' =>
            'ConditionSelectionCodeType',
        'ContextSearchAssetType\,' =>
            'ContextSearchAssetType',
        'CountryCodeType\,' =>
            'CountryCodeType',
        'CountryDetailsType\,' =>
            'CountryDetailsType',
        'CrossPromotionPreferencesType\,' =>
            'CrossPromotionPreferencesType',
        'CrossPromotionsType\,' =>
            'CrossPromotionsType',
        'CurrencyCodeType\,' =>
            'CurrencyCodeType',
        'CurrencyDetailsType\,' =>
            'CurrencyDetailsType',
        'DataElementSetType\,' =>
            'DataElementSetType',
        'DateSpecifierCodeType\,' =>
            'DateSpecifierCodeType',
        'DepositTypeCodeType\,' =>
            'DepositTypeCodeType',
        'DescriptionReviseModeCodeType\,' =>
            'DescriptionReviseModeCodeType',
        'DescriptionTemplateCodeType\,' =>
            'DescriptionTemplateCodeType',
        'DescriptionTemplateType\,' =>
            'DescriptionTemplateType',
        'DetailNameCodeType\,' =>
            'DetailNameCodeType',
        'DeviceTypeCodeType\,' =>
            'DeviceTypeCodeType',
        'DigitalDeliveryDetailsType\,' =>
            'DigitalDeliveryDetailsType',
        'DigitalDeliveryEnabledCodeType\,' =>
            'DigitalDeliveryEnabledCodeType',
        'DigitalDeliveryEnabledDefinitionType\,' =>
            'DigitalDeliveryEnabledDefinitionType',
        'DigitalDeliveryMethodCodeType\,' =>
            'DigitalDeliveryMethodCodeType',
        'DispatchTimeMaxDetailsType\,' =>
            'DispatchTimeMaxDetailsType',
        'DisplayPayNowButtonCodeType\,' =>
            'DisplayPayNowButtonCodeType',
        'DisputeArrayType\,' =>
            'DisputeArrayType',
        'DisputeType\,' =>
            'DisputeType',
        'DistanceType\,' =>
            'DistanceType',
        'DomainHistogramType\,' =>
            'DomainHistogramType',
        'DutchBINEnabledDefinitionType\,' =>
            'DutchBINEnabledDefinitionType',
        'EBaySubscriptionTypeCodeType\,' =>
            'EBaySubscriptionTypeCodeType',
        'EnableCodeType\,' =>
            'EnableCodeType',
        'EndOfAuctionEmailPreferencesType\,' =>
            'EndOfAuctionEmailPreferencesType',
        'EndOfAuctionLogoTypeCodeType\,' =>
            'EndOfAuctionLogoTypeCodeType',
        'EndReasonCodeType\,' =>
            'EndReasonCodeType',
        'ExpansionArrayType\,' =>
            'ExpansionArrayType',
        'ExpressConditionRequiredDefinitionType\,' =>
            'ExpressConditionRequiredDefinitionType',
        'ExpressDetailLevelCodeType\,' =>
            'ExpressDetailLevelCodeType',
        'ExpressDetailsType\,' =>
            'ExpressDetailsType',
        'ExpressEnabledDefinitionType\,' =>
            'ExpressEnabledDefinitionType',
        'ExpressHistogramAisleType\,' =>
            'ExpressHistogramAisleType',
        'ExpressHistogramDepartmentType\,' =>
            'ExpressHistogramDepartmentType',
        'ExpressHistogramDomainDetailsType\,' =>
            'ExpressHistogramDomainDetailsType',
        'ExpressHistogramProductType\,' =>
            'ExpressHistogramProductType',
        'ExpressHistogramSortCodeType\,' =>
            'ExpressHistogramSortCodeType',
        'ExpressItemRequirementsType\,' =>
            'ExpressItemRequirementsType',
        'ExpressItemSortCodeType\,' =>
            'ExpressItemSortCodeType',
        'ExpressPicturesRequiredDefinitionType\,' =>
            'ExpressPicturesRequiredDefinitionType',
        'ExpressPreferencesType\,' =>
            'ExpressPreferencesType',
        'ExpressProductSortCodeType\,' =>
            'ExpressProductSortCodeType',
        'ExpressProductType\,' =>
            'ExpressProductType',
        'ExpressSellerRequirementsType\,' =>
            'ExpressSellerRequirementsType',
        'ExpressSellingPreferenceCodeType\,' =>
            'ExpressSellingPreferenceCodeType',
        'ExtendedProductFinderIDType\,' =>
            'ExtendedProductFinderIDType',
        'ExternalProductCodeType\,' =>
            'ExternalProductCodeType',
        'ExternalProductIDType\,' =>
            'ExternalProductIDType',
        'ExternalTransactionType\,' =>
            'ExternalTransactionType',
        'FeatureDefinitionsType\,' =>
            'FeatureDefinitionsType',
        'FeatureIDCodeType\,' =>
            'FeatureIDCodeType',
        'FeeType\,' =>
            'FeeType',
        'FeedbackDetailArrayType\,' =>
            'FeedbackDetailArrayType',
        'FeedbackDetailType\,' =>
            'FeedbackDetailType',
        'FeedbackInfoType\,' =>
            'FeedbackInfoType',
        'FeedbackPeriodArrayType\,' =>
            'FeedbackPeriodArrayType',
        'FeedbackPeriodType\,' =>
            'FeedbackPeriodType',
        'FeedbackRatingStarCodeType\,' =>
            'FeedbackRatingStarCodeType',
        'FeedbackRequirementsType\,' =>
            'FeedbackRequirementsType',
        'FeedbackResponseCodeType\,' =>
            'FeedbackResponseCodeType',
        'FeedbackSummaryType\,' =>
            'FeedbackSummaryType',
        'FeesType\,' =>
            'FeesType',
        'FinanceOfferArrayType\,' =>
            'FinanceOfferArrayType',
        'FinanceOfferType\,' =>
            'FinanceOfferType',
        'FlatRateInsuranceRangeCodeType\,' =>
            'FlatRateInsuranceRangeCodeType',
        'FlatRateInsuranceRangeCostType\,' =>
            'FlatRateInsuranceRangeCostType',
        'FlatShippingPreferencesType\,' =>
            'FlatShippingPreferencesType',
        'FlatShippingRateOptionCodeType\,' =>
            'FlatShippingRateOptionCodeType',
        'GallerySortFilterCodeType\,' =>
            'GallerySortFilterCodeType',
        'GalleryTypeCodeType\,' =>
            'GalleryTypeCodeType',
        'GetAllBiddersModeCodeType\,' =>
            'GetAllBiddersModeCodeType',
        'GetRecommendationsRequestContainerType\,' =>
            'GetRecommendationsRequestContainerType',
        'GetRecommendationsResponseContainerType\,' =>
            'GetRecommendationsResponseContainerType',
        'GiftServicesCodeType\,' =>
            'GiftServicesCodeType',
        'GranularityLevelCodeType\,' =>
            'GranularityLevelCodeType',
        'HitCounterCodeType\,' =>
            'HitCounterCodeType',
        'HomePageFeaturedEnabledDefinitionType\,' =>
            'HomePageFeaturedEnabledDefinitionType',
        'InsuranceDetailsType\,' =>
            'InsuranceDetailsType',
        'InsuranceOptionCodeType\,' =>
            'InsuranceOptionCodeType',
        'InsuranceSelectedCodeType\,' =>
            'InsuranceSelectedCodeType',
        'InternationalShippingServiceOptionsType\,' =>
            'InternationalShippingServiceOptionsType',
        'ItemArrayType\,' =>
            'ItemArrayType',
        'ItemBidDetailsType\,' =>
            'ItemBidDetailsType',
        'ItemFormatSortFilterCodeType\,' =>
            'ItemFormatSortFilterCodeType',
        'ItemIDType\,' =>
            'ItemIDType',
        'ItemListCustomizationType\,' =>
            'ItemListCustomizationType',
        'ItemLocationCodeType\,' =>
            'ItemLocationCodeType',
        'ItemSortFilterCodeType\,' =>
            'ItemSortFilterCodeType',
        'ItemSortTypeCodeType\,' =>
            'ItemSortTypeCodeType',
        'ItemTransactionIDArrayType\,' =>
            'ItemTransactionIDArrayType',
        'ItemTransactionIDType\,' =>
            'ItemTransactionIDType',
        'ItemType\,' =>
            'ItemType',
        'ItemTypeFilterCodeType\,' =>
            'ItemTypeFilterCodeType',
        'LabelType\,' =>
            'LabelType',
        'ListingAnalyzerRecommendationsType\,' =>
            'ListingAnalyzerRecommendationsType',
        'ListingCheckoutRedirectPreferenceType\,' =>
            'ListingCheckoutRedirectPreferenceType',
        'ListingDesignerType\,' =>
            'ListingDesignerType',
        'ListingDetailsType\,' =>
            'ListingDetailsType',
        'ListingDurationDefinitionType\,' =>
            'ListingDurationDefinitionType',
        'ListingDurationDefinitionsType\,' =>
            'ListingDurationDefinitionsType',
        'ListingDurationReferenceType\,' =>
            'ListingDurationReferenceType',
        'ListingEnhancementsCodeType\,' =>
            'ListingEnhancementsCodeType',
        'ListingFlowCodeType\,' =>
            'ListingFlowCodeType',
        'ListingStatusCodeType\,' =>
            'ListingStatusCodeType',
        'ListingSubtypeEnum\,' =>
            'ListingSubtypeEnum',
        'ListingTipArrayType\,' =>
            'ListingTipArrayType',
        'ListingTipFieldType\,' =>
            'ListingTipFieldType',
        'ListingTipMessageType\,' =>
            'ListingTipMessageType',
        'ListingTipType\,' =>
            'ListingTipType',
        'ListingTypeCodeType\,' =>
            'ListingTypeCodeType',
        'LiveAuctionApprovalStatusArrayType\,' =>
            'LiveAuctionApprovalStatusArrayType',
        'LiveAuctionApprovalStatusType\,' =>
            'LiveAuctionApprovalStatusType',
        'LiveAuctionBidType\,' =>
            'LiveAuctionBidType',
        'LiveAuctionCatalogType\,' =>
            'LiveAuctionCatalogType',
        'LiveAuctionDetailsType\,' =>
            'LiveAuctionDetailsType',
        'LocalListingDistancesNonSubscriptionDefinitionType\,' =>
            'LocalListingDistancesNonSubscriptionDefinitionType',
        'LocalListingDistancesRegularDefinitionType\,' =>
            'LocalListingDistancesRegularDefinitionType',
        'LocalListingDistancesSpecialtyDefinitionType\,' =>
            'LocalListingDistancesSpecialtyDefinitionType',
        'LocalMarketNonSubscriptionDefinitionType\,' =>
            'LocalMarketNonSubscriptionDefinitionType',
        'LocalMarketPremiumSubscriptionDefinitionType\,' =>
            'LocalMarketPremiumSubscriptionDefinitionType',
        'LocalMarketRegularSubscriptionDefinitionType\,' =>
            'LocalMarketRegularSubscriptionDefinitionType',
        'LocalMarketSpecialitySubscriptionDefinitionType\,' =>
            'LocalMarketSpecialitySubscriptionDefinitionType',
        'LookupAttributeArrayType\,' =>
            'LookupAttributeArrayType',
        'LookupAttributeType\,' =>
            'LookupAttributeType',
        'MarkUpMarkDownEventType\,' =>
            'MarkUpMarkDownEventType',
        'MarkUpMarkDownEventTypeCodeType\,' =>
            'MarkUpMarkDownEventTypeCodeType',
        'MarkUpMarkDownHistoryType\,' =>
            'MarkUpMarkDownHistoryType',
        'MaximumItemRequirementsType\,' =>
            'MaximumItemRequirementsType',
        'MemberMessageExchangeArrayType\,' =>
            'MemberMessageExchangeArrayType',
        'MemberMessageExchangeType\,' =>
            'MemberMessageExchangeType',
        'MemberMessageType\,' =>
            'MemberMessageType',
        'MerchDisplayCodeType\,' =>
            'MerchDisplayCodeType',
        'MerchandizingPrefCodeType\,' =>
            'MerchandizingPrefCodeType',
        'MessageStatusTypeCodeType\,' =>
            'MessageStatusTypeCodeType',
        'MessageTypeCodeType\,' =>
            'MessageTypeCodeType',
        'MinimumReservePriceDefinitionType\,' =>
            'MinimumReservePriceDefinitionType',
        'ModifiedFieldType\,' =>
            'ModifiedFieldType',
        'ModifyActionCodeType\,' =>
            'ModifyActionCodeType',
        'ModifyCodeType\,' =>
            'ModifyCodeType',
        'MyMessagesAlertArrayType\,' =>
            'MyMessagesAlertArrayType',
        'MyMessagesAlertIDArrayType\,' =>
            'MyMessagesAlertIDArrayType',
        'MyMessagesAlertIDType\,' =>
            'MyMessagesAlertIDType',
        'MyMessagesAlertResolutionStatusCode\,' =>
            'MyMessagesAlertResolutionStatusCode',
        'MyMessagesAlertType\,' =>
            'MyMessagesAlertType',
        'MyMessagesFolderOperationCodeType\,' =>
            'MyMessagesFolderOperationCodeType',
        'MyMessagesFolderSummaryType\,' =>
            'MyMessagesFolderSummaryType',
        'MyMessagesFolderType\,' =>
            'MyMessagesFolderType',
        'MyMessagesForwardDetailsType\,' =>
            'MyMessagesForwardDetailsType',
        'MyMessagesMessageArrayType\,' =>
            'MyMessagesMessageArrayType',
        'MyMessagesMessageIDArrayType\,' =>
            'MyMessagesMessageIDArrayType',
        'MyMessagesMessageIDType\,' =>
            'MyMessagesMessageIDType',
        'MyMessagesMessageType\,' =>
            'MyMessagesMessageType',
        'MyMessagesResponseDetailsType\,' =>
            'MyMessagesResponseDetailsType',
        'MyMessagesSummaryType\,' =>
            'MyMessagesSummaryType',
        'MyeBayFavoriteSearchListType\,' =>
            'MyeBayFavoriteSearchListType',
        'MyeBayFavoriteSearchType\,' =>
            'MyeBayFavoriteSearchType',
        'MyeBayFavoriteSellerListType\,' =>
            'MyeBayFavoriteSellerListType',
        'MyeBayFavoriteSellerType\,' =>
            'MyeBayFavoriteSellerType',
        'MyeBaySecondChanceOfferListType\,' =>
            'MyeBaySecondChanceOfferListType',
        'MyeBaySelectionType\,' =>
            'MyeBaySelectionType',
        'NameValueListArrayType\,' =>
            'NameValueListArrayType',
        'NameValueListType\,' =>
            'NameValueListType',
        'NotificationDetailsArrayType\,' =>
            'NotificationDetailsArrayType',
        'NotificationDetailsType\,' =>
            'NotificationDetailsType',
        'NotificationEnableArrayType\,' =>
            'NotificationEnableArrayType',
        'NotificationEnableType\,' =>
            'NotificationEnableType',
        'NotificationEventPropertyNameCodeType\,' =>
            'NotificationEventPropertyNameCodeType',
        'NotificationEventPropertyType\,' =>
            'NotificationEventPropertyType',
        'NotificationEventStateCodeType\,' =>
            'NotificationEventStateCodeType',
        'NotificationEventTypeCodeType\,' =>
            'NotificationEventTypeCodeType',
        'NotificationPayloadTypeCodeType\,' =>
            'NotificationPayloadTypeCodeType',
        'NotificationRoleCodeType\,' =>
            'NotificationRoleCodeType',
        'NotificationStatisticsType\,' =>
            'NotificationStatisticsType',
        'NotificationUserDataType\,' =>
            'NotificationUserDataType',
        'OfferArrayType\,' =>
            'OfferArrayType',
        'OfferType\,' =>
            'OfferType',
        'OperationTypeCodeType\,' =>
            'OperationTypeCodeType',
        'OrderArrayType\,' =>
            'OrderArrayType',
        'OrderIDArrayType\,' =>
            'OrderIDArrayType',
        'OrderIDType\,' =>
            'OrderIDType',
        'OrderStatusCodeType\,' =>
            'OrderStatusCodeType',
        'OrderTransactionArrayType\,' =>
            'OrderTransactionArrayType',
        'OrderTransactionType\,' =>
            'OrderTransactionType',
        'OrderType\,' =>
            'OrderType',
        'PaginatedItemArrayType\,' =>
            'PaginatedItemArrayType',
        'PaginatedOrderTransactionArrayType\,' =>
            'PaginatedOrderTransactionArrayType',
        'PaginatedTransactionArrayType\,' =>
            'PaginatedTransactionArrayType',
        'PaginationResultType\,' =>
            'PaginationResultType',
        'PaidStatusCodeType\,' =>
            'PaidStatusCodeType',
        'PayPalAccountLevelCodeType\,' =>
            'PayPalAccountLevelCodeType',
        'PayPalAccountStatusCodeType\,' =>
            'PayPalAccountStatusCodeType',
        'PayPalAccountTypeCodeType\,' =>
            'PayPalAccountTypeCodeType',
        'PaymentDetailsType\,' =>
            'PaymentDetailsType',
        'PaymentMethodSearchCodeType\,' =>
            'PaymentMethodSearchCodeType',
        'PaymentOptionDetailsType\,' =>
            'PaymentOptionDetailsType',
        'PaymentStatusCodeType\,' =>
            'PaymentStatusCodeType',
        'PaymentTypeCodeType\,' =>
            'PaymentTypeCodeType',
        'PhotoDisplayCodeType\,' =>
            'PhotoDisplayCodeType',
        'PictureDetailsType\,' =>
            'PictureDetailsType',
        'PictureManagerActionCodeType\,' =>
            'PictureManagerActionCodeType',
        'PictureManagerDetailLevelCodeType\,' =>
            'PictureManagerDetailLevelCodeType',
        'PictureManagerDetailsType\,' =>
            'PictureManagerDetailsType',
        'PictureManagerFolderType\,' =>
            'PictureManagerFolderType',
        'PictureManagerPictureDisplayType\,' =>
            'PictureManagerPictureDisplayType',
        'PictureManagerPictureDisplayTypeCodeType\,' =>
            'PictureManagerPictureDisplayTypeCodeType',
        'PictureManagerPictureType\,' =>
            'PictureManagerPictureType',
        'PictureManagerSubscriptionLevelCodeType\,' =>
            'PictureManagerSubscriptionLevelCodeType',
        'PictureManagerSubscriptionType\,' =>
            'PictureManagerSubscriptionType',
        'PictureSourceCodeType\,' =>
            'PictureSourceCodeType',
        'PriceRangeFilterType\,' =>
            'PriceRangeFilterType',
        'PricingRecommendationsType\,' =>
            'PricingRecommendationsType',
        'ProPackEnabledDefinitionType\,' =>
            'ProPackEnabledDefinitionType',
        'ProPackPlusEnabledDefinitionType\,' =>
            'ProPackPlusEnabledDefinitionType',
        'ProStoresCheckoutPreferenceType\,' =>
            'ProStoresCheckoutPreferenceType',
        'ProStoresDetailsType\,' =>
            'ProStoresDetailsType',
        'ProductArrayType\,' =>
            'ProductArrayType',
        'ProductFamilyType\,' =>
            'ProductFamilyType',
        'ProductFinderConstraintType\,' =>
            'ProductFinderConstraintType',
        'ProductInfoType\,' =>
            'ProductInfoType',
        'ProductListingDetailsType\,' =>
            'ProductListingDetailsType',
        'ProductRecommendationsType\,' =>
            'ProductRecommendationsType',
        'ProductSearchPageType\,' =>
            'ProductSearchPageType',
        'ProductSearchResultType\,' =>
            'ProductSearchResultType',
        'ProductSearchType\,' =>
            'ProductSearchType',
        'ProductType\,' =>
            'ProductType',
        'ProductUseCaseCodeType\,' =>
            'ProductUseCaseCodeType',
        'PromotedItemType\,' =>
            'PromotedItemType',
        'PromotionDetailsType\,' =>
            'PromotionDetailsType',
        'PromotionItemPriceTypeCodeType\,' =>
            'PromotionItemPriceTypeCodeType',
        'PromotionItemSelectionCodeType\,' =>
            'PromotionItemSelectionCodeType',
        'PromotionMethodCodeType\,' =>
            'PromotionMethodCodeType',
        'PromotionRuleArrayType\,' =>
            'PromotionRuleArrayType',
        'PromotionRuleType\,' =>
            'PromotionRuleType',
        'PromotionSchemeCodeType\,' =>
            'PromotionSchemeCodeType',
        'ProximitySearchDetailsType\,' =>
            'ProximitySearchDetailsType',
        'ProximitySearchType\,' =>
            'ProximitySearchType',
        'QuantityOperatorCodeType\,' =>
            'QuantityOperatorCodeType',
        'QuestionTypeCodeType\,' =>
            'QuestionTypeCodeType',
        'RCSPaymentStatusCodeType\,' =>
            'RCSPaymentStatusCodeType',
        'RangeCodeType\,' =>
            'RangeCodeType',
        'ReasonCodeDetailType\,' =>
            'ReasonCodeDetailType',
        'RecipientRelationCodeType\,' =>
            'RecipientRelationCodeType',
        'RecommendationEngineCodeType\,' =>
            'RecommendationEngineCodeType',
        'RefundArrayType\,' =>
            'RefundArrayType',
        'RefundReasonCodeType\,' =>
            'RefundReasonCodeType',
        'RefundType\,' =>
            'RefundType',
        'RefundTypeCodeType\,' =>
            'RefundTypeCodeType',
        'RegionDetailsType\,' =>
            'RegionDetailsType',
        'RelatedSearchKeywordArrayType\,' =>
            'RelatedSearchKeywordArrayType',
        'ReminderCustomizationType\,' =>
            'ReminderCustomizationType',
        'RemindersType\,' =>
            'RemindersType',
        'RequestCategoriesType\,' =>
            'RequestCategoriesType',
        'ResponseAttributeSetType\,' =>
            'ResponseAttributeSetType',
        'ReviseStatusType\,' =>
            'ReviseStatusType',
        'SIFFTASRecommendationsType\,' =>
            'SIFFTASRecommendationsType',
        'SKUArrayType\,' =>
            'SKUArrayType',
        'SKUType\,' =>
            'SKUType',
        'SMSSubscriptionErrorCodeCodeType\,' =>
            'SMSSubscriptionErrorCodeCodeType',
        'SMSSubscriptionType\,' =>
            'SMSSubscriptionType',
        'SMSSubscriptionUserStatusCodeType\,' =>
            'SMSSubscriptionUserStatusCodeType',
        'SalesTaxType\,' =>
            'SalesTaxType',
        'ScheduleType\,' =>
            'ScheduleType',
        'SchedulingInfoType\,' =>
            'SchedulingInfoType',
        'SearchAttributesType\,' =>
            'SearchAttributesType',
        'SearchDetailsType\,' =>
            'SearchDetailsType',
        'SearchFlagsCodeType\,' =>
            'SearchFlagsCodeType',
        'SearchLocationFilterType\,' =>
            'SearchLocationFilterType',
        'SearchLocationType\,' =>
            'SearchLocationType',
        'SearchRequestType\,' =>
            'SearchRequestType',
        'SearchResultItemArrayType\,' =>
            'SearchResultItemArrayType',
        'SearchResultItemType\,' =>
            'SearchResultItemType',
        'SearchResultValuesCodeType\,' =>
            'SearchResultValuesCodeType',
        'SearchSortOrderCodeType\,' =>
            'SearchSortOrderCodeType',
        'SearchStoreFilterType\,' =>
            'SearchStoreFilterType',
        'SearchTypeCodeType\,' =>
            'SearchTypeCodeType',
        'SecondChanceOfferDurationCodeType\,' =>
            'SecondChanceOfferDurationCodeType',
        'SellerBusinessCodeType\,' =>
            'SellerBusinessCodeType',
        'SellerContactDetailsEnabledDefinitionType\,' =>
            'SellerContactDetailsEnabledDefinitionType',
        'SellerFavoriteItemPreferencesType\,' =>
            'SellerFavoriteItemPreferencesType',
        'SellerGuaranteeLevelCodeType\,' =>
            'SellerGuaranteeLevelCodeType',
        'SellerLevelCodeType\,' =>
            'SellerLevelCodeType',
        'SellerPaymentMethodCodeType\,' =>
            'SellerPaymentMethodCodeType',
        'SellerPaymentPreferencesType\,' =>
            'SellerPaymentPreferencesType',
        'SellerPaymentType\,' =>
            'SellerPaymentType',
        'SellerType\,' =>
            'SellerType',
        'SellingManagerProductDetailsType\,' =>
            'SellingManagerProductDetailsType',
        'SellingStatusType\,' =>
            'SellingStatusType',
        'SellingSummaryType\,' =>
            'SellingSummaryType',
        'SetUserNotesActionCodeType\,' =>
            'SetUserNotesActionCodeType',
        'ShipmentDeliveryStatusCodeType\,' =>
            'ShipmentDeliveryStatusCodeType',
        'ShipmentStatusCodeType\,' =>
            'ShipmentStatusCodeType',
        'ShippingCarrierCodeType\,' =>
            'ShippingCarrierCodeType',
        'ShippingDetailsType\,' =>
            'ShippingDetailsType',
        'ShippingFeatureCodeType\,' =>
            'ShippingFeatureCodeType',
        'ShippingLocationDetailsType\,' =>
            'ShippingLocationDetailsType',
        'ShippingOptionCodeType\,' =>
            'ShippingOptionCodeType',
        'ShippingPackageCodeType\,' =>
            'ShippingPackageCodeType',
        'ShippingRateTypeCodeType\,' =>
            'ShippingRateTypeCodeType',
        'ShippingRegionCodeType\,' =>
            'ShippingRegionCodeType',
        'ShippingServiceCodeType\,' =>
            'ShippingServiceCodeType',
        'ShippingServiceDetailsType\,' =>
            'ShippingServiceDetailsType',
        'ShippingServiceOptionsType\,' =>
            'ShippingServiceOptionsType',
        'ShippingTermRequiredDefinitionType\,' =>
            'ShippingTermRequiredDefinitionType',
        'ShippingTermsCodeType\,' =>
            'ShippingTermsCodeType',
        'ShippingTypeCodeType\,' =>
            'ShippingTypeCodeType',
        'SiteCodeType\,' =>
            'SiteCodeType',
        'SiteDefaultsType\,' =>
            'SiteDefaultsType',
        'SiteDetailsType\,' =>
            'SiteDetailsType',
        'SiteHostedPictureType\,' =>
            'SiteHostedPictureType',
        'SiteIDFilterCodeType\,' =>
            'SiteIDFilterCodeType',
        'SiteLocationType\,' =>
            'SiteLocationType',
        'SiteWideCharacteristicsType\,' =>
            'SiteWideCharacteristicsType',
        'SkypeContactOptionCodeType\,' =>
            'SkypeContactOptionCodeType',
        'SkypeMeNonTransactionalEnabledDefinitionType\,' =>
            'SkypeMeNonTransactionalEnabledDefinitionType',
        'SkypeMeTransactionalEnabledDefinitionType\,' =>
            'SkypeMeTransactionalEnabledDefinitionType',
        'SkypeOptionCodeType\,' =>
            'SkypeOptionCodeType',
        'SortOrderCodeType\,' =>
            'SortOrderCodeType',
        'SpellingSuggestionType\,' =>
            'SpellingSuggestionType',
        'StoreCategoryUpdateActionCodeType\,' =>
            'StoreCategoryUpdateActionCodeType',
        'StoreColorSchemeArrayType\,' =>
            'StoreColorSchemeArrayType',
        'StoreColorSchemeType\,' =>
            'StoreColorSchemeType',
        'StoreColorType\,' =>
            'StoreColorType',
        'StoreCustomCategoryArrayType\,' =>
            'StoreCustomCategoryArrayType',
        'StoreCustomCategoryType\,' =>
            'StoreCustomCategoryType',
        'StoreCustomHeaderLayoutCodeType\,' =>
            'StoreCustomHeaderLayoutCodeType',
        'StoreCustomListingHeaderDisplayCodeType\,' =>
            'StoreCustomListingHeaderDisplayCodeType',
        'StoreCustomListingHeaderLinkCodeType\,' =>
            'StoreCustomListingHeaderLinkCodeType',
        'StoreCustomListingHeaderLinkType\,' =>
            'StoreCustomListingHeaderLinkType',
        'StoreCustomListingHeaderType\,' =>
            'StoreCustomListingHeaderType',
        'StoreCustomPageArrayType\,' =>
            'StoreCustomPageArrayType',
        'StoreCustomPageStatusCodeType\,' =>
            'StoreCustomPageStatusCodeType',
        'StoreCustomPageType\,' =>
            'StoreCustomPageType',
        'StoreFontFaceCodeType\,' =>
            'StoreFontFaceCodeType',
        'StoreFontSizeCodeType\,' =>
            'StoreFontSizeCodeType',
        'StoreFontType\,' =>
            'StoreFontType',
        'StoreHeaderStyleCodeType\,' =>
            'StoreHeaderStyleCodeType',
        'StoreInventoryEnabledDefinitionType\,' =>
            'StoreInventoryEnabledDefinitionType',
        'StoreItemListLayoutCodeType\,' =>
            'StoreItemListLayoutCodeType',
        'StoreItemListSortOrderCodeType\,' =>
            'StoreItemListSortOrderCodeType',
        'StoreLogoArrayType\,' =>
            'StoreLogoArrayType',
        'StoreLogoType\,' =>
            'StoreLogoType',
        'StorePreferencesType\,' =>
            'StorePreferencesType',
        'StoreSearchCodeType\,' =>
            'StoreSearchCodeType',
        'StoreSubscriptionArrayType\,' =>
            'StoreSubscriptionArrayType',
        'StoreSubscriptionLevelCodeType\,' =>
            'StoreSubscriptionLevelCodeType',
        'StoreSubscriptionType\,' =>
            'StoreSubscriptionType',
        'StoreThemeArrayType\,' =>
            'StoreThemeArrayType',
        'StoreThemeType\,' =>
            'StoreThemeType',
        'StoreType\,' =>
            'StoreType',
        'StoreVacationPreferencesType\,' =>
            'StoreVacationPreferencesType',
        'StorefrontType\,' =>
            'StorefrontType',
        'StringMatchCodeType\,' =>
            'StringMatchCodeType',
        'SuggestedCategoryArrayType\,' =>
            'SuggestedCategoryArrayType',
        'SuggestedCategoryType\,' =>
            'SuggestedCategoryType',
        'SummaryEventScheduleType\,' =>
            'SummaryEventScheduleType',
        'SummaryFrequencyCodeType\,' =>
            'SummaryFrequencyCodeType',
        'SummaryWindowPeriodCodeType\,' =>
            'SummaryWindowPeriodCodeType',
        'TCREnabledDefinitionType\,' =>
            'TCREnabledDefinitionType',
        'TaskStatusCodeType\,' =>
            'TaskStatusCodeType',
        'TaxJurisdictionType\,' =>
            'TaxJurisdictionType',
        'TaxTableType\,' =>
            'TaxTableType',
        'ThemeGroupType\,' =>
            'ThemeGroupType',
        'TokenReturnMethodCodeType\,' =>
            'TokenReturnMethodCodeType',
        'TradingRoleCodeType\,' =>
            'TradingRoleCodeType',
        'TransactionArrayType\,' =>
            'TransactionArrayType',
        'TransactionPlatformType\,' =>
            'TransactionPlatformType',
        'TransactionStatusType\,' =>
            'TransactionStatusType',
        'TransactionType\,' =>
            'TransactionType',
        'UPSRateOptionCodeType\,' =>
            'UPSRateOptionCodeType',
        'URLDetailsType\,' =>
            'URLDetailsType',
        'URLTypeCodeType\,' =>
            'URLTypeCodeType',
        'UserConsentRequiredDefinitionType\,' =>
            'UserConsentRequiredDefinitionType',
        'UserIDArrayType\,' =>
            'UserIDArrayType',
        'UserIDType\,' =>
            'UserIDType',
        'UserIdFilterType\,' =>
            'UserIdFilterType',
        'UserStatusCodeType\,' =>
            'UserStatusCodeType',
        'UserType\,' =>
            'UserType',
        'VATDetailsType\,' =>
            'VATDetailsType',
        'VATStatusCodeType\,' =>
            'VATStatusCodeType',
        'ValType\,' =>
            'ValType',
        'ValuePackEnabledDefinitionType\,' =>
            'ValuePackEnabledDefinitionType',
        'VeROItemStatusCodeType\,' =>
            'VeROItemStatusCodeType',
        'VeROReasonCodeDetailsType\,' =>
            'VeROReasonCodeDetailsType',
        'VeROReportItemType\,' =>
            'VeROReportItemType',
        'VeROReportItemsType\,' =>
            'VeROReportItemsType',
        'VeROReportPacketStatusCodeType\,' =>
            'VeROReportPacketStatusCodeType',
        'VeROReportedItemDetailsType\,' =>
            'VeROReportedItemDetailsType',
        'VeROReportedItemType\,' =>
            'VeROReportedItemType',
        'VeROSiteDetailType\,' =>
            'VeROSiteDetailType',
        'VendorHostedPictureType\,' =>
            'VendorHostedPictureType',
        'VerifiedUserRequirementsType\,' =>
            'VerifiedUserRequirementsType',
        'WantItNowPostArrayType\,' =>
            'WantItNowPostArrayType',
        'WantItNowPostType\,' =>
            'WantItNowPostType',
        'WirelessCarrierIDCodeType\,' =>
            'WirelessCarrierIDCodeType',
        'XSLFileType\,' =>
            'XSLFileType',
        'eBxOptInPreferenceType\,' =>
            'eBxOptInPreferenceType',
	);

	public function __construct($wsdl = null, $options = array()) {
        foreach($this->classmap as $key => $value) {
            if(!isset($options['classmap'][$key])) {
            	$options['classmap'][$key] = $value;
            }
        }
        if(isset($options['headers'])) {
            $this->__setSoapHeaders($options['headers']);
        }
        parent::__construct($wsdl ? $wsdl : self::WSDL_FILE, $options);
	}

	/**
	 * AddDispute
	 *
	 * @param AddDisputeRequestType $AddDisputeRequest
	 * @return AddDisputeResponseType
	 */
	public function AddDispute(AddDisputeRequestType $AddDisputeRequest) {
        return $this->__soapCall(
            'AddDispute',
            array($AddDisputeRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddDisputeResponse
	 *
	 * @param AddDisputeResponseRequestType $AddDisputeResponseRequest
	 * @return AddDisputeResponseResponseType
	 */
	public function AddDisputeResponse(AddDisputeResponseRequestType $AddDisputeResponseRequest) {
        return $this->__soapCall(
            'AddDisputeResponse',
            array($AddDisputeResponseRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddItem
	 *
	 * @param AddItemRequestType $AddItemRequest
	 * @return AddItemResponseType
	 */
	public function AddItem(AddItemRequestType $AddItemRequest) {
        return $this->__soapCall(
            'AddItem',
            array($AddItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddLiveAuctionItem
	 *
	 * @param AddLiveAuctionItemRequestType $AddLiveAuctionItemRequest
	 * @return AddLiveAuctionItemResponseType
	 */
	public function AddLiveAuctionItem(AddLiveAuctionItemRequestType $AddLiveAuctionItemRequest) {
        return $this->__soapCall(
            'AddLiveAuctionItem',
            array($AddLiveAuctionItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddMemberMessageAAQToPartner
	 *
	 * @param AddMemberMessageAAQToPartnerRequestType $AddMemberMessageAAQToPartnerRequest
	 * @return AddMemberMessageAAQToPartnerResponseType
	 */
	public function AddMemberMessageAAQToPartner(AddMemberMessageAAQToPartnerRequestType $AddMemberMessageAAQToPartnerRequest) {
        return $this->__soapCall(
            'AddMemberMessageAAQToPartner',
            array($AddMemberMessageAAQToPartnerRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddMemberMessageRTQ
	 *
	 * @param AddMemberMessageRTQRequestType $AddMemberMessageRTQRequest
	 * @return AddMemberMessageRTQResponseType
	 */
	public function AddMemberMessageRTQ(AddMemberMessageRTQRequestType $AddMemberMessageRTQRequest) {
        return $this->__soapCall(
            'AddMemberMessageRTQ',
            array($AddMemberMessageRTQRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddMemberMessagesAAQToBidder
	 *
	 * @param AddMemberMessagesAAQToBidderRequestType $AddMemberMessagesAAQToBidderRequest
	 * @return AddMemberMessagesAAQToBidderResponseType
	 */
	public function AddMemberMessagesAAQToBidder(AddMemberMessagesAAQToBidderRequestType $AddMemberMessagesAAQToBidderRequest) {
        return $this->__soapCall(
            'AddMemberMessagesAAQToBidder',
            array($AddMemberMessagesAAQToBidderRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddOrder
	 *
	 * @param AddOrderRequestType $AddOrderRequest
	 * @return AddOrderResponseType
	 */
	public function AddOrder(AddOrderRequestType $AddOrderRequest) {
        return $this->__soapCall(
            'AddOrder',
            array($AddOrderRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddSecondChanceItem
	 *
	 * @param AddSecondChanceItemRequestType $AddSecondChanceItemRequest
	 * @return AddSecondChanceItemResponseType
	 */
	public function AddSecondChanceItem(AddSecondChanceItemRequestType $AddSecondChanceItemRequest) {
        return $this->__soapCall(
            'AddSecondChanceItem',
            array($AddSecondChanceItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddToItemDescription
	 *
	 * @param AddToItemDescriptionRequestType $AddToItemDescriptionRequest
	 * @return AddToItemDescriptionResponseType
	 */
	public function AddToItemDescription(AddToItemDescriptionRequestType $AddToItemDescriptionRequest) {
        return $this->__soapCall(
            'AddToItemDescription',
            array($AddToItemDescriptionRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddToWatchList
	 *
	 * @param AddToWatchListRequestType $AddToWatchListRequest
	 * @return AddToWatchListResponseType
	 */
	public function AddToWatchList(AddToWatchListRequestType $AddToWatchListRequest) {
        return $this->__soapCall(
            'AddToWatchList',
            array($AddToWatchListRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * AddTransactionConfirmationItem
	 *
	 * @param AddTransactionConfirmationItemRequestType $AddTransactionConfirmationItemRequest
	 * @return AddTransactionConfirmationItemResponseType
	 */
	public function AddTransactionConfirmationItem(AddTransactionConfirmationItemRequestType $AddTransactionConfirmationItemRequest) {
        return $this->__soapCall(
            'AddTransactionConfirmationItem',
            array($AddTransactionConfirmationItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ApproveLiveAuctionBidders
	 *
	 * @param ApproveLiveAuctionBiddersRequestType $ApproveLiveAuctionBiddersRequest
	 * @return ApproveLiveAuctionBiddersResponseType
	 */
	public function ApproveLiveAuctionBidders(ApproveLiveAuctionBiddersRequestType $ApproveLiveAuctionBiddersRequest) {
        return $this->__soapCall(
            'ApproveLiveAuctionBidders',
            array($ApproveLiveAuctionBiddersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * CompleteSale
	 *
	 * @param CompleteSaleRequestType $CompleteSaleRequest
	 * @return CompleteSaleResponseType
	 */
	public function CompleteSale(CompleteSaleRequestType $CompleteSaleRequest) {
        return $this->__soapCall(
            'CompleteSale',
            array($CompleteSaleRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * DeleteMyMessages
	 *
	 * @param DeleteMyMessagesRequestType $DeleteMyMessagesRequest
	 * @return DeleteMyMessagesResponseType
	 */
	public function DeleteMyMessages(DeleteMyMessagesRequestType $DeleteMyMessagesRequest) {
        return $this->__soapCall(
            'DeleteMyMessages',
            array($DeleteMyMessagesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * EndItem
	 *
	 * @param EndItemRequestType $EndItemRequest
	 * @return EndItemResponseType
	 */
	public function EndItem(EndItemRequestType $EndItemRequest) {
        return $this->__soapCall(
            'EndItem',
            array($EndItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * FetchToken
	 *
	 * @param FetchTokenRequestType $FetchTokenRequest
	 * @return FetchTokenResponseType
	 */
	public function FetchToken(FetchTokenRequestType $FetchTokenRequest) {
        return $this->__soapCall(
            'FetchToken',
            array($FetchTokenRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetAccount
	 *
	 * @param GetAccountRequestType $GetAccountRequest
	 * @return GetAccountResponseType
	 */
	public function GetAccount(GetAccountRequestType $GetAccountRequest) {
        return $this->__soapCall(
            'GetAccount',
            array($GetAccountRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetAdFormatLeads
	 *
	 * @param GetAdFormatLeadsRequestType $GetAdFormatLeadsRequest
	 * @return GetAdFormatLeadsResponseType
	 */
	public function GetAdFormatLeads(GetAdFormatLeadsRequestType $GetAdFormatLeadsRequest) {
        return $this->__soapCall(
            'GetAdFormatLeads',
            array($GetAdFormatLeadsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetAllBidders
	 *
	 * @param GetAllBiddersRequestType $GetAllBiddersRequest
	 * @return GetAllBiddersResponseType
	 */
	public function GetAllBidders(GetAllBiddersRequestType $GetAllBiddersRequest) {
        return $this->__soapCall(
            'GetAllBidders',
            array($GetAllBiddersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetApiAccessRules
	 *
	 * @param GetApiAccessRulesRequestType $GetApiAccessRulesRequest
	 * @return GetApiAccessRulesResponseType
	 */
	public function GetApiAccessRules(GetApiAccessRulesRequestType $GetApiAccessRulesRequest) {
        return $this->__soapCall(
            'GetApiAccessRules',
            array($GetApiAccessRulesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetAttributesCS
	 *
	 * @param GetAttributesCSRequestType $GetAttributesCSRequest
	 * @return GetAttributesCSResponseType
	 */
	public function GetAttributesCS(GetAttributesCSRequestType $GetAttributesCSRequest) {
        return $this->__soapCall(
            'GetAttributesCS',
            array($GetAttributesCSRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetAttributesXSL
	 *
	 * @param GetAttributesXSLRequestType $GetAttributesXSLRequest
	 * @return GetAttributesXSLResponseType
	 */
	public function GetAttributesXSL(GetAttributesXSLRequestType $GetAttributesXSLRequest) {
        return $this->__soapCall(
            'GetAttributesXSL',
            array($GetAttributesXSLRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetBestOffers
	 *
	 * @param GetBestOffersRequestType $GetBestOffersRequest
	 * @return GetBestOffersResponseType
	 */
	public function GetBestOffers(GetBestOffersRequestType $GetBestOffersRequest) {
        return $this->__soapCall(
            'GetBestOffers',
            array($GetBestOffersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetBidderList
	 *
	 * @param GetBidderListRequestType $GetBidderListRequest
	 * @return GetBidderListResponseType
	 */
	public function GetBidderList(GetBidderListRequestType $GetBidderListRequest) {
        return $this->__soapCall(
            'GetBidderList',
            array($GetBidderListRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCategories
	 *
	 * @param GetCategoriesRequestType $GetCategoriesRequest
	 * @return GetCategoriesResponseType
	 */
	public function GetCategories(GetCategoriesRequestType $GetCategoriesRequest) {
        return $this->__soapCall(
            'GetCategories',
            array($GetCategoriesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCategory2CS
	 *
	 * @param GetCategory2CSRequestType $GetCategory2CSRequest
	 * @return GetCategory2CSResponseType
	 */
	public function GetCategory2CS(GetCategory2CSRequestType $GetCategory2CSRequest) {
        return $this->__soapCall(
            'GetCategory2CS',
            array($GetCategory2CSRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCategory2FinanceOffer
	 *
	 * @param GetCategory2FinanceOfferRequestType $GetCategory2FinanceOfferRequest
	 * @return GetCategory2FinanceOfferResponseType
	 */
	public function GetCategory2FinanceOffer(GetCategory2FinanceOfferRequestType $GetCategory2FinanceOfferRequest) {
        return $this->__soapCall(
            'GetCategory2FinanceOffer',
            array($GetCategory2FinanceOfferRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCategoryFeatures
	 *
	 * @param GetCategoryFeaturesRequestType $GetCategoryFeaturesRequest
	 * @return GetCategoryFeaturesResponseType
	 */
	public function GetCategoryFeatures(GetCategoryFeaturesRequestType $GetCategoryFeaturesRequest) {
        return $this->__soapCall(
            'GetCategoryFeatures',
            array($GetCategoryFeaturesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCategoryListings
	 *
	 * @param GetCategoryListingsRequestType $GetCategoryListingsRequest
	 * @return GetCategoryListingsResponseType
	 */
	public function GetCategoryListings(GetCategoryListingsRequestType $GetCategoryListingsRequest) {
        return $this->__soapCall(
            'GetCategoryListings',
            array($GetCategoryListingsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCategoryMappings
	 *
	 * @param GetCategoryMappingsRequestType $GetCategoryMappingsRequest
	 * @return GetCategoryMappingsResponseType
	 */
	public function GetCategoryMappings(GetCategoryMappingsRequestType $GetCategoryMappingsRequest) {
        return $this->__soapCall(
            'GetCategoryMappings',
            array($GetCategoryMappingsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetChallengeToken
	 *
	 * @param GetChallengeTokenRequestType $GetChallengeTokenRequest
	 * @return GetChallengeTokenResponseType
	 */
	public function GetChallengeToken(GetChallengeTokenRequestType $GetChallengeTokenRequest) {
        return $this->__soapCall(
            'GetChallengeToken',
            array($GetChallengeTokenRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCharities
	 *
	 * @param GetCharitiesRequestType $GetCharitiesRequest
	 * @return GetCharitiesResponseType
	 */
	public function GetCharities(GetCharitiesRequestType $GetCharitiesRequest) {
        return $this->__soapCall(
            'GetCharities',
            array($GetCharitiesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetContextualKeywords
	 *
	 * @param GetContextualKeywordsRequestType $GetContextualKeywordsRequest
	 * @return GetContextualKeywordsResponseType
	 */
	public function GetContextualKeywords(GetContextualKeywordsRequestType $GetContextualKeywordsRequest) {
        return $this->__soapCall(
            'GetContextualKeywords',
            array($GetContextualKeywordsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetCrossPromotions
	 *
	 * @param GetCrossPromotionsRequestType $GetCrossPromotionsRequest
	 * @return GetCrossPromotionsResponseType
	 */
	public function GetCrossPromotions(GetCrossPromotionsRequestType $GetCrossPromotionsRequest) {
        return $this->__soapCall(
            'GetCrossPromotions',
            array($GetCrossPromotionsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetDescriptionTemplates
	 *
	 * @param GetDescriptionTemplatesRequestType $GetDescriptionTemplatesRequest
	 * @return GetDescriptionTemplatesResponseType
	 */
	public function GetDescriptionTemplates(GetDescriptionTemplatesRequestType $GetDescriptionTemplatesRequest) {
        return $this->__soapCall(
            'GetDescriptionTemplates',
            array($GetDescriptionTemplatesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetDispute
	 *
	 * @param GetDisputeRequestType $GetDisputeRequest
	 * @return GetDisputeResponseType
	 */
	public function GetDispute(GetDisputeRequestType $GetDisputeRequest) {
        return $this->__soapCall(
            'GetDispute',
            array($GetDisputeRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetFeedback
	 *
	 * @param GetFeedbackRequestType $GetFeedbackRequest
	 * @return GetFeedbackResponseType
	 */
	public function GetFeedback(GetFeedbackRequestType $GetFeedbackRequest) {
        return $this->__soapCall(
            'GetFeedback',
            array($GetFeedbackRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetFinanceOffers
	 *
	 * @param GetFinanceOffersRequestType $GetFinanceOffersRequest
	 * @return GetFinanceOffersResponseType
	 */
	public function GetFinanceOffers(GetFinanceOffersRequestType $GetFinanceOffersRequest) {
        return $this->__soapCall(
            'GetFinanceOffers',
            array($GetFinanceOffersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetHighBidders
	 *
	 * @param GetHighBiddersRequestType $GetHighBiddersRequest
	 * @return GetHighBiddersResponseType
	 */
	public function GetHighBidders(GetHighBiddersRequestType $GetHighBiddersRequest) {
        return $this->__soapCall(
            'GetHighBidders',
            array($GetHighBiddersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetItem
	 *
	 * @param GetItemRequestType $GetItemRequest
	 * @return GetItemResponseType
	 */
	public function GetItem(GetItemRequestType $GetItemRequest) {
        return $this->__soapCall(
            'GetItem',
            array($GetItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetItemRecommendations
	 *
	 * @param GetItemRecommendationsRequestType $GetItemRecommendationsRequest
	 * @return GetItemRecommendationsResponseType
	 */
	public function GetItemRecommendations(GetItemRecommendationsRequestType $GetItemRecommendationsRequest) {
        return $this->__soapCall(
            'GetItemRecommendations',
            array($GetItemRecommendationsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetItemShipping
	 *
	 * @param GetItemShippingRequestType $GetItemShippingRequest
	 * @return GetItemShippingResponseType
	 */
	public function GetItemShipping(GetItemShippingRequestType $GetItemShippingRequest) {
        return $this->__soapCall(
            'GetItemShipping',
            array($GetItemShippingRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetItemTransactions
	 *
	 * @param GetItemTransactionsRequestType $GetItemTransactionsRequest
	 * @return GetItemTransactionsResponseType
	 */
	public function GetItemTransactions(GetItemTransactionsRequestType $GetItemTransactionsRequest) {
        return $this->__soapCall(
            'GetItemTransactions',
            array($GetItemTransactionsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetItemsAwaitingFeedback
	 *
	 * @param GetItemsAwaitingFeedbackRequestType $GetItemsAwaitingFeedbackRequest
	 * @return GetItemsAwaitingFeedbackResponseType
	 */
	public function GetItemsAwaitingFeedback(GetItemsAwaitingFeedbackRequestType $GetItemsAwaitingFeedbackRequest) {
        return $this->__soapCall(
            'GetItemsAwaitingFeedback',
            array($GetItemsAwaitingFeedbackRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetLiveAuctionBidders
	 *
	 * @param GetLiveAuctionBiddersRequestType $GetLiveAuctionBiddersRequest
	 * @return GetLiveAuctionBiddersResponseType
	 */
	public function GetLiveAuctionBidders(GetLiveAuctionBiddersRequestType $GetLiveAuctionBiddersRequest) {
        return $this->__soapCall(
            'GetLiveAuctionBidders',
            array($GetLiveAuctionBiddersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetLiveAuctionCatalogDetails
	 *
	 * @param GetLiveAuctionCatalogDetailsRequestType $GetLiveAuctionCatalogDetailsRequest
	 * @return GetLiveAuctionCatalogDetailsResponseType
	 */
	public function GetLiveAuctionCatalogDetails(GetLiveAuctionCatalogDetailsRequestType $GetLiveAuctionCatalogDetailsRequest) {
        return $this->__soapCall(
            'GetLiveAuctionCatalogDetails',
            array($GetLiveAuctionCatalogDetailsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetMemberMessages
	 *
	 * @param GetMemberMessagesRequestType $GetMemberMessagesRequest
	 * @return GetMemberMessagesResponseType
	 */
	public function GetMemberMessages(GetMemberMessagesRequestType $GetMemberMessagesRequest) {
        return $this->__soapCall(
            'GetMemberMessages',
            array($GetMemberMessagesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetMyMessages
	 *
	 * @param GetMyMessagesRequestType $GetMyMessagesRequest
	 * @return GetMyMessagesResponseType
	 */
	public function GetMyMessages(GetMyMessagesRequestType $GetMyMessagesRequest) {
        return $this->__soapCall(
            'GetMyMessages',
            array($GetMyMessagesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetMyeBay
	 *
	 * @param GetMyeBayRequestType $GetMyeBayRequest
	 * @return GetMyeBayResponseType
	 */
	public function GetMyeBay(GetMyeBayRequestType $GetMyeBayRequest) {
        return $this->__soapCall(
            'GetMyeBay',
            array($GetMyeBayRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetMyeBayBuying
	 *
	 * @param GetMyeBayBuyingRequestType $GetMyeBayBuyingRequest
	 * @return GetMyeBayBuyingResponseType
	 */
	public function GetMyeBayBuying(GetMyeBayBuyingRequestType $GetMyeBayBuyingRequest) {
        return $this->__soapCall(
            'GetMyeBayBuying',
            array($GetMyeBayBuyingRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetMyeBayReminders
	 *
	 * @param GetMyeBayRemindersRequestType $GetMyeBayRemindersRequest
	 * @return GetMyeBayRemindersResponseType
	 */
	public function GetMyeBayReminders(GetMyeBayRemindersRequestType $GetMyeBayRemindersRequest) {
        return $this->__soapCall(
            'GetMyeBayReminders',
            array($GetMyeBayRemindersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetMyeBaySelling
	 *
	 * @param GetMyeBaySellingRequestType $GetMyeBaySellingRequest
	 * @return GetMyeBaySellingResponseType
	 */
	public function GetMyeBaySelling(GetMyeBaySellingRequestType $GetMyeBaySellingRequest) {
        return $this->__soapCall(
            'GetMyeBaySelling',
            array($GetMyeBaySellingRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetNotificationPreferences
	 *
	 * @param GetNotificationPreferencesRequestType $GetNotificationPreferencesRequest
	 * @return GetNotificationPreferencesResponseType
	 */
	public function GetNotificationPreferences(GetNotificationPreferencesRequestType $GetNotificationPreferencesRequest) {
        return $this->__soapCall(
            'GetNotificationPreferences',
            array($GetNotificationPreferencesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetNotificationsUsage
	 *
	 * @param GetNotificationsUsageRequestType $GetNotificationsUsageRequest
	 * @return GetNotificationsUsageResponseType
	 */
	public function GetNotificationsUsage(GetNotificationsUsageRequestType $GetNotificationsUsageRequest) {
        return $this->__soapCall(
            'GetNotificationsUsage',
            array($GetNotificationsUsageRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetOrderTransactions
	 *
	 * @param GetOrderTransactionsRequestType $GetOrderTransactionsRequest
	 * @return GetOrderTransactionsResponseType
	 */
	public function GetOrderTransactions(GetOrderTransactionsRequestType $GetOrderTransactionsRequest) {
        return $this->__soapCall(
            'GetOrderTransactions',
            array($GetOrderTransactionsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetOrders
	 *
	 * @param GetOrdersRequestType $GetOrdersRequest
	 * @return GetOrdersResponseType
	 */
	public function GetOrders(GetOrdersRequestType $GetOrdersRequest) {
        return $this->__soapCall(
            'GetOrders',
            array($GetOrdersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetPictureManagerDetails
	 *
	 * @param GetPictureManagerDetailsRequestType $GetPictureManagerDetailsRequest
	 * @return GetPictureManagerDetailsResponseType
	 */
	public function GetPictureManagerDetails(GetPictureManagerDetailsRequestType $GetPictureManagerDetailsRequest) {
        return $this->__soapCall(
            'GetPictureManagerDetails',
            array($GetPictureManagerDetailsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetPictureManagerOptions
	 *
	 * @param GetPictureManagerOptionsRequestType $GetPictureManagerOptionsRequest
	 * @return GetPictureManagerOptionsResponseType
	 */
	public function GetPictureManagerOptions(GetPictureManagerOptionsRequestType $GetPictureManagerOptionsRequest) {
        return $this->__soapCall(
            'GetPictureManagerOptions',
            array($GetPictureManagerOptionsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetPopularKeywords
	 *
	 * @param GetPopularKeywordsRequestType $GetPopularKeywordsRequest
	 * @return GetPopularKeywordsResponseType
	 */
	public function GetPopularKeywords(GetPopularKeywordsRequestType $GetPopularKeywordsRequest) {
        return $this->__soapCall(
            'GetPopularKeywords',
            array($GetPopularKeywordsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetProductFamilyMembers
	 *
	 * @param GetProductFamilyMembersRequestType $GetProductFamilyMembersRequest
	 * @return GetProductFamilyMembersResponseType
	 */
	public function GetProductFamilyMembers(GetProductFamilyMembersRequestType $GetProductFamilyMembersRequest) {
        return $this->__soapCall(
            'GetProductFamilyMembers',
            array($GetProductFamilyMembersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetProductFinder
	 *
	 * @param GetProductFinderRequestType $GetProductFinderRequest
	 * @return GetProductFinderResponseType
	 */
	public function GetProductFinder(GetProductFinderRequestType $GetProductFinderRequest) {
        return $this->__soapCall(
            'GetProductFinder',
            array($GetProductFinderRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetProductFinderXSL
	 *
	 * @param GetProductFinderXSLRequestType $GetProductFinderXSLRequest
	 * @return GetProductFinderXSLResponseType
	 */
	public function GetProductFinderXSL(GetProductFinderXSLRequestType $GetProductFinderXSLRequest) {
        return $this->__soapCall(
            'GetProductFinderXSL',
            array($GetProductFinderXSLRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetProductSearchPage
	 *
	 * @param GetProductSearchPageRequestType $GetProductSearchPageRequest
	 * @return GetProductSearchPageResponseType
	 */
	public function GetProductSearchPage(GetProductSearchPageRequestType $GetProductSearchPageRequest) {
        return $this->__soapCall(
            'GetProductSearchPage',
            array($GetProductSearchPageRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetProductSearchResults
	 *
	 * @param GetProductSearchResultsRequestType $GetProductSearchResultsRequest
	 * @return GetProductSearchResultsResponseType
	 */
	public function GetProductSearchResults(GetProductSearchResultsRequestType $GetProductSearchResultsRequest) {
        return $this->__soapCall(
            'GetProductSearchResults',
            array($GetProductSearchResultsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetProductSellingPages
	 *
	 * @param GetProductSellingPagesRequestType $GetProductSellingPagesRequest
	 * @return GetProductSellingPagesResponseType
	 */
	public function GetProductSellingPages(GetProductSellingPagesRequestType $GetProductSellingPagesRequest) {
        return $this->__soapCall(
            'GetProductSellingPages',
            array($GetProductSellingPagesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetPromotionRules
	 *
	 * @param GetPromotionRulesRequestType $GetPromotionRulesRequest
	 * @return GetPromotionRulesResponseType
	 */
	public function GetPromotionRules(GetPromotionRulesRequestType $GetPromotionRulesRequest) {
        return $this->__soapCall(
            'GetPromotionRules',
            array($GetPromotionRulesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetRecommendations
	 *
	 * @param GetRecommendationsRequestType $GetRecommendationsRequest
	 * @return GetRecommendationsResponseType
	 */
	public function GetRecommendations(GetRecommendationsRequestType $GetRecommendationsRequest) {
        return $this->__soapCall(
            'GetRecommendations',
            array($GetRecommendationsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetReturnURL
	 *
	 * @param GetReturnURLRequestType $GetReturnURLRequest
	 * @return GetReturnURLResponseType
	 */
	public function GetReturnURL(GetReturnURLRequestType $GetReturnURLRequest) {
        return $this->__soapCall(
            'GetReturnURL',
            array($GetReturnURLRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetRuName
	 *
	 * @param GetRuNameRequestType $GetRuNameRequest
	 * @return GetRuNameResponseType
	 */
	public function GetRuName(GetRuNameRequestType $GetRuNameRequest) {
        return $this->__soapCall(
            'GetRuName',
            array($GetRuNameRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSearchResults
	 *
	 * @param GetSearchResultsRequestType $GetSearchResultsRequest
	 * @return GetSearchResultsResponseType
	 */
	public function GetSearchResults(GetSearchResultsRequestType $GetSearchResultsRequest) {
        return $this->__soapCall(
            'GetSearchResults',
            array($GetSearchResultsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSearchResultsExpress
	 *
	 * @param GetSearchResultsExpressRequestType $GetSearchResultsExpressRequest
	 * @return GetSearchResultsExpressResponseType
	 */
	public function GetSearchResultsExpress(GetSearchResultsExpressRequestType $GetSearchResultsExpressRequest) {
        return $this->__soapCall(
            'GetSearchResultsExpress',
            array($GetSearchResultsExpressRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSellerEvents
	 *
	 * @param GetSellerEventsRequestType $GetSellerEventsRequest
	 * @return GetSellerEventsResponseType
	 */
	public function GetSellerEvents(GetSellerEventsRequestType $GetSellerEventsRequest) {
        return $this->__soapCall(
            'GetSellerEvents',
            array($GetSellerEventsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSellerList
	 *
	 * @param GetSellerListRequestType $GetSellerListRequest
	 * @return GetSellerListResponseType
	 */
	public function GetSellerList(GetSellerListRequestType $GetSellerListRequest) {
        return $this->__soapCall(
            'GetSellerList',
            array($GetSellerListRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSellerPayments
	 *
	 * @param GetSellerPaymentsRequestType $GetSellerPaymentsRequest
	 * @return GetSellerPaymentsResponseType
	 */
	public function GetSellerPayments(GetSellerPaymentsRequestType $GetSellerPaymentsRequest) {
        return $this->__soapCall(
            'GetSellerPayments',
            array($GetSellerPaymentsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSellerTransactions
	 *
	 * @param GetSellerTransactionsRequestType $GetSellerTransactionsRequest
	 * @return GetSellerTransactionsResponseType
	 */
	public function GetSellerTransactions(GetSellerTransactionsRequestType $GetSellerTransactionsRequest) {
        return $this->__soapCall(
            'GetSellerTransactions',
            array($GetSellerTransactionsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetStore
	 *
	 * @param GetStoreRequestType $GetStoreRequest
	 * @return GetStoreResponseType
	 */
	public function GetStore(GetStoreRequestType $GetStoreRequest) {
        return $this->__soapCall(
            'GetStore',
            array($GetStoreRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetStoreCategoryUpdateStatus
	 *
	 * @param GetStoreCategoryUpdateStatusRequestType $GetStoreCategoryUpdateStatusRequest
	 * @return GetStoreCategoryUpdateStatusResponseType
	 */
	public function GetStoreCategoryUpdateStatus(GetStoreCategoryUpdateStatusRequestType $GetStoreCategoryUpdateStatusRequest) {
        return $this->__soapCall(
            'GetStoreCategoryUpdateStatus',
            array($GetStoreCategoryUpdateStatusRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetStoreCustomPage
	 *
	 * @param GetStoreCustomPageRequestType $GetStoreCustomPageRequest
	 * @return GetStoreCustomPageResponseType
	 */
	public function GetStoreCustomPage(GetStoreCustomPageRequestType $GetStoreCustomPageRequest) {
        return $this->__soapCall(
            'GetStoreCustomPage',
            array($GetStoreCustomPageRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetStoreOptions
	 *
	 * @param GetStoreOptionsRequestType $GetStoreOptionsRequest
	 * @return GetStoreOptionsResponseType
	 */
	public function GetStoreOptions(GetStoreOptionsRequestType $GetStoreOptionsRequest) {
        return $this->__soapCall(
            'GetStoreOptions',
            array($GetStoreOptionsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetStorePreferences
	 *
	 * @param GetStorePreferencesRequestType $GetStorePreferencesRequest
	 * @return GetStorePreferencesResponseType
	 */
	public function GetStorePreferences(GetStorePreferencesRequestType $GetStorePreferencesRequest) {
        return $this->__soapCall(
            'GetStorePreferences',
            array($GetStorePreferencesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetSuggestedCategories
	 *
	 * @param GetSuggestedCategoriesRequestType $GetSuggestedCategoriesRequest
	 * @return GetSuggestedCategoriesResponseType
	 */
	public function GetSuggestedCategories(GetSuggestedCategoriesRequestType $GetSuggestedCategoriesRequest) {
        return $this->__soapCall(
            'GetSuggestedCategories',
            array($GetSuggestedCategoriesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetTaxTable
	 *
	 * @param GetTaxTableRequestType $GetTaxTableRequest
	 * @return GetTaxTableResponseType
	 */
	public function GetTaxTable(GetTaxTableRequestType $GetTaxTableRequest) {
        return $this->__soapCall(
            'GetTaxTable',
            array($GetTaxTableRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetUser
	 *
	 * @param GetUserRequestType $GetUserRequest
	 * @return GetUserResponseType
	 */
	public function GetUser(GetUserRequestType $GetUserRequest) {
        return $this->__soapCall(
            'GetUser',
            array($GetUserRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetUserContactDetails
	 *
	 * @param GetUserContactDetailsRequestType $GetUserContactDetailsRequest
	 * @return GetUserContactDetailsResponseType
	 */
	public function GetUserContactDetails(GetUserContactDetailsRequestType $GetUserContactDetailsRequest) {
        return $this->__soapCall(
            'GetUserContactDetails',
            array($GetUserContactDetailsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetUserDisputes
	 *
	 * @param GetUserDisputesRequestType $GetUserDisputesRequest
	 * @return GetUserDisputesResponseType
	 */
	public function GetUserDisputes(GetUserDisputesRequestType $GetUserDisputesRequest) {
        return $this->__soapCall(
            'GetUserDisputes',
            array($GetUserDisputesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetUserPreferences
	 *
	 * @param GetUserPreferencesRequestType $GetUserPreferencesRequest
	 * @return GetUserPreferencesResponseType
	 */
	public function GetUserPreferences(GetUserPreferencesRequestType $GetUserPreferencesRequest) {
        return $this->__soapCall(
            'GetUserPreferences',
            array($GetUserPreferencesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetVeROReasonCodeDetails
	 *
	 * @param GetVeROReasonCodeDetailsRequestType $GetVeROReasonCodeDetailsRequest
	 * @return GetVeROReasonCodeDetailsResponseType
	 */
	public function GetVeROReasonCodeDetails(GetVeROReasonCodeDetailsRequestType $GetVeROReasonCodeDetailsRequest) {
        return $this->__soapCall(
            'GetVeROReasonCodeDetails',
            array($GetVeROReasonCodeDetailsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetVeROReportStatus
	 *
	 * @param GetVeROReportStatusRequestType $GetVeROReportStatusRequest
	 * @return GetVeROReportStatusResponseType
	 */
	public function GetVeROReportStatus(GetVeROReportStatusRequestType $GetVeROReportStatusRequest) {
        return $this->__soapCall(
            'GetVeROReportStatus',
            array($GetVeROReportStatusRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetWantItNowPost
	 *
	 * @param GetWantItNowPostRequestType $GetWantItNowPostRequest
	 * @return GetWantItNowPostResponseType
	 */
	public function GetWantItNowPost(GetWantItNowPostRequestType $GetWantItNowPostRequest) {
        return $this->__soapCall(
            'GetWantItNowPost',
            array($GetWantItNowPostRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GetWantItNowSearchResults
	 *
	 * @param GetWantItNowSearchResultsRequestType $GetWantItNowSearchResultsRequest
	 * @return GetWantItNowSearchResultsResponseType
	 */
	public function GetWantItNowSearchResults(GetWantItNowSearchResultsRequestType $GetWantItNowSearchResultsRequest) {
        return $this->__soapCall(
            'GetWantItNowSearchResults',
            array($GetWantItNowSearchResultsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GeteBayDetails
	 *
	 * @param GeteBayDetailsRequestType $GeteBayDetailsRequest
	 * @return GeteBayDetailsResponseType
	 */
	public function GeteBayDetails(GeteBayDetailsRequestType $GeteBayDetailsRequest) {
        return $this->__soapCall(
            'GeteBayDetails',
            array($GeteBayDetailsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * GeteBayOfficialTime
	 *
	 * @param GeteBayOfficialTimeRequestType $GeteBayOfficialTimeRequest
	 * @return GeteBayOfficialTimeResponseType
	 */
	public function GeteBayOfficialTime(GeteBayOfficialTimeRequestType $GeteBayOfficialTimeRequest) {
        return $this->__soapCall(
            'GeteBayOfficialTime',
            array($GeteBayOfficialTimeRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * IssueRefund
	 *
	 * @param IssueRefundRequestType $IssueRefundRequest
	 * @return IssueRefundResponseType
	 */
	public function IssueRefund(IssueRefundRequestType $IssueRefundRequest) {
        return $this->__soapCall(
            'IssueRefund',
            array($IssueRefundRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * LeaveFeedback
	 *
	 * @param LeaveFeedbackRequestType $LeaveFeedbackRequest
	 * @return LeaveFeedbackResponseType
	 */
	public function LeaveFeedback(LeaveFeedbackRequestType $LeaveFeedbackRequest) {
        return $this->__soapCall(
            'LeaveFeedback',
            array($LeaveFeedbackRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * PlaceOffer
	 *
	 * @param PlaceOfferRequestType $PlaceOfferRequest
	 * @return PlaceOfferResponseType
	 */
	public function PlaceOffer(PlaceOfferRequestType $PlaceOfferRequest) {
        return $this->__soapCall(
            'PlaceOffer',
            array($PlaceOfferRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * RelistItem
	 *
	 * @param RelistItemRequestType $RelistItemRequest
	 * @return RelistItemResponseType
	 */
	public function RelistItem(RelistItemRequestType $RelistItemRequest) {
        return $this->__soapCall(
            'RelistItem',
            array($RelistItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * RemoveFromWatchList
	 *
	 * @param RemoveFromWatchListRequestType $RemoveFromWatchListRequest
	 * @return RemoveFromWatchListResponseType
	 */
	public function RemoveFromWatchList(RemoveFromWatchListRequestType $RemoveFromWatchListRequest) {
        return $this->__soapCall(
            'RemoveFromWatchList',
            array($RemoveFromWatchListRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * RespondToBestOffer
	 *
	 * @param RespondToBestOfferRequestType $RespondToBestOfferRequest
	 * @return RespondToBestOfferResponseType
	 */
	public function RespondToBestOffer(RespondToBestOfferRequestType $RespondToBestOfferRequest) {
        return $this->__soapCall(
            'RespondToBestOffer',
            array($RespondToBestOfferRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * RespondToFeedback
	 *
	 * @param RespondToFeedbackRequestType $RespondToFeedbackRequest
	 * @return RespondToFeedbackResponseType
	 */
	public function RespondToFeedback(RespondToFeedbackRequestType $RespondToFeedbackRequest) {
        return $this->__soapCall(
            'RespondToFeedback',
            array($RespondToFeedbackRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * RespondToWantItNowPost
	 *
	 * @param RespondToWantItNowPostRequestType $RespondToWantItNowPostRequest
	 * @return RespondToWantItNowPostResponseType
	 */
	public function RespondToWantItNowPost(RespondToWantItNowPostRequestType $RespondToWantItNowPostRequest) {
        return $this->__soapCall(
            'RespondToWantItNowPost',
            array($RespondToWantItNowPostRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ReviseCheckoutStatus
	 *
	 * @param ReviseCheckoutStatusRequestType $ReviseCheckoutStatusRequest
	 * @return ReviseCheckoutStatusResponseType
	 */
	public function ReviseCheckoutStatus(ReviseCheckoutStatusRequestType $ReviseCheckoutStatusRequest) {
        return $this->__soapCall(
            'ReviseCheckoutStatus',
            array($ReviseCheckoutStatusRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ReviseItem
	 *
	 * @param ReviseItemRequestType $ReviseItemRequest
	 * @return ReviseItemResponseType
	 */
	public function ReviseItem(ReviseItemRequestType $ReviseItemRequest) {
        return $this->__soapCall(
            'ReviseItem',
            array($ReviseItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ReviseLiveAuctionItem
	 *
	 * @param ReviseLiveAuctionItemRequestType $ReviseLiveAuctionItemRequest
	 * @return ReviseLiveAuctionItemResponseType
	 */
	public function ReviseLiveAuctionItem(ReviseLiveAuctionItemRequestType $ReviseLiveAuctionItemRequest) {
        return $this->__soapCall(
            'ReviseLiveAuctionItem',
            array($ReviseLiveAuctionItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ReviseMyMessages
	 *
	 * @param ReviseMyMessagesRequestType $ReviseMyMessagesRequest
	 * @return ReviseMyMessagesResponseType
	 */
	public function ReviseMyMessages(ReviseMyMessagesRequestType $ReviseMyMessagesRequest) {
        return $this->__soapCall(
            'ReviseMyMessages',
            array($ReviseMyMessagesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ReviseMyMessagesFolders
	 *
	 * @param ReviseMyMessagesFoldersRequestType $ReviseMyMessagesFoldersRequest
	 * @return ReviseMyMessagesFoldersResponseType
	 */
	public function ReviseMyMessagesFolders(ReviseMyMessagesFoldersRequestType $ReviseMyMessagesFoldersRequest) {
        return $this->__soapCall(
            'ReviseMyMessagesFolders',
            array($ReviseMyMessagesFoldersRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SellerReverseDispute
	 *
	 * @param SellerReverseDisputeRequestType $SellerReverseDisputeRequest
	 * @return SellerReverseDisputeResponseType
	 */
	public function SellerReverseDispute(SellerReverseDisputeRequestType $SellerReverseDisputeRequest) {
        return $this->__soapCall(
            'SellerReverseDispute',
            array($SellerReverseDisputeRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SendInvoice
	 *
	 * @param SendInvoiceRequestType $SendInvoiceRequest
	 * @return SendInvoiceResponseType
	 */
	public function SendInvoice(SendInvoiceRequestType $SendInvoiceRequest) {
        return $this->__soapCall(
            'SendInvoice',
            array($SendInvoiceRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetNotificationPreferences
	 *
	 * @param SetNotificationPreferencesRequestType $SetNotificationPreferencesRequest
	 * @return SetNotificationPreferencesResponseType
	 */
	public function SetNotificationPreferences(SetNotificationPreferencesRequestType $SetNotificationPreferencesRequest) {
        return $this->__soapCall(
            'SetNotificationPreferences',
            array($SetNotificationPreferencesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetPictureManagerDetails
	 *
	 * @param SetPictureManagerDetailsRequestType $SetPictureManagerDetailsRequest
	 * @return SetPictureManagerDetailsResponseType
	 */
	public function SetPictureManagerDetails(SetPictureManagerDetailsRequestType $SetPictureManagerDetailsRequest) {
        return $this->__soapCall(
            'SetPictureManagerDetails',
            array($SetPictureManagerDetailsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetPromotionRules
	 *
	 * @param SetPromotionRulesRequestType $SetPromotionRulesRequest
	 * @return SetPromotionRulesResponseType
	 */
	public function SetPromotionRules(SetPromotionRulesRequestType $SetPromotionRulesRequest) {
        return $this->__soapCall(
            'SetPromotionRules',
            array($SetPromotionRulesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetReturnURL
	 *
	 * @param SetReturnURLRequestType $SetReturnURLRequest
	 * @return SetReturnURLResponseType
	 */
	public function SetReturnURL(SetReturnURLRequestType $SetReturnURLRequest) {
        return $this->__soapCall(
            'SetReturnURL',
            array($SetReturnURLRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetStore
	 *
	 * @param SetStoreRequestType $SetStoreRequest
	 * @return SetStoreResponseType
	 */
	public function SetStore(SetStoreRequestType $SetStoreRequest) {
        return $this->__soapCall(
            'SetStore',
            array($SetStoreRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetStoreCategories
	 *
	 * @param SetStoreCategoriesRequestType $SetStoreCategoriesRequest
	 * @return SetStoreCategoriesResponseType
	 */
	public function SetStoreCategories(SetStoreCategoriesRequestType $SetStoreCategoriesRequest) {
        return $this->__soapCall(
            'SetStoreCategories',
            array($SetStoreCategoriesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetStoreCustomPage
	 *
	 * @param SetStoreCustomPageRequestType $SetStoreCustomPageRequest
	 * @return SetStoreCustomPageResponseType
	 */
	public function SetStoreCustomPage(SetStoreCustomPageRequestType $SetStoreCustomPageRequest) {
        return $this->__soapCall(
            'SetStoreCustomPage',
            array($SetStoreCustomPageRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetStorePreferences
	 *
	 * @param SetStorePreferencesRequestType $SetStorePreferencesRequest
	 * @return SetStorePreferencesResponseType
	 */
	public function SetStorePreferences(SetStorePreferencesRequestType $SetStorePreferencesRequest) {
        return $this->__soapCall(
            'SetStorePreferences',
            array($SetStorePreferencesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetTaxTable
	 *
	 * @param SetTaxTableRequestType $SetTaxTableRequest
	 * @return SetTaxTableResponseType
	 */
	public function SetTaxTable(SetTaxTableRequestType $SetTaxTableRequest) {
        return $this->__soapCall(
            'SetTaxTable',
            array($SetTaxTableRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetUserNotes
	 *
	 * @param SetUserNotesRequestType $SetUserNotesRequest
	 * @return SetUserNotesResponseType
	 */
	public function SetUserNotes(SetUserNotesRequestType $SetUserNotesRequest) {
        return $this->__soapCall(
            'SetUserNotes',
            array($SetUserNotesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * SetUserPreferences
	 *
	 * @param SetUserPreferencesRequestType $SetUserPreferencesRequest
	 * @return SetUserPreferencesResponseType
	 */
	public function SetUserPreferences(SetUserPreferencesRequestType $SetUserPreferencesRequest) {
        return $this->__soapCall(
            'SetUserPreferences',
            array($SetUserPreferencesRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ValidateChallengeInput
	 *
	 * @param ValidateChallengeInputRequestType $ValidateChallengeInputRequest
	 * @return ValidateChallengeInputResponseType
	 */
	public function ValidateChallengeInput(ValidateChallengeInputRequestType $ValidateChallengeInputRequest) {
        return $this->__soapCall(
            'ValidateChallengeInput',
            array($ValidateChallengeInputRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * ValidateTestUserRegistration
	 *
	 * @param ValidateTestUserRegistrationRequestType $ValidateTestUserRegistrationRequest
	 * @return ValidateTestUserRegistrationResponseType
	 */
	public function ValidateTestUserRegistration(ValidateTestUserRegistrationRequestType $ValidateTestUserRegistrationRequest) {
        return $this->__soapCall(
            'ValidateTestUserRegistration',
            array($ValidateTestUserRegistrationRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * VeROReportItems
	 *
	 * @param VeROReportItemsRequestType $VeROReportItemsRequest
	 * @return VeROReportItemsResponseType
	 */
	public function VeROReportItems(VeROReportItemsRequestType $VeROReportItemsRequest) {
        return $this->__soapCall(
            'VeROReportItems',
            array($VeROReportItemsRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * VerifyAddItem
	 *
	 * @param VerifyAddItemRequestType $VerifyAddItemRequest
	 * @return VerifyAddItemResponseType
	 */
	public function VerifyAddItem(VerifyAddItemRequestType $VerifyAddItemRequest) {
        return $this->__soapCall(
            'VerifyAddItem',
            array($VerifyAddItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}

	/**
	 * VerifyAddSecondChanceItem
	 *
	 * @param VerifyAddSecondChanceItemRequestType $VerifyAddSecondChanceItemRequest
	 * @return VerifyAddSecondChanceItemResponseType
	 */
	public function VerifyAddSecondChanceItem(VerifyAddSecondChanceItemRequestType $VerifyAddSecondChanceItemRequest) {
        return $this->__soapCall(
            'VerifyAddSecondChanceItem',
            array($VerifyAddSecondChanceItemRequest),
            array('uri'=>'urn:ebay:apis:eBLBaseComponents')
        );
	}
}
